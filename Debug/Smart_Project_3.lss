
Smart_Project_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b8  00800060  000038d4  00003968  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  00800218  00800218  00003b20  2**0
                  ALLOC
  3 .stab         00003204  00000000  00000000  00003b20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014a1  00000000  00000000  00006d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  000081c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  00008385  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  00008595  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  0000ac1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  0000c0ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000d3a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  0000d588  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  0000d886  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e230  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <__vector_4>
      14:	0c 94 ed 0c 	jmp	0x19da	; 0x19da <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 a7 09 	jmp	0x134e	; 0x134e <__vector_10>
      2c:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 31       	cpi	r26, 0x18	; 24
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a8 e1       	ldi	r26, 0x18	; 24
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 33       	cpi	r26, 0x3F	; 63
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cb 19 	call	0x3396	; 0x3396 <main>
      8a:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 31 1c 	jmp	0x3862	; 0x3862 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 ef       	ldi	r26, 0xF8	; 248
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4d 1c 	jmp	0x389a	; 0x389a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 59 1c 	jmp	0x38b2	; 0x38b2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 59 1c 	jmp	0x38b2	; 0x38b2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 31 1c 	jmp	0x3862	; 0x3862 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 ef       	ldi	r24, 0xF8	; 248
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4d 1c 	jmp	0x389a	; 0x389a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 39 1c 	jmp	0x3872	; 0x3872 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 ef       	ldi	r22, 0xF8	; 248
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 55 1c 	jmp	0x38aa	; 0x38aa <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 59 1c 	jmp	0x38b2	; 0x38b2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 59 1c 	jmp	0x38b2	; 0x38b2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 59 1c 	jmp	0x38b2	; 0x38b2 <__epilogue_restores__+0x18>

000008aa <__lesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__lesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__lesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__lesf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 59 1c 	jmp	0x38b2	; 0x38b2 <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 41 1c 	jmp	0x3882	; 0x3882 <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 5d 1c 	jmp	0x38ba	; 0x38ba <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 39 1c 	jmp	0x3872	; 0x3872 <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 55 1c 	jmp	0x38aa	; 0x38aa <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	e0 50       	subi	r30, 0x00	; 0
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <MTIMER_voidTimer0OVFInit>:
////////////////////////////////////////////////////////////////////////////////////////



void MTIMER_voidTimer0OVFInit(void)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE NORMAL MODE*/
		CLR_BIT(TCCR0, WGM00);
     e96:	a3 e5       	ldi	r26, 0x53	; 83
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e3 e5       	ldi	r30, 0x53	; 83
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	8f 7b       	andi	r24, 0xBF	; 191
     ea2:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, WGM01);
     ea4:	a3 e5       	ldi	r26, 0x53	; 83
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e3 e5       	ldi	r30, 0x53	; 83
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	87 7f       	andi	r24, 0xF7	; 247
     eb0:	8c 93       	st	X, r24

		SET_BIT(TIMSK, TOIE0);
     eb2:	a9 e5       	ldi	r26, 0x59	; 89
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e9 e5       	ldi	r30, 0x59	; 89
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	81 60       	ori	r24, 0x01	; 1
     ebe:	8c 93       	st	X, r24
#elif 	CLK == EIGHT
		TCCR0 = (TCCR0 & 0xf8) | 0x02;
#elif 	CLK == SIXTYFOUR
		TCCR0 = (TCCR0 & 0xf8) | 0x03;
#elif 	CLK == TWOFIFTYSIX
		TCCR0 = (TCCR0 & 0xf8) | 0x04;
     ec0:	a3 e5       	ldi	r26, 0x53	; 83
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e3 e5       	ldi	r30, 0x53	; 83
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	88 7f       	andi	r24, 0xF8	; 248
     ecc:	84 60       	ori	r24, 0x04	; 4
     ece:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xf8) | 0x06;
#elif 	CLK == EXTERN_RISING
		TCCR0 = (TCCR0 & 0xf8) | 0x07;
#endif

}
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <MTIMER_voidTimer0OVFDelay>:

void MTIMER_voidTimer0OVFDelay(u32 copy_u32Delay_ms)
{
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	df 93       	push	r29
     ee0:	cf 93       	push	r28
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	61 97       	sbiw	r28, 0x11	; 17
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	f8 94       	cli
     eec:	de bf       	out	0x3e, r29	; 62
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	cd bf       	out	0x3d, r28	; 61
     ef2:	6e 87       	std	Y+14, r22	; 0x0e
     ef4:	7f 87       	std	Y+15, r23	; 0x0f
     ef6:	88 8b       	std	Y+16, r24	; 0x10
     ef8:	99 8b       	std	Y+17, r25	; 0x11
	f32 L_f32MaxCompare;
	f32 L_f32OverFlowCount;
	u32 L_u32Carry;
	u8 L_u8Offset;

	G_u8Check = 0;
     efa:	10 92 35 02 	sts	0x0235, r1
	MTIMER_voidTimer0OVFInit();
     efe:	0e 94 47 07 	call	0xe8e	; 0xe8e <MTIMER_voidTimer0OVFInit>
		L_f32MaxCompare = L_f32MaxCompare * 256 * 8;
#elif 	CLK == SIXTYFOUR
		L_f32MaxCompare = (1000000.0) / F_CPU;
		L_f32MaxCompare = L_f32MaxCompare * 256 * 64;
#elif 	CLK == TWOFIFTYSIX
		L_f32MaxCompare = (1000000.0) / F_CPU;
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	a0 e0       	ldi	r26, 0x00	; 0
     f08:	be e3       	ldi	r27, 0x3E	; 62
     f0a:	8a 87       	std	Y+10, r24	; 0x0a
     f0c:	9b 87       	std	Y+11, r25	; 0x0b
     f0e:	ac 87       	std	Y+12, r26	; 0x0c
     f10:	bd 87       	std	Y+13, r27	; 0x0d
		L_f32MaxCompare = L_f32MaxCompare * 256 * 256;
     f12:	6a 85       	ldd	r22, Y+10	; 0x0a
     f14:	7b 85       	ldd	r23, Y+11	; 0x0b
     f16:	8c 85       	ldd	r24, Y+12	; 0x0c
     f18:	9d 85       	ldd	r25, Y+13	; 0x0d
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	40 e8       	ldi	r20, 0x80	; 128
     f20:	53 e4       	ldi	r21, 0x43	; 67
     f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	bc 01       	movw	r22, r24
     f2c:	cd 01       	movw	r24, r26
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	40 e8       	ldi	r20, 0x80	; 128
     f34:	53 e4       	ldi	r21, 0x43	; 67
     f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	8a 87       	std	Y+10, r24	; 0x0a
     f40:	9b 87       	std	Y+11, r25	; 0x0b
     f42:	ac 87       	std	Y+12, r26	; 0x0c
     f44:	bd 87       	std	Y+13, r27	; 0x0d
		L_f32MaxCompare = L_f32MaxCompare * 256 * 1024;

#endif


	if (copy_u32Delay_ms * 1000  <= L_f32MaxCompare)
     f46:	8e 85       	ldd	r24, Y+14	; 0x0e
     f48:	9f 85       	ldd	r25, Y+15	; 0x0f
     f4a:	a8 89       	ldd	r26, Y+16	; 0x10
     f4c:	b9 89       	ldd	r27, Y+17	; 0x11
     f4e:	28 ee       	ldi	r18, 0xE8	; 232
     f50:	33 e0       	ldi	r19, 0x03	; 3
     f52:	40 e0       	ldi	r20, 0x00	; 0
     f54:	50 e0       	ldi	r21, 0x00	; 0
     f56:	bc 01       	movw	r22, r24
     f58:	cd 01       	movw	r24, r26
     f5a:	0e 94 c9 1b 	call	0x3792	; 0x3792 <__mulsi3>
     f5e:	dc 01       	movw	r26, r24
     f60:	cb 01       	movw	r24, r22
     f62:	bc 01       	movw	r22, r24
     f64:	cd 01       	movw	r24, r26
     f66:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
     f6a:	dc 01       	movw	r26, r24
     f6c:	cb 01       	movw	r24, r22
     f6e:	bc 01       	movw	r22, r24
     f70:	cd 01       	movw	r24, r26
     f72:	2a 85       	ldd	r18, Y+10	; 0x0a
     f74:	3b 85       	ldd	r19, Y+11	; 0x0b
     f76:	4c 85       	ldd	r20, Y+12	; 0x0c
     f78:	5d 85       	ldd	r21, Y+13	; 0x0d
     f7a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
     f7e:	18 16       	cp	r1, r24
     f80:	0c f4       	brge	.+2      	; 0xf84 <MTIMER_voidTimer0OVFDelay+0xae>
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <MTIMER_voidTimer0OVFDelay+0x140>
		{
			L_f32OverFlowCount = (copy_u32Delay_ms / (L_f32MaxCompare/1000.0));
     f84:	6e 85       	ldd	r22, Y+14	; 0x0e
     f86:	7f 85       	ldd	r23, Y+15	; 0x0f
     f88:	88 89       	ldd	r24, Y+16	; 0x10
     f8a:	99 89       	ldd	r25, Y+17	; 0x11
     f8c:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
     f90:	7b 01       	movw	r14, r22
     f92:	8c 01       	movw	r16, r24
     f94:	6a 85       	ldd	r22, Y+10	; 0x0a
     f96:	7b 85       	ldd	r23, Y+11	; 0x0b
     f98:	8c 85       	ldd	r24, Y+12	; 0x0c
     f9a:	9d 85       	ldd	r25, Y+13	; 0x0d
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	4a e7       	ldi	r20, 0x7A	; 122
     fa2:	54 e4       	ldi	r21, 0x44	; 68
     fa4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     fa8:	dc 01       	movw	r26, r24
     faa:	cb 01       	movw	r24, r22
     fac:	9c 01       	movw	r18, r24
     fae:	ad 01       	movw	r20, r26
     fb0:	c8 01       	movw	r24, r16
     fb2:	b7 01       	movw	r22, r14
     fb4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     fb8:	dc 01       	movw	r26, r24
     fba:	cb 01       	movw	r24, r22
     fbc:	8e 83       	std	Y+6, r24	; 0x06
     fbe:	9f 83       	std	Y+7, r25	; 0x07
     fc0:	a8 87       	std	Y+8, r26	; 0x08
     fc2:	b9 87       	std	Y+9, r27	; 0x09
			L_u8Offset = L_f32OverFlowCount * 256.0;
     fc4:	6e 81       	ldd	r22, Y+6	; 0x06
     fc6:	7f 81       	ldd	r23, Y+7	; 0x07
     fc8:	88 85       	ldd	r24, Y+8	; 0x08
     fca:	99 85       	ldd	r25, Y+9	; 0x09
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	40 e8       	ldi	r20, 0x80	; 128
     fd2:	53 e4       	ldi	r21, 0x43	; 67
     fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd8:	dc 01       	movw	r26, r24
     fda:	cb 01       	movw	r24, r22
     fdc:	bc 01       	movw	r22, r24
     fde:	cd 01       	movw	r24, r26
     fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	89 83       	std	Y+1, r24	; 0x01
			G_u32Overflows = 1;
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	a0 e0       	ldi	r26, 0x00	; 0
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	80 93 31 02 	sts	0x0231, r24
     ff6:	90 93 32 02 	sts	0x0232, r25
     ffa:	a0 93 33 02 	sts	0x0233, r26
     ffe:	b0 93 34 02 	sts	0x0234, r27
			G_u8Reg = 256 - L_u8Offset;
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	81 95       	neg	r24
    1006:	80 93 30 02 	sts	0x0230, r24
			TCNT0 = G_u8Reg;
    100a:	e2 e5       	ldi	r30, 0x52	; 82
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 91 30 02 	lds	r24, 0x0230
    1012:	80 83       	st	Z, r24
    1014:	7f c0       	rjmp	.+254    	; 0x1114 <MTIMER_voidTimer0OVFDelay+0x23e>
		}
	else
		{
			L_f32OverFlowCount = (copy_u32Delay_ms / (L_f32MaxCompare/1000.0));
    1016:	6e 85       	ldd	r22, Y+14	; 0x0e
    1018:	7f 85       	ldd	r23, Y+15	; 0x0f
    101a:	88 89       	ldd	r24, Y+16	; 0x10
    101c:	99 89       	ldd	r25, Y+17	; 0x11
    101e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1022:	7b 01       	movw	r14, r22
    1024:	8c 01       	movw	r16, r24
    1026:	6a 85       	ldd	r22, Y+10	; 0x0a
    1028:	7b 85       	ldd	r23, Y+11	; 0x0b
    102a:	8c 85       	ldd	r24, Y+12	; 0x0c
    102c:	9d 85       	ldd	r25, Y+13	; 0x0d
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	4a e7       	ldi	r20, 0x7A	; 122
    1034:	54 e4       	ldi	r21, 0x44	; 68
    1036:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    103a:	dc 01       	movw	r26, r24
    103c:	cb 01       	movw	r24, r22
    103e:	9c 01       	movw	r18, r24
    1040:	ad 01       	movw	r20, r26
    1042:	c8 01       	movw	r24, r16
    1044:	b7 01       	movw	r22, r14
    1046:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    104a:	dc 01       	movw	r26, r24
    104c:	cb 01       	movw	r24, r22
    104e:	8e 83       	std	Y+6, r24	; 0x06
    1050:	9f 83       	std	Y+7, r25	; 0x07
    1052:	a8 87       	std	Y+8, r26	; 0x08
    1054:	b9 87       	std	Y+9, r27	; 0x09
			L_u32Carry = (copy_u32Delay_ms / (L_f32MaxCompare/1000));
    1056:	6e 85       	ldd	r22, Y+14	; 0x0e
    1058:	7f 85       	ldd	r23, Y+15	; 0x0f
    105a:	88 89       	ldd	r24, Y+16	; 0x10
    105c:	99 89       	ldd	r25, Y+17	; 0x11
    105e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1062:	7b 01       	movw	r14, r22
    1064:	8c 01       	movw	r16, r24
    1066:	6a 85       	ldd	r22, Y+10	; 0x0a
    1068:	7b 85       	ldd	r23, Y+11	; 0x0b
    106a:	8c 85       	ldd	r24, Y+12	; 0x0c
    106c:	9d 85       	ldd	r25, Y+13	; 0x0d
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	4a e7       	ldi	r20, 0x7A	; 122
    1074:	54 e4       	ldi	r21, 0x44	; 68
    1076:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    107a:	dc 01       	movw	r26, r24
    107c:	cb 01       	movw	r24, r22
    107e:	9c 01       	movw	r18, r24
    1080:	ad 01       	movw	r20, r26
    1082:	c8 01       	movw	r24, r16
    1084:	b7 01       	movw	r22, r14
    1086:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    108a:	dc 01       	movw	r26, r24
    108c:	cb 01       	movw	r24, r22
    108e:	bc 01       	movw	r22, r24
    1090:	cd 01       	movw	r24, r26
    1092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1096:	dc 01       	movw	r26, r24
    1098:	cb 01       	movw	r24, r22
    109a:	8a 83       	std	Y+2, r24	; 0x02
    109c:	9b 83       	std	Y+3, r25	; 0x03
    109e:	ac 83       	std	Y+4, r26	; 0x04
    10a0:	bd 83       	std	Y+5, r27	; 0x05

			L_u8Offset = (L_f32OverFlowCount - L_u32Carry) * 256.0;
    10a2:	6a 81       	ldd	r22, Y+2	; 0x02
    10a4:	7b 81       	ldd	r23, Y+3	; 0x03
    10a6:	8c 81       	ldd	r24, Y+4	; 0x04
    10a8:	9d 81       	ldd	r25, Y+5	; 0x05
    10aa:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    10ae:	9b 01       	movw	r18, r22
    10b0:	ac 01       	movw	r20, r24
    10b2:	6e 81       	ldd	r22, Y+6	; 0x06
    10b4:	7f 81       	ldd	r23, Y+7	; 0x07
    10b6:	88 85       	ldd	r24, Y+8	; 0x08
    10b8:	99 85       	ldd	r25, Y+9	; 0x09
    10ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    10be:	dc 01       	movw	r26, r24
    10c0:	cb 01       	movw	r24, r22
    10c2:	bc 01       	movw	r22, r24
    10c4:	cd 01       	movw	r24, r26
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	40 e8       	ldi	r20, 0x80	; 128
    10cc:	53 e4       	ldi	r21, 0x43	; 67
    10ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d2:	dc 01       	movw	r26, r24
    10d4:	cb 01       	movw	r24, r22
    10d6:	bc 01       	movw	r22, r24
    10d8:	cd 01       	movw	r24, r26
    10da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10de:	dc 01       	movw	r26, r24
    10e0:	cb 01       	movw	r24, r22
    10e2:	89 83       	std	Y+1, r24	; 0x01
			G_u32Overflows = L_u32Carry +1 ;
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	9b 81       	ldd	r25, Y+3	; 0x03
    10e8:	ac 81       	ldd	r26, Y+4	; 0x04
    10ea:	bd 81       	ldd	r27, Y+5	; 0x05
    10ec:	01 96       	adiw	r24, 0x01	; 1
    10ee:	a1 1d       	adc	r26, r1
    10f0:	b1 1d       	adc	r27, r1
    10f2:	80 93 31 02 	sts	0x0231, r24
    10f6:	90 93 32 02 	sts	0x0232, r25
    10fa:	a0 93 33 02 	sts	0x0233, r26
    10fe:	b0 93 34 02 	sts	0x0234, r27
			G_u8Reg = 256 - L_u8Offset;
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	81 95       	neg	r24
    1106:	80 93 30 02 	sts	0x0230, r24
			TCNT0 = G_u8Reg;
    110a:	e2 e5       	ldi	r30, 0x52	; 82
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 91 30 02 	lds	r24, 0x0230
    1112:	80 83       	st	Z, r24
		}

		while (GET_BIT(TIFR, TOV0) == 0 && G_u8Check == 0);
    1114:	e8 e5       	ldi	r30, 0x58	; 88
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	88 2f       	mov	r24, r24
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	81 70       	andi	r24, 0x01	; 1
    1120:	90 70       	andi	r25, 0x00	; 0
    1122:	00 97       	sbiw	r24, 0x00	; 0
    1124:	21 f4       	brne	.+8      	; 0x112e <MTIMER_voidTimer0OVFDelay+0x258>
    1126:	80 91 35 02 	lds	r24, 0x0235
    112a:	88 23       	and	r24, r24
    112c:	99 f3       	breq	.-26     	; 0x1114 <MTIMER_voidTimer0OVFDelay+0x23e>
}
    112e:	61 96       	adiw	r28, 0x11	; 17
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	de bf       	out	0x3e, r29	; 62
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	cd bf       	out	0x3d, r28	; 61
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	1f 91       	pop	r17
    1140:	0f 91       	pop	r16
    1142:	ff 90       	pop	r15
    1144:	ef 90       	pop	r14
    1146:	08 95       	ret

00001148 <MTIMER_voidTimer0OVFSetCallBack>:

void MTIMER_voidTimer0OVFSetCallBack ( void (*copy_PFvoidTimer0OVF) (void))
{
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	00 d0       	rcall	.+0      	; 0x114e <MTIMER_voidTimer0OVFSetCallBack+0x6>
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	9a 83       	std	Y+2, r25	; 0x02
    1154:	89 83       	std	Y+1, r24	; 0x01
	TIMER_PFTIMER0OVF = copy_PFvoidTimer0OVF ;
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	9a 81       	ldd	r25, Y+2	; 0x02
    115a:	90 93 19 02 	sts	0x0219, r25
    115e:	80 93 18 02 	sts	0x0218, r24
}
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	cf 91       	pop	r28
    1168:	df 91       	pop	r29
    116a:	08 95       	ret

0000116c <MTIMER_voidTimer0COMPInit>:



void MTIMER_voidTimer0COMPInit(void)
{
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE CTC MODE*/
		CLR_BIT(TCCR0, WGM00);
    1174:	a3 e5       	ldi	r26, 0x53	; 83
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e3 e5       	ldi	r30, 0x53	; 83
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	8f 7b       	andi	r24, 0xBF	; 191
    1180:	8c 93       	st	X, r24
		SET_BIT(TCCR0, WGM01);
    1182:	a3 e5       	ldi	r26, 0x53	; 83
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e3 e5       	ldi	r30, 0x53	; 83
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	88 60       	ori	r24, 0x08	; 8
    118e:	8c 93       	st	X, r24

		SET_BIT(TIMSK, OCIE0);
    1190:	a9 e5       	ldi	r26, 0x59	; 89
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e9 e5       	ldi	r30, 0x59	; 89
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	82 60       	ori	r24, 0x02	; 2
    119c:	8c 93       	st	X, r24
#elif 	CLK == EIGHT
		TCCR0 = (TCCR0 & 0xf8) | 0x02;
#elif 	CLK == SIXTYFOUR
		TCCR0 = (TCCR0 & 0xf8) | 0x03;
#elif 	CLK == TWOFIFTYSIX
		TCCR0 = (TCCR0 & 0xf8) | 0x04;
    119e:	a3 e5       	ldi	r26, 0x53	; 83
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e3 e5       	ldi	r30, 0x53	; 83
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	88 7f       	andi	r24, 0xF8	; 248
    11aa:	84 60       	ori	r24, 0x04	; 4
    11ac:	8c 93       	st	X, r24
#elif 	CLK == EXTERN_FALLING
		TCCR0 = (TCCR0 & 0xf8) | 0x06;
#elif 	CLK == EXTERN_RISING
		TCCR0 = (TCCR0 & 0xf8) | 0x07;
#endif
}
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <MTIMER_voidTimer0COMPDelay>:


void MTIMER_voidTimer0COMPDelay(u8 copy_u8Offset, u32 copy_u32Counts)
{
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <MTIMER_voidTimer0COMPDelay+0x6>
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <MTIMER_voidTimer0COMPDelay+0x8>
    11bc:	0f 92       	push	r0
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    11c2:	89 83       	std	Y+1, r24	; 0x01
    11c4:	4a 83       	std	Y+2, r20	; 0x02
    11c6:	5b 83       	std	Y+3, r21	; 0x03
    11c8:	6c 83       	std	Y+4, r22	; 0x04
    11ca:	7d 83       	std	Y+5, r23	; 0x05
	G_u8Check = 0;
    11cc:	10 92 35 02 	sts	0x0235, r1
	G_u32Overflows = copy_u32Counts;
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	9b 81       	ldd	r25, Y+3	; 0x03
    11d4:	ac 81       	ldd	r26, Y+4	; 0x04
    11d6:	bd 81       	ldd	r27, Y+5	; 0x05
    11d8:	80 93 31 02 	sts	0x0231, r24
    11dc:	90 93 32 02 	sts	0x0232, r25
    11e0:	a0 93 33 02 	sts	0x0233, r26
    11e4:	b0 93 34 02 	sts	0x0234, r27
	if (copy_u32Counts == 1)
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	9b 81       	ldd	r25, Y+3	; 0x03
    11ec:	ac 81       	ldd	r26, Y+4	; 0x04
    11ee:	bd 81       	ldd	r27, Y+5	; 0x05
    11f0:	81 30       	cpi	r24, 0x01	; 1
    11f2:	91 05       	cpc	r25, r1
    11f4:	a1 05       	cpc	r26, r1
    11f6:	b1 05       	cpc	r27, r1
    11f8:	29 f4       	brne	.+10     	; 0x1204 <MTIMER_voidTimer0COMPDelay+0x50>
	{
		OCR0 = copy_u8Offset;
    11fa:	ec e5       	ldi	r30, 0x5C	; 92
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	80 83       	st	Z, r24
    1202:	10 c0       	rjmp	.+32     	; 0x1224 <MTIMER_voidTimer0COMPDelay+0x70>
	}
	else if (copy_u32Counts > 1)
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	9b 81       	ldd	r25, Y+3	; 0x03
    1208:	ac 81       	ldd	r26, Y+4	; 0x04
    120a:	bd 81       	ldd	r27, Y+5	; 0x05
    120c:	82 30       	cpi	r24, 0x02	; 2
    120e:	91 05       	cpc	r25, r1
    1210:	a1 05       	cpc	r26, r1
    1212:	b1 05       	cpc	r27, r1
    1214:	38 f0       	brcs	.+14     	; 0x1224 <MTIMER_voidTimer0COMPDelay+0x70>
	{
		G_u8Reg = copy_u8Offset;
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	80 93 30 02 	sts	0x0230, r24
		OCR0 = 255;
    121c:	ec e5       	ldi	r30, 0x5C	; 92
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	8f ef       	ldi	r24, 0xFF	; 255
    1222:	80 83       	st	Z, r24
	}
	MTIMER_voidTimer0COMPInit();
    1224:	0e 94 b6 08 	call	0x116c	; 0x116c <MTIMER_voidTimer0COMPInit>
	while (GET_BIT(TIFR, OCF0) == 0  &&  G_u8Check == 0);
    1228:	e8 e5       	ldi	r30, 0x58	; 88
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	86 95       	lsr	r24
    1230:	88 2f       	mov	r24, r24
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	81 70       	andi	r24, 0x01	; 1
    1236:	90 70       	andi	r25, 0x00	; 0
    1238:	00 97       	sbiw	r24, 0x00	; 0
    123a:	21 f4       	brne	.+8      	; 0x1244 <MTIMER_voidTimer0COMPDelay+0x90>
    123c:	80 91 35 02 	lds	r24, 0x0235
    1240:	88 23       	and	r24, r24
    1242:	91 f3       	breq	.-28     	; 0x1228 <MTIMER_voidTimer0COMPDelay+0x74>
	//TCCR0 = 0;
}
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	cf 91       	pop	r28
    1250:	df 91       	pop	r29
    1252:	08 95       	ret

00001254 <MTIMER_voidTimer0COMPSetCallBack>:




void MTIMER_voidTimer0COMPSetCallBack ( void (*copy_PFvoidTimer0COMP) (void))
{
    1254:	df 93       	push	r29
    1256:	cf 93       	push	r28
    1258:	00 d0       	rcall	.+0      	; 0x125a <MTIMER_voidTimer0COMPSetCallBack+0x6>
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	9a 83       	std	Y+2, r25	; 0x02
    1260:	89 83       	std	Y+1, r24	; 0x01
	TIMER_PFTIMER0COMP = copy_PFvoidTimer0COMP ;
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	9a 81       	ldd	r25, Y+2	; 0x02
    1266:	90 93 1b 02 	sts	0x021B, r25
    126a:	80 93 1a 02 	sts	0x021A, r24
}
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <__vector_11>:


ISR (TIMER0_OVF_vect)
{
    1278:	1f 92       	push	r1
    127a:	0f 92       	push	r0
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	0f 92       	push	r0
    1280:	11 24       	eor	r1, r1
    1282:	2f 93       	push	r18
    1284:	3f 93       	push	r19
    1286:	4f 93       	push	r20
    1288:	5f 93       	push	r21
    128a:	6f 93       	push	r22
    128c:	7f 93       	push	r23
    128e:	8f 93       	push	r24
    1290:	9f 93       	push	r25
    1292:	af 93       	push	r26
    1294:	bf 93       	push	r27
    1296:	ef 93       	push	r30
    1298:	ff 93       	push	r31
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
	static u32 L_u32OVFCounter = 0 ;
	L_u32OVFCounter ++ ;
    12a2:	80 91 20 02 	lds	r24, 0x0220
    12a6:	90 91 21 02 	lds	r25, 0x0221
    12aa:	a0 91 22 02 	lds	r26, 0x0222
    12ae:	b0 91 23 02 	lds	r27, 0x0223
    12b2:	01 96       	adiw	r24, 0x01	; 1
    12b4:	a1 1d       	adc	r26, r1
    12b6:	b1 1d       	adc	r27, r1
    12b8:	80 93 20 02 	sts	0x0220, r24
    12bc:	90 93 21 02 	sts	0x0221, r25
    12c0:	a0 93 22 02 	sts	0x0222, r26
    12c4:	b0 93 23 02 	sts	0x0223, r27
	if (L_u32OVFCounter == G_u32Overflows)
    12c8:	20 91 20 02 	lds	r18, 0x0220
    12cc:	30 91 21 02 	lds	r19, 0x0221
    12d0:	40 91 22 02 	lds	r20, 0x0222
    12d4:	50 91 23 02 	lds	r21, 0x0223
    12d8:	80 91 31 02 	lds	r24, 0x0231
    12dc:	90 91 32 02 	lds	r25, 0x0232
    12e0:	a0 91 33 02 	lds	r26, 0x0233
    12e4:	b0 91 34 02 	lds	r27, 0x0234
    12e8:	28 17       	cp	r18, r24
    12ea:	39 07       	cpc	r19, r25
    12ec:	4a 07       	cpc	r20, r26
    12ee:	5b 07       	cpc	r21, r27
    12f0:	d9 f4       	brne	.+54     	; 0x1328 <__vector_11+0xb0>
	{
		L_u32OVFCounter = 0 ;
    12f2:	10 92 20 02 	sts	0x0220, r1
    12f6:	10 92 21 02 	sts	0x0221, r1
    12fa:	10 92 22 02 	sts	0x0222, r1
    12fe:	10 92 23 02 	sts	0x0223, r1
		TCNT0 = G_u8Reg;
    1302:	e2 e5       	ldi	r30, 0x52	; 82
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 91 30 02 	lds	r24, 0x0230
    130a:	80 83       	st	Z, r24
		if(TIMER_PFTIMER0OVF != NULL)
    130c:	80 91 18 02 	lds	r24, 0x0218
    1310:	90 91 19 02 	lds	r25, 0x0219
    1314:	00 97       	sbiw	r24, 0x00	; 0
    1316:	29 f0       	breq	.+10     	; 0x1322 <__vector_11+0xaa>
			TIMER_PFTIMER0OVF() ;
    1318:	e0 91 18 02 	lds	r30, 0x0218
    131c:	f0 91 19 02 	lds	r31, 0x0219
    1320:	09 95       	icall
		G_u8Check = 1;
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	80 93 35 02 	sts	0x0235, r24
	}
}
    1328:	cf 91       	pop	r28
    132a:	df 91       	pop	r29
    132c:	ff 91       	pop	r31
    132e:	ef 91       	pop	r30
    1330:	bf 91       	pop	r27
    1332:	af 91       	pop	r26
    1334:	9f 91       	pop	r25
    1336:	8f 91       	pop	r24
    1338:	7f 91       	pop	r23
    133a:	6f 91       	pop	r22
    133c:	5f 91       	pop	r21
    133e:	4f 91       	pop	r20
    1340:	3f 91       	pop	r19
    1342:	2f 91       	pop	r18
    1344:	0f 90       	pop	r0
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	0f 90       	pop	r0
    134a:	1f 90       	pop	r1
    134c:	18 95       	reti

0000134e <__vector_10>:

ISR (TIMER0_COMP_vect)
{
    134e:	1f 92       	push	r1
    1350:	0f 92       	push	r0
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	0f 92       	push	r0
    1356:	11 24       	eor	r1, r1
    1358:	2f 93       	push	r18
    135a:	3f 93       	push	r19
    135c:	4f 93       	push	r20
    135e:	5f 93       	push	r21
    1360:	6f 93       	push	r22
    1362:	7f 93       	push	r23
    1364:	8f 93       	push	r24
    1366:	9f 93       	push	r25
    1368:	af 93       	push	r26
    136a:	bf 93       	push	r27
    136c:	ef 93       	push	r30
    136e:	ff 93       	push	r31
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
	static u32 G_u32CompCounter = 0;
	G_u32CompCounter ++ ;
    1378:	80 91 24 02 	lds	r24, 0x0224
    137c:	90 91 25 02 	lds	r25, 0x0225
    1380:	a0 91 26 02 	lds	r26, 0x0226
    1384:	b0 91 27 02 	lds	r27, 0x0227
    1388:	01 96       	adiw	r24, 0x01	; 1
    138a:	a1 1d       	adc	r26, r1
    138c:	b1 1d       	adc	r27, r1
    138e:	80 93 24 02 	sts	0x0224, r24
    1392:	90 93 25 02 	sts	0x0225, r25
    1396:	a0 93 26 02 	sts	0x0226, r26
    139a:	b0 93 27 02 	sts	0x0227, r27
	if( G_u32Overflows ==  G_u32CompCounter)
    139e:	20 91 31 02 	lds	r18, 0x0231
    13a2:	30 91 32 02 	lds	r19, 0x0232
    13a6:	40 91 33 02 	lds	r20, 0x0233
    13aa:	50 91 34 02 	lds	r21, 0x0234
    13ae:	80 91 24 02 	lds	r24, 0x0224
    13b2:	90 91 25 02 	lds	r25, 0x0225
    13b6:	a0 91 26 02 	lds	r26, 0x0226
    13ba:	b0 91 27 02 	lds	r27, 0x0227
    13be:	28 17       	cp	r18, r24
    13c0:	39 07       	cpc	r19, r25
    13c2:	4a 07       	cpc	r20, r26
    13c4:	5b 07       	cpc	r21, r27
    13c6:	b9 f4       	brne	.+46     	; 0x13f6 <__vector_10+0xa8>
	{
		if( TIMER_PFTIMER0COMP != NULL )
    13c8:	80 91 1a 02 	lds	r24, 0x021A
    13cc:	90 91 1b 02 	lds	r25, 0x021B
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	29 f0       	breq	.+10     	; 0x13de <__vector_10+0x90>
			TIMER_PFTIMER0COMP() ;
    13d4:	e0 91 1a 02 	lds	r30, 0x021A
    13d8:	f0 91 1b 02 	lds	r31, 0x021B
    13dc:	09 95       	icall
		G_u32CompCounter = 0 ;
    13de:	10 92 24 02 	sts	0x0224, r1
    13e2:	10 92 25 02 	sts	0x0225, r1
    13e6:	10 92 26 02 	sts	0x0226, r1
    13ea:	10 92 27 02 	sts	0x0227, r1
		G_u8Check = 1;
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	80 93 35 02 	sts	0x0235, r24
    13f4:	3a c0       	rjmp	.+116    	; 0x146a <__vector_10+0x11c>
	}
	else if(G_u32Overflows == G_u32CompCounter + 1)
    13f6:	80 91 24 02 	lds	r24, 0x0224
    13fa:	90 91 25 02 	lds	r25, 0x0225
    13fe:	a0 91 26 02 	lds	r26, 0x0226
    1402:	b0 91 27 02 	lds	r27, 0x0227
    1406:	9c 01       	movw	r18, r24
    1408:	ad 01       	movw	r20, r26
    140a:	2f 5f       	subi	r18, 0xFF	; 255
    140c:	3f 4f       	sbci	r19, 0xFF	; 255
    140e:	4f 4f       	sbci	r20, 0xFF	; 255
    1410:	5f 4f       	sbci	r21, 0xFF	; 255
    1412:	80 91 31 02 	lds	r24, 0x0231
    1416:	90 91 32 02 	lds	r25, 0x0232
    141a:	a0 91 33 02 	lds	r26, 0x0233
    141e:	b0 91 34 02 	lds	r27, 0x0234
    1422:	28 17       	cp	r18, r24
    1424:	39 07       	cpc	r19, r25
    1426:	4a 07       	cpc	r20, r26
    1428:	5b 07       	cpc	r21, r27
    142a:	31 f4       	brne	.+12     	; 0x1438 <__vector_10+0xea>
	{
		OCR0 = G_u8Reg;
    142c:	ec e5       	ldi	r30, 0x5C	; 92
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 91 30 02 	lds	r24, 0x0230
    1434:	80 83       	st	Z, r24
    1436:	19 c0       	rjmp	.+50     	; 0x146a <__vector_10+0x11c>
	}
	else if (G_u32Overflows != G_u32CompCounter)
    1438:	20 91 31 02 	lds	r18, 0x0231
    143c:	30 91 32 02 	lds	r19, 0x0232
    1440:	40 91 33 02 	lds	r20, 0x0233
    1444:	50 91 34 02 	lds	r21, 0x0234
    1448:	80 91 24 02 	lds	r24, 0x0224
    144c:	90 91 25 02 	lds	r25, 0x0225
    1450:	a0 91 26 02 	lds	r26, 0x0226
    1454:	b0 91 27 02 	lds	r27, 0x0227
    1458:	28 17       	cp	r18, r24
    145a:	39 07       	cpc	r19, r25
    145c:	4a 07       	cpc	r20, r26
    145e:	5b 07       	cpc	r21, r27
    1460:	21 f0       	breq	.+8      	; 0x146a <__vector_10+0x11c>
	{
		OCR0 = 255;
    1462:	ec e5       	ldi	r30, 0x5C	; 92
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	8f ef       	ldi	r24, 0xFF	; 255
    1468:	80 83       	st	Z, r24
	}

}
    146a:	cf 91       	pop	r28
    146c:	df 91       	pop	r29
    146e:	ff 91       	pop	r31
    1470:	ef 91       	pop	r30
    1472:	bf 91       	pop	r27
    1474:	af 91       	pop	r26
    1476:	9f 91       	pop	r25
    1478:	8f 91       	pop	r24
    147a:	7f 91       	pop	r23
    147c:	6f 91       	pop	r22
    147e:	5f 91       	pop	r21
    1480:	4f 91       	pop	r20
    1482:	3f 91       	pop	r19
    1484:	2f 91       	pop	r18
    1486:	0f 90       	pop	r0
    1488:	0f be       	out	0x3f, r0	; 63
    148a:	0f 90       	pop	r0
    148c:	1f 90       	pop	r1
    148e:	18 95       	reti

00001490 <MTIMER_voidTimer0FPWMInit>:


void MTIMER_voidTimer0FPWMInit()
{
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE FPWM MODE*/
		SET_BIT(TCCR0, WGM00);
    1498:	a3 e5       	ldi	r26, 0x53	; 83
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e3 e5       	ldi	r30, 0x53	; 83
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	80 64       	ori	r24, 0x40	; 64
    14a4:	8c 93       	st	X, r24
		SET_BIT(TCCR0, WGM01);
    14a6:	a3 e5       	ldi	r26, 0x53	; 83
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e3 e5       	ldi	r30, 0x53	; 83
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	88 60       	ori	r24, 0x08	; 8
    14b2:	8c 93       	st	X, r24

		SET_BIT(TCCR0, COM00);
    14b4:	a3 e5       	ldi	r26, 0x53	; 83
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	e3 e5       	ldi	r30, 0x53	; 83
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	80 61       	ori	r24, 0x10	; 16
    14c0:	8c 93       	st	X, r24
		SET_BIT(TCCR0, COM01);
    14c2:	a3 e5       	ldi	r26, 0x53	; 83
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e3 e5       	ldi	r30, 0x53	; 83
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	80 62       	ori	r24, 0x20	; 32
    14ce:	8c 93       	st	X, r24
#elif 	CLK == EIGHT
		TCCR0 = (TCCR0 & 0xf8) | 0x02;
#elif 	CLK == SIXTYFOUR
		TCCR0 = (TCCR0 & 0xf8) | 0x03;
#elif 	CLK == TWOFIFTYSIX
		TCCR0 = (TCCR0 & 0xf8) | 0x04;
    14d0:	a3 e5       	ldi	r26, 0x53	; 83
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	e3 e5       	ldi	r30, 0x53	; 83
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	88 7f       	andi	r24, 0xF8	; 248
    14dc:	84 60       	ori	r24, 0x04	; 4
    14de:	8c 93       	st	X, r24
#elif 	CLK == EXTERN_FALLING
		TCCR0 = (TCCR0 & 0xf8) | 0x06;
#elif 	CLK == EXTERN_RISING
		TCCR0 = (TCCR0 & 0xf8) | 0x07;
#endif
}
    14e0:	cf 91       	pop	r28
    14e2:	df 91       	pop	r29
    14e4:	08 95       	ret

000014e6 <MTIMER_voidTimer0FPWMWrite>:

void MTIMER_voidTimer0FPWMWrite(u8 copy_u8Value)
{
    14e6:	df 93       	push	r29
    14e8:	cf 93       	push	r28
    14ea:	0f 92       	push	r0
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = copy_u8Value;
    14f2:	ec e5       	ldi	r30, 0x5C	; 92
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	80 83       	st	Z, r24

}
    14fa:	0f 90       	pop	r0
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	08 95       	ret

00001502 <MTIMER_voidTimer1FPWM_ICR_INIT>:
/////////////////////////////////////////////////////////////////////////////////////////
void MTIMER_voidTimer1FPWM_ICR_INIT (void)
{
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSING FWPM W/ ICR*/

	CLR_BIT(TCCR1A,WGM10);
    150a:	af e4       	ldi	r26, 0x4F	; 79
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	ef e4       	ldi	r30, 0x4F	; 79
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	8e 7f       	andi	r24, 0xFE	; 254
    1516:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    1518:	af e4       	ldi	r26, 0x4F	; 79
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	ef e4       	ldi	r30, 0x4F	; 79
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	82 60       	ori	r24, 0x02	; 2
    1524:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    1526:	ae e4       	ldi	r26, 0x4E	; 78
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	ee e4       	ldi	r30, 0x4E	; 78
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	88 60       	ori	r24, 0x08	; 8
    1532:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    1534:	ae e4       	ldi	r26, 0x4E	; 78
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	ee e4       	ldi	r30, 0x4E	; 78
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	80 61       	ori	r24, 0x10	; 16
    1540:	8c 93       	st	X, r24

	/* CLEAR OC1A */
	CLR_BIT(TCCR1A, COM1A0);
    1542:	af e4       	ldi	r26, 0x4F	; 79
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	ef e4       	ldi	r30, 0x4F	; 79
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	8f 7b       	andi	r24, 0xBF	; 191
    154e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1A1);
    1550:	af e4       	ldi	r26, 0x4F	; 79
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	ef e4       	ldi	r30, 0x4F	; 79
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	80 68       	ori	r24, 0x80	; 128
    155c:	8c 93       	st	X, r24

	/*FREQUENCY CONTROL*/
#if		CLK_ONE == ONE
		TCCR1B = (TCCR1B & 0xf8) | 0x01;
    155e:	ae e4       	ldi	r26, 0x4E	; 78
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	ee e4       	ldi	r30, 0x4E	; 78
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	88 7f       	andi	r24, 0xF8	; 248
    156a:	81 60       	ori	r24, 0x01	; 1
    156c:	8c 93       	st	X, r24
		TCCR1B = (TCCR1B & 0xf8) | 0x07;
#endif


	/* ICR1 */
	ICR1 = 19999;
    156e:	e6 e4       	ldi	r30, 0x46	; 70
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	8f e1       	ldi	r24, 0x1F	; 31
    1574:	9e e4       	ldi	r25, 0x4E	; 78
    1576:	91 83       	std	Z+1, r25	; 0x01
    1578:	80 83       	st	Z, r24
	/*N.B. Regarding FREQ and ICR1
	 * At mode 14, TIMER1 works in FPWM mode,
	 * with the value of ICR1 controlling
	 *the top value, hence, the frequency of PWM
	 * */
}
    157a:	cf 91       	pop	r28
    157c:	df 91       	pop	r29
    157e:	08 95       	ret

00001580 <MTIMER_voidTimer2COMPInit>:

////////////////////////////////////////////////////////////////////////////////////////

void MTIMER_voidTimer2COMPInit(void)

{
    1580:	df 93       	push	r29
    1582:	cf 93       	push	r28
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE CTC MODE*/
		CLR_BIT(TCCR2, WGM20);
    1588:	a5 e4       	ldi	r26, 0x45	; 69
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	e5 e4       	ldi	r30, 0x45	; 69
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	8f 7b       	andi	r24, 0xBF	; 191
    1594:	8c 93       	st	X, r24
		SET_BIT(TCCR2, WGM21);
    1596:	a5 e4       	ldi	r26, 0x45	; 69
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e5 e4       	ldi	r30, 0x45	; 69
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	88 60       	ori	r24, 0x08	; 8
    15a2:	8c 93       	st	X, r24

		SET_BIT(TIMSK, OCIE2);
    15a4:	a9 e5       	ldi	r26, 0x59	; 89
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e9 e5       	ldi	r30, 0x59	; 89
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	80 68       	ori	r24, 0x80	; 128
    15b0:	8c 93       	st	X, r24
		TCCR2 |= (1<<2);
		//TCCR2 = (TCCR2 & 0xf8) | 0x04;
#elif 	CLK == ONETWENTYEIGHT
		TCCR2 = (TCCR2 & 0xf8) | 0x05;
#elif 	CLK == TWOFIFTYSIX
		TCCR2 = (TCCR2 & 0xf8) | 0x06;
    15b2:	a5 e4       	ldi	r26, 0x45	; 69
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	e5 e4       	ldi	r30, 0x45	; 69
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	88 7f       	andi	r24, 0xF8	; 248
    15be:	86 60       	ori	r24, 0x06	; 6
    15c0:	8c 93       	st	X, r24
#elif 	CLK == TENTWENTYFOUR
		TCCR2 = (TCCR2 & 0xf8) | 0x07;
#endif

}
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <MTIMER_voidTimer2COMPDelay>:

void MTIMER_voidTimer2COMPDelay(u8 copy_u8Offset, u32 copy_u32Counts)
{
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	00 d0       	rcall	.+0      	; 0x15ce <MTIMER_voidTimer2COMPDelay+0x6>
    15ce:	00 d0       	rcall	.+0      	; 0x15d0 <MTIMER_voidTimer2COMPDelay+0x8>
    15d0:	0f 92       	push	r0
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	89 83       	std	Y+1, r24	; 0x01
    15d8:	4a 83       	std	Y+2, r20	; 0x02
    15da:	5b 83       	std	Y+3, r21	; 0x03
    15dc:	6c 83       	std	Y+4, r22	; 0x04
    15de:	7d 83       	std	Y+5, r23	; 0x05
	G_u8Check = 0;
    15e0:	10 92 35 02 	sts	0x0235, r1
	G_u32Overflows = copy_u32Counts;
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	9b 81       	ldd	r25, Y+3	; 0x03
    15e8:	ac 81       	ldd	r26, Y+4	; 0x04
    15ea:	bd 81       	ldd	r27, Y+5	; 0x05
    15ec:	80 93 31 02 	sts	0x0231, r24
    15f0:	90 93 32 02 	sts	0x0232, r25
    15f4:	a0 93 33 02 	sts	0x0233, r26
    15f8:	b0 93 34 02 	sts	0x0234, r27
	if (copy_u32Counts == 1)
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1600:	ac 81       	ldd	r26, Y+4	; 0x04
    1602:	bd 81       	ldd	r27, Y+5	; 0x05
    1604:	81 30       	cpi	r24, 0x01	; 1
    1606:	91 05       	cpc	r25, r1
    1608:	a1 05       	cpc	r26, r1
    160a:	b1 05       	cpc	r27, r1
    160c:	29 f4       	brne	.+10     	; 0x1618 <MTIMER_voidTimer2COMPDelay+0x50>
	{
		OCR2 = copy_u8Offset;
    160e:	e3 e4       	ldi	r30, 0x43	; 67
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	80 83       	st	Z, r24
    1616:	10 c0       	rjmp	.+32     	; 0x1638 <MTIMER_voidTimer2COMPDelay+0x70>
	}
	else if (copy_u32Counts > 1)
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	9b 81       	ldd	r25, Y+3	; 0x03
    161c:	ac 81       	ldd	r26, Y+4	; 0x04
    161e:	bd 81       	ldd	r27, Y+5	; 0x05
    1620:	82 30       	cpi	r24, 0x02	; 2
    1622:	91 05       	cpc	r25, r1
    1624:	a1 05       	cpc	r26, r1
    1626:	b1 05       	cpc	r27, r1
    1628:	38 f0       	brcs	.+14     	; 0x1638 <MTIMER_voidTimer2COMPDelay+0x70>
	{
		G_u8Reg = copy_u8Offset;
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	80 93 30 02 	sts	0x0230, r24
		OCR2 = 255;
    1630:	e3 e4       	ldi	r30, 0x43	; 67
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	8f ef       	ldi	r24, 0xFF	; 255
    1636:	80 83       	st	Z, r24

	}
	MTIMER_voidTimer2COMPInit();
    1638:	0e 94 c0 0a 	call	0x1580	; 0x1580 <MTIMER_voidTimer2COMPInit>
	while (GET_BIT(TIFR, OCF2) == 0  &&  G_u8Check == 0);
    163c:	e8 e5       	ldi	r30, 0x58	; 88
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	88 23       	and	r24, r24
    1644:	24 f0       	brlt	.+8      	; 0x164e <MTIMER_voidTimer2COMPDelay+0x86>
    1646:	80 91 35 02 	lds	r24, 0x0235
    164a:	88 23       	and	r24, r24
    164c:	b9 f3       	breq	.-18     	; 0x163c <MTIMER_voidTimer2COMPDelay+0x74>
	}
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <MTIMER_voidTimer2COMPSetCallBack>:

void MTIMER_voidTimer2COMPSetCallBack ( void (*copy_PFvoidTimer2COMP) (void))
{
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	00 d0       	rcall	.+0      	; 0x1664 <MTIMER_voidTimer2COMPSetCallBack+0x6>
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	9a 83       	std	Y+2, r25	; 0x02
    166a:	89 83       	std	Y+1, r24	; 0x01
	TIMER_PFTIMER2COMP = copy_PFvoidTimer2COMP ;
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	9a 81       	ldd	r25, Y+2	; 0x02
    1670:	90 93 1f 02 	sts	0x021F, r25
    1674:	80 93 1e 02 	sts	0x021E, r24
}
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	cf 91       	pop	r28
    167e:	df 91       	pop	r29
    1680:	08 95       	ret

00001682 <MTIMER_voidTimer2OVFInit>:


void MTIMER_voidTimer2OVFInit(void)

{
    1682:	df 93       	push	r29
    1684:	cf 93       	push	r28
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE NORMAL MODE*/
		CLR_BIT(TCCR2, WGM20);
    168a:	a5 e4       	ldi	r26, 0x45	; 69
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e5 e4       	ldi	r30, 0x45	; 69
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	8f 7b       	andi	r24, 0xBF	; 191
    1696:	8c 93       	st	X, r24
		CLR_BIT(TCCR2, WGM21);
    1698:	a5 e4       	ldi	r26, 0x45	; 69
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e5 e4       	ldi	r30, 0x45	; 69
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	87 7f       	andi	r24, 0xF7	; 247
    16a4:	8c 93       	st	X, r24

		SET_BIT(TIMSK, TOIE2);
    16a6:	a9 e5       	ldi	r26, 0x59	; 89
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	e9 e5       	ldi	r30, 0x59	; 89
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	80 64       	ori	r24, 0x40	; 64
    16b2:	8c 93       	st	X, r24
		TCCR2 |= (1<<2);
		//TCCR2 = (TCCR2 & 0xf8) | 0x04;
#elif 	CLK == ONETWENTYEIGHT
		TCCR2 = (TCCR2 & 0xf8) | 0x05;
#elif 	CLK == TWOFIFTYSIX
		TCCR2 = (TCCR2 & 0xf8) | 0x06;
    16b4:	a5 e4       	ldi	r26, 0x45	; 69
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e5 e4       	ldi	r30, 0x45	; 69
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	88 7f       	andi	r24, 0xF8	; 248
    16c0:	86 60       	ori	r24, 0x06	; 6
    16c2:	8c 93       	st	X, r24
#elif 	CLK == TENTWENTYFOUR
		TCCR2 = (TCCR2 & 0xf8) | 0x07;
#endif

}
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <MTIMER_voidTimer2OVFDelay>:

void MTIMER_voidTimer2OVFDelay(u32 copy_u32Delay_ms)
{
    16ca:	ef 92       	push	r14
    16cc:	ff 92       	push	r15
    16ce:	0f 93       	push	r16
    16d0:	1f 93       	push	r17
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
    16da:	61 97       	sbiw	r28, 0x11	; 17
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	f8 94       	cli
    16e0:	de bf       	out	0x3e, r29	; 62
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	cd bf       	out	0x3d, r28	; 61
    16e6:	6e 87       	std	Y+14, r22	; 0x0e
    16e8:	7f 87       	std	Y+15, r23	; 0x0f
    16ea:	88 8b       	std	Y+16, r24	; 0x10
    16ec:	99 8b       	std	Y+17, r25	; 0x11
	f32 L_f32MaxCompare;
	f32 L_f32OverFlowCount;
	u32 L_u32Carry;
	u8 L_u8Offset;

	G_u8Check = 0;
    16ee:	10 92 35 02 	sts	0x0235, r1

	MTIMER_voidTimer2OVFInit();
    16f2:	0e 94 41 0b 	call	0x1682	; 0x1682 <MTIMER_voidTimer2OVFInit>
		L_f32MaxCompare = L_f32MaxCompare * 256 * 64;
#elif 	CLK == ONETWENTYEIGHT
		L_f32MaxCompare = (1000000.0) / F_CPU;
		L_f32MaxCompare = L_f32MaxCompare * 256 * 128;
#elif 	CLK == TWOFIFTYSIX
		L_f32MaxCompare = (1000000.0) / F_CPU;
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	a0 e0       	ldi	r26, 0x00	; 0
    16fc:	be e3       	ldi	r27, 0x3E	; 62
    16fe:	8a 87       	std	Y+10, r24	; 0x0a
    1700:	9b 87       	std	Y+11, r25	; 0x0b
    1702:	ac 87       	std	Y+12, r26	; 0x0c
    1704:	bd 87       	std	Y+13, r27	; 0x0d
		L_f32MaxCompare = L_f32MaxCompare * 256 * 256;
    1706:	6a 85       	ldd	r22, Y+10	; 0x0a
    1708:	7b 85       	ldd	r23, Y+11	; 0x0b
    170a:	8c 85       	ldd	r24, Y+12	; 0x0c
    170c:	9d 85       	ldd	r25, Y+13	; 0x0d
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	40 e8       	ldi	r20, 0x80	; 128
    1714:	53 e4       	ldi	r21, 0x43	; 67
    1716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	bc 01       	movw	r22, r24
    1720:	cd 01       	movw	r24, r26
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	40 e8       	ldi	r20, 0x80	; 128
    1728:	53 e4       	ldi	r21, 0x43	; 67
    172a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	8a 87       	std	Y+10, r24	; 0x0a
    1734:	9b 87       	std	Y+11, r25	; 0x0b
    1736:	ac 87       	std	Y+12, r26	; 0x0c
    1738:	bd 87       	std	Y+13, r27	; 0x0d
		L_f32MaxCompare = L_f32MaxCompare * 256 * 1024;

#endif


	if (copy_u32Delay_ms * 1000  <= L_f32MaxCompare)
    173a:	8e 85       	ldd	r24, Y+14	; 0x0e
    173c:	9f 85       	ldd	r25, Y+15	; 0x0f
    173e:	a8 89       	ldd	r26, Y+16	; 0x10
    1740:	b9 89       	ldd	r27, Y+17	; 0x11
    1742:	28 ee       	ldi	r18, 0xE8	; 232
    1744:	33 e0       	ldi	r19, 0x03	; 3
    1746:	40 e0       	ldi	r20, 0x00	; 0
    1748:	50 e0       	ldi	r21, 0x00	; 0
    174a:	bc 01       	movw	r22, r24
    174c:	cd 01       	movw	r24, r26
    174e:	0e 94 c9 1b 	call	0x3792	; 0x3792 <__mulsi3>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	bc 01       	movw	r22, r24
    1758:	cd 01       	movw	r24, r26
    175a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	bc 01       	movw	r22, r24
    1764:	cd 01       	movw	r24, r26
    1766:	2a 85       	ldd	r18, Y+10	; 0x0a
    1768:	3b 85       	ldd	r19, Y+11	; 0x0b
    176a:	4c 85       	ldd	r20, Y+12	; 0x0c
    176c:	5d 85       	ldd	r21, Y+13	; 0x0d
    176e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    1772:	18 16       	cp	r1, r24
    1774:	0c f4       	brge	.+2      	; 0x1778 <MTIMER_voidTimer2OVFDelay+0xae>
    1776:	49 c0       	rjmp	.+146    	; 0x180a <MTIMER_voidTimer2OVFDelay+0x140>
		{
			L_f32OverFlowCount = (copy_u32Delay_ms / (L_f32MaxCompare/1000.0));
    1778:	6e 85       	ldd	r22, Y+14	; 0x0e
    177a:	7f 85       	ldd	r23, Y+15	; 0x0f
    177c:	88 89       	ldd	r24, Y+16	; 0x10
    177e:	99 89       	ldd	r25, Y+17	; 0x11
    1780:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1784:	7b 01       	movw	r14, r22
    1786:	8c 01       	movw	r16, r24
    1788:	6a 85       	ldd	r22, Y+10	; 0x0a
    178a:	7b 85       	ldd	r23, Y+11	; 0x0b
    178c:	8c 85       	ldd	r24, Y+12	; 0x0c
    178e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	4a e7       	ldi	r20, 0x7A	; 122
    1796:	54 e4       	ldi	r21, 0x44	; 68
    1798:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	9c 01       	movw	r18, r24
    17a2:	ad 01       	movw	r20, r26
    17a4:	c8 01       	movw	r24, r16
    17a6:	b7 01       	movw	r22, r14
    17a8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	8e 83       	std	Y+6, r24	; 0x06
    17b2:	9f 83       	std	Y+7, r25	; 0x07
    17b4:	a8 87       	std	Y+8, r26	; 0x08
    17b6:	b9 87       	std	Y+9, r27	; 0x09
			L_u8Offset = L_f32OverFlowCount * 256.0;
    17b8:	6e 81       	ldd	r22, Y+6	; 0x06
    17ba:	7f 81       	ldd	r23, Y+7	; 0x07
    17bc:	88 85       	ldd	r24, Y+8	; 0x08
    17be:	99 85       	ldd	r25, Y+9	; 0x09
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	40 e8       	ldi	r20, 0x80	; 128
    17c6:	53 e4       	ldi	r21, 0x43	; 67
    17c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	bc 01       	movw	r22, r24
    17d2:	cd 01       	movw	r24, r26
    17d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	89 83       	std	Y+1, r24	; 0x01
			G_u32Overflows = 1;
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	a0 e0       	ldi	r26, 0x00	; 0
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	80 93 31 02 	sts	0x0231, r24
    17ea:	90 93 32 02 	sts	0x0232, r25
    17ee:	a0 93 33 02 	sts	0x0233, r26
    17f2:	b0 93 34 02 	sts	0x0234, r27
			G_u8Reg = 256 - L_u8Offset;
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
    17f8:	81 95       	neg	r24
    17fa:	80 93 30 02 	sts	0x0230, r24
			TCNT2 = G_u8Reg;
    17fe:	e4 e4       	ldi	r30, 0x44	; 68
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 91 30 02 	lds	r24, 0x0230
    1806:	80 83       	st	Z, r24
    1808:	7f c0       	rjmp	.+254    	; 0x1908 <MTIMER_voidTimer2OVFDelay+0x23e>
		}
	else
	{
		L_f32OverFlowCount = (copy_u32Delay_ms / (L_f32MaxCompare/1000.0));
    180a:	6e 85       	ldd	r22, Y+14	; 0x0e
    180c:	7f 85       	ldd	r23, Y+15	; 0x0f
    180e:	88 89       	ldd	r24, Y+16	; 0x10
    1810:	99 89       	ldd	r25, Y+17	; 0x11
    1812:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1816:	7b 01       	movw	r14, r22
    1818:	8c 01       	movw	r16, r24
    181a:	6a 85       	ldd	r22, Y+10	; 0x0a
    181c:	7b 85       	ldd	r23, Y+11	; 0x0b
    181e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1820:	9d 85       	ldd	r25, Y+13	; 0x0d
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	4a e7       	ldi	r20, 0x7A	; 122
    1828:	54 e4       	ldi	r21, 0x44	; 68
    182a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	9c 01       	movw	r18, r24
    1834:	ad 01       	movw	r20, r26
    1836:	c8 01       	movw	r24, r16
    1838:	b7 01       	movw	r22, r14
    183a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	8e 83       	std	Y+6, r24	; 0x06
    1844:	9f 83       	std	Y+7, r25	; 0x07
    1846:	a8 87       	std	Y+8, r26	; 0x08
    1848:	b9 87       	std	Y+9, r27	; 0x09
		L_u32Carry = (copy_u32Delay_ms / (L_f32MaxCompare/1000));
    184a:	6e 85       	ldd	r22, Y+14	; 0x0e
    184c:	7f 85       	ldd	r23, Y+15	; 0x0f
    184e:	88 89       	ldd	r24, Y+16	; 0x10
    1850:	99 89       	ldd	r25, Y+17	; 0x11
    1852:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1856:	7b 01       	movw	r14, r22
    1858:	8c 01       	movw	r16, r24
    185a:	6a 85       	ldd	r22, Y+10	; 0x0a
    185c:	7b 85       	ldd	r23, Y+11	; 0x0b
    185e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1860:	9d 85       	ldd	r25, Y+13	; 0x0d
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	4a e7       	ldi	r20, 0x7A	; 122
    1868:	54 e4       	ldi	r21, 0x44	; 68
    186a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	9c 01       	movw	r18, r24
    1874:	ad 01       	movw	r20, r26
    1876:	c8 01       	movw	r24, r16
    1878:	b7 01       	movw	r22, r14
    187a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	bc 01       	movw	r22, r24
    1884:	cd 01       	movw	r24, r26
    1886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	8a 83       	std	Y+2, r24	; 0x02
    1890:	9b 83       	std	Y+3, r25	; 0x03
    1892:	ac 83       	std	Y+4, r26	; 0x04
    1894:	bd 83       	std	Y+5, r27	; 0x05

		L_u8Offset = (L_f32OverFlowCount - L_u32Carry) * 256.0;
    1896:	6a 81       	ldd	r22, Y+2	; 0x02
    1898:	7b 81       	ldd	r23, Y+3	; 0x03
    189a:	8c 81       	ldd	r24, Y+4	; 0x04
    189c:	9d 81       	ldd	r25, Y+5	; 0x05
    189e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    18a2:	9b 01       	movw	r18, r22
    18a4:	ac 01       	movw	r20, r24
    18a6:	6e 81       	ldd	r22, Y+6	; 0x06
    18a8:	7f 81       	ldd	r23, Y+7	; 0x07
    18aa:	88 85       	ldd	r24, Y+8	; 0x08
    18ac:	99 85       	ldd	r25, Y+9	; 0x09
    18ae:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	bc 01       	movw	r22, r24
    18b8:	cd 01       	movw	r24, r26
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e8       	ldi	r20, 0x80	; 128
    18c0:	53 e4       	ldi	r21, 0x43	; 67
    18c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	bc 01       	movw	r22, r24
    18cc:	cd 01       	movw	r24, r26
    18ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	89 83       	std	Y+1, r24	; 0x01
		G_u32Overflows = L_u32Carry +1 ;
    18d8:	8a 81       	ldd	r24, Y+2	; 0x02
    18da:	9b 81       	ldd	r25, Y+3	; 0x03
    18dc:	ac 81       	ldd	r26, Y+4	; 0x04
    18de:	bd 81       	ldd	r27, Y+5	; 0x05
    18e0:	01 96       	adiw	r24, 0x01	; 1
    18e2:	a1 1d       	adc	r26, r1
    18e4:	b1 1d       	adc	r27, r1
    18e6:	80 93 31 02 	sts	0x0231, r24
    18ea:	90 93 32 02 	sts	0x0232, r25
    18ee:	a0 93 33 02 	sts	0x0233, r26
    18f2:	b0 93 34 02 	sts	0x0234, r27
		G_u8Reg = 256 - L_u8Offset;
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	81 95       	neg	r24
    18fa:	80 93 30 02 	sts	0x0230, r24
		TCNT2 = G_u8Reg;
    18fe:	e4 e4       	ldi	r30, 0x44	; 68
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 91 30 02 	lds	r24, 0x0230
    1906:	80 83       	st	Z, r24

	}

	while (GET_BIT(TIFR, TOV2) == 0 && G_u8Check == 0);
    1908:	e8 e5       	ldi	r30, 0x58	; 88
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	82 95       	swap	r24
    1910:	86 95       	lsr	r24
    1912:	86 95       	lsr	r24
    1914:	83 70       	andi	r24, 0x03	; 3
    1916:	88 2f       	mov	r24, r24
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	81 70       	andi	r24, 0x01	; 1
    191c:	90 70       	andi	r25, 0x00	; 0
    191e:	00 97       	sbiw	r24, 0x00	; 0
    1920:	21 f4       	brne	.+8      	; 0x192a <MTIMER_voidTimer2OVFDelay+0x260>
    1922:	80 91 35 02 	lds	r24, 0x0235
    1926:	88 23       	and	r24, r24
    1928:	79 f3       	breq	.-34     	; 0x1908 <MTIMER_voidTimer2OVFDelay+0x23e>
}
    192a:	61 96       	adiw	r28, 0x11	; 17
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	de bf       	out	0x3e, r29	; 62
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	cd bf       	out	0x3d, r28	; 61
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	1f 91       	pop	r17
    193c:	0f 91       	pop	r16
    193e:	ff 90       	pop	r15
    1940:	ef 90       	pop	r14
    1942:	08 95       	ret

00001944 <MTIMER_voidTimer2OVFSetCallBack>:

void MTIMER_voidTimer2OVFSetCallBack ( void (*copy_PFvoidTimer2OVF) (void))
{
    1944:	df 93       	push	r29
    1946:	cf 93       	push	r28
    1948:	00 d0       	rcall	.+0      	; 0x194a <MTIMER_voidTimer2OVFSetCallBack+0x6>
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	9a 83       	std	Y+2, r25	; 0x02
    1950:	89 83       	std	Y+1, r24	; 0x01
	TIMER_PFTIMER2OVF = copy_PFvoidTimer2OVF ;
    1952:	89 81       	ldd	r24, Y+1	; 0x01
    1954:	9a 81       	ldd	r25, Y+2	; 0x02
    1956:	90 93 1d 02 	sts	0x021D, r25
    195a:	80 93 1c 02 	sts	0x021C, r24
}
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	cf 91       	pop	r28
    1964:	df 91       	pop	r29
    1966:	08 95       	ret

00001968 <MTIMER_voidTimer2FPWMInit>:


void MTIMER_voidTimer2FPWMInit()
{
    1968:	df 93       	push	r29
    196a:	cf 93       	push	r28
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE FPWM MODE*/
		SET_BIT(TCCR2, WGM20);
    1970:	a5 e4       	ldi	r26, 0x45	; 69
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	e5 e4       	ldi	r30, 0x45	; 69
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	80 64       	ori	r24, 0x40	; 64
    197c:	8c 93       	st	X, r24
		SET_BIT(TCCR2, WGM21);
    197e:	a5 e4       	ldi	r26, 0x45	; 69
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e5 e4       	ldi	r30, 0x45	; 69
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	88 60       	ori	r24, 0x08	; 8
    198a:	8c 93       	st	X, r24

		CLR_BIT(TCCR2, COM20);
    198c:	a5 e4       	ldi	r26, 0x45	; 69
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e5 e4       	ldi	r30, 0x45	; 69
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	8f 7e       	andi	r24, 0xEF	; 239
    1998:	8c 93       	st	X, r24
		SET_BIT(TCCR2, COM21);
    199a:	a5 e4       	ldi	r26, 0x45	; 69
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e5 e4       	ldi	r30, 0x45	; 69
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	80 62       	ori	r24, 0x20	; 32
    19a6:	8c 93       	st	X, r24
		TCCR2 |= (1<<2);
		//TCCR2 = (TCCR2 & 0xf8) | 0x04;
#elif 	CLK == ONETWENTYEIGHT
		TCCR2 = (TCCR2 & 0xf8) | 0x05;
#elif 	CLK == TWOFIFTYSIX
		TCCR2 = (TCCR2 & 0xf8) | 0x06;
    19a8:	a5 e4       	ldi	r26, 0x45	; 69
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e5 e4       	ldi	r30, 0x45	; 69
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	88 7f       	andi	r24, 0xF8	; 248
    19b4:	86 60       	ori	r24, 0x06	; 6
    19b6:	8c 93       	st	X, r24
#elif 	CLK == TENTWENTYFOUR
		TCCR2 = (TCCR2 & 0xf8) | 0x07;
#endif
}
    19b8:	cf 91       	pop	r28
    19ba:	df 91       	pop	r29
    19bc:	08 95       	ret

000019be <MTIMER_voidTimer2FPWMWrite>:


void MTIMER_voidTimer2FPWMWrite(u8 copy_u8Value)
{
    19be:	df 93       	push	r29
    19c0:	cf 93       	push	r28
    19c2:	0f 92       	push	r0
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
    19c8:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = copy_u8Value;
    19ca:	e3 e4       	ldi	r30, 0x43	; 67
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	80 83       	st	Z, r24
}
    19d2:	0f 90       	pop	r0
    19d4:	cf 91       	pop	r28
    19d6:	df 91       	pop	r29
    19d8:	08 95       	ret

000019da <__vector_5>:




ISR (TIMER2_OVF_vect)
{
    19da:	1f 92       	push	r1
    19dc:	0f 92       	push	r0
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	0f 92       	push	r0
    19e2:	11 24       	eor	r1, r1
    19e4:	2f 93       	push	r18
    19e6:	3f 93       	push	r19
    19e8:	4f 93       	push	r20
    19ea:	5f 93       	push	r21
    19ec:	6f 93       	push	r22
    19ee:	7f 93       	push	r23
    19f0:	8f 93       	push	r24
    19f2:	9f 93       	push	r25
    19f4:	af 93       	push	r26
    19f6:	bf 93       	push	r27
    19f8:	ef 93       	push	r30
    19fa:	ff 93       	push	r31
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
	static u32 L_u32OVFCounter = 0 ;
	L_u32OVFCounter ++ ;
    1a04:	80 91 28 02 	lds	r24, 0x0228
    1a08:	90 91 29 02 	lds	r25, 0x0229
    1a0c:	a0 91 2a 02 	lds	r26, 0x022A
    1a10:	b0 91 2b 02 	lds	r27, 0x022B
    1a14:	01 96       	adiw	r24, 0x01	; 1
    1a16:	a1 1d       	adc	r26, r1
    1a18:	b1 1d       	adc	r27, r1
    1a1a:	80 93 28 02 	sts	0x0228, r24
    1a1e:	90 93 29 02 	sts	0x0229, r25
    1a22:	a0 93 2a 02 	sts	0x022A, r26
    1a26:	b0 93 2b 02 	sts	0x022B, r27
	if (L_u32OVFCounter == G_u32Overflows)
    1a2a:	20 91 28 02 	lds	r18, 0x0228
    1a2e:	30 91 29 02 	lds	r19, 0x0229
    1a32:	40 91 2a 02 	lds	r20, 0x022A
    1a36:	50 91 2b 02 	lds	r21, 0x022B
    1a3a:	80 91 31 02 	lds	r24, 0x0231
    1a3e:	90 91 32 02 	lds	r25, 0x0232
    1a42:	a0 91 33 02 	lds	r26, 0x0233
    1a46:	b0 91 34 02 	lds	r27, 0x0234
    1a4a:	28 17       	cp	r18, r24
    1a4c:	39 07       	cpc	r19, r25
    1a4e:	4a 07       	cpc	r20, r26
    1a50:	5b 07       	cpc	r21, r27
    1a52:	d9 f4       	brne	.+54     	; 0x1a8a <__vector_5+0xb0>
	{
		L_u32OVFCounter = 0 ;
    1a54:	10 92 28 02 	sts	0x0228, r1
    1a58:	10 92 29 02 	sts	0x0229, r1
    1a5c:	10 92 2a 02 	sts	0x022A, r1
    1a60:	10 92 2b 02 	sts	0x022B, r1
		TCNT2 = G_u8Reg;
    1a64:	e4 e4       	ldi	r30, 0x44	; 68
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 91 30 02 	lds	r24, 0x0230
    1a6c:	80 83       	st	Z, r24
		if ( TIMER_PFTIMER2OVF != NULL )
    1a6e:	80 91 1c 02 	lds	r24, 0x021C
    1a72:	90 91 1d 02 	lds	r25, 0x021D
    1a76:	00 97       	sbiw	r24, 0x00	; 0
    1a78:	29 f0       	breq	.+10     	; 0x1a84 <__vector_5+0xaa>
			TIMER_PFTIMER2OVF() ;
    1a7a:	e0 91 1c 02 	lds	r30, 0x021C
    1a7e:	f0 91 1d 02 	lds	r31, 0x021D
    1a82:	09 95       	icall
		G_u8Check = 1;
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	80 93 35 02 	sts	0x0235, r24
	}
}
    1a8a:	cf 91       	pop	r28
    1a8c:	df 91       	pop	r29
    1a8e:	ff 91       	pop	r31
    1a90:	ef 91       	pop	r30
    1a92:	bf 91       	pop	r27
    1a94:	af 91       	pop	r26
    1a96:	9f 91       	pop	r25
    1a98:	8f 91       	pop	r24
    1a9a:	7f 91       	pop	r23
    1a9c:	6f 91       	pop	r22
    1a9e:	5f 91       	pop	r21
    1aa0:	4f 91       	pop	r20
    1aa2:	3f 91       	pop	r19
    1aa4:	2f 91       	pop	r18
    1aa6:	0f 90       	pop	r0
    1aa8:	0f be       	out	0x3f, r0	; 63
    1aaa:	0f 90       	pop	r0
    1aac:	1f 90       	pop	r1
    1aae:	18 95       	reti

00001ab0 <__vector_4>:


ISR (TIMER2_COMP_vect)
{
    1ab0:	1f 92       	push	r1
    1ab2:	0f 92       	push	r0
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	0f 92       	push	r0
    1ab8:	11 24       	eor	r1, r1
    1aba:	2f 93       	push	r18
    1abc:	3f 93       	push	r19
    1abe:	4f 93       	push	r20
    1ac0:	5f 93       	push	r21
    1ac2:	6f 93       	push	r22
    1ac4:	7f 93       	push	r23
    1ac6:	8f 93       	push	r24
    1ac8:	9f 93       	push	r25
    1aca:	af 93       	push	r26
    1acc:	bf 93       	push	r27
    1ace:	ef 93       	push	r30
    1ad0:	ff 93       	push	r31
    1ad2:	df 93       	push	r29
    1ad4:	cf 93       	push	r28
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
	static u32 G_u32CompCounter = 0;
	G_u32CompCounter ++ ;
    1ada:	80 91 2c 02 	lds	r24, 0x022C
    1ade:	90 91 2d 02 	lds	r25, 0x022D
    1ae2:	a0 91 2e 02 	lds	r26, 0x022E
    1ae6:	b0 91 2f 02 	lds	r27, 0x022F
    1aea:	01 96       	adiw	r24, 0x01	; 1
    1aec:	a1 1d       	adc	r26, r1
    1aee:	b1 1d       	adc	r27, r1
    1af0:	80 93 2c 02 	sts	0x022C, r24
    1af4:	90 93 2d 02 	sts	0x022D, r25
    1af8:	a0 93 2e 02 	sts	0x022E, r26
    1afc:	b0 93 2f 02 	sts	0x022F, r27
	if( G_u32CompCounter == G_u32Overflows )
    1b00:	20 91 2c 02 	lds	r18, 0x022C
    1b04:	30 91 2d 02 	lds	r19, 0x022D
    1b08:	40 91 2e 02 	lds	r20, 0x022E
    1b0c:	50 91 2f 02 	lds	r21, 0x022F
    1b10:	80 91 31 02 	lds	r24, 0x0231
    1b14:	90 91 32 02 	lds	r25, 0x0232
    1b18:	a0 91 33 02 	lds	r26, 0x0233
    1b1c:	b0 91 34 02 	lds	r27, 0x0234
    1b20:	28 17       	cp	r18, r24
    1b22:	39 07       	cpc	r19, r25
    1b24:	4a 07       	cpc	r20, r26
    1b26:	5b 07       	cpc	r21, r27
    1b28:	b9 f4       	brne	.+46     	; 0x1b58 <__vector_4+0xa8>
	{
		if(TIMER_PFTIMER2COMP != NULL)
    1b2a:	80 91 1e 02 	lds	r24, 0x021E
    1b2e:	90 91 1f 02 	lds	r25, 0x021F
    1b32:	00 97       	sbiw	r24, 0x00	; 0
    1b34:	29 f0       	breq	.+10     	; 0x1b40 <__vector_4+0x90>
			TIMER_PFTIMER2COMP() ;
    1b36:	e0 91 1e 02 	lds	r30, 0x021E
    1b3a:	f0 91 1f 02 	lds	r31, 0x021F
    1b3e:	09 95       	icall
		G_u32CompCounter = 0 ;
    1b40:	10 92 2c 02 	sts	0x022C, r1
    1b44:	10 92 2d 02 	sts	0x022D, r1
    1b48:	10 92 2e 02 	sts	0x022E, r1
    1b4c:	10 92 2f 02 	sts	0x022F, r1
		G_u8Check = 1;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	80 93 35 02 	sts	0x0235, r24
    1b56:	3a c0       	rjmp	.+116    	; 0x1bcc <__vector_4+0x11c>
	}
	else if(G_u32CompCounter == G_u32Overflows - 1)
    1b58:	80 91 31 02 	lds	r24, 0x0231
    1b5c:	90 91 32 02 	lds	r25, 0x0232
    1b60:	a0 91 33 02 	lds	r26, 0x0233
    1b64:	b0 91 34 02 	lds	r27, 0x0234
    1b68:	9c 01       	movw	r18, r24
    1b6a:	ad 01       	movw	r20, r26
    1b6c:	21 50       	subi	r18, 0x01	; 1
    1b6e:	30 40       	sbci	r19, 0x00	; 0
    1b70:	40 40       	sbci	r20, 0x00	; 0
    1b72:	50 40       	sbci	r21, 0x00	; 0
    1b74:	80 91 2c 02 	lds	r24, 0x022C
    1b78:	90 91 2d 02 	lds	r25, 0x022D
    1b7c:	a0 91 2e 02 	lds	r26, 0x022E
    1b80:	b0 91 2f 02 	lds	r27, 0x022F
    1b84:	28 17       	cp	r18, r24
    1b86:	39 07       	cpc	r19, r25
    1b88:	4a 07       	cpc	r20, r26
    1b8a:	5b 07       	cpc	r21, r27
    1b8c:	31 f4       	brne	.+12     	; 0x1b9a <__vector_4+0xea>
	{
		OCR2 = G_u8Reg;
    1b8e:	e3 e4       	ldi	r30, 0x43	; 67
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 91 30 02 	lds	r24, 0x0230
    1b96:	80 83       	st	Z, r24
    1b98:	19 c0       	rjmp	.+50     	; 0x1bcc <__vector_4+0x11c>
	}
	else if (G_u32CompCounter != G_u32Overflows)
    1b9a:	20 91 2c 02 	lds	r18, 0x022C
    1b9e:	30 91 2d 02 	lds	r19, 0x022D
    1ba2:	40 91 2e 02 	lds	r20, 0x022E
    1ba6:	50 91 2f 02 	lds	r21, 0x022F
    1baa:	80 91 31 02 	lds	r24, 0x0231
    1bae:	90 91 32 02 	lds	r25, 0x0232
    1bb2:	a0 91 33 02 	lds	r26, 0x0233
    1bb6:	b0 91 34 02 	lds	r27, 0x0234
    1bba:	28 17       	cp	r18, r24
    1bbc:	39 07       	cpc	r19, r25
    1bbe:	4a 07       	cpc	r20, r26
    1bc0:	5b 07       	cpc	r21, r27
    1bc2:	21 f0       	breq	.+8      	; 0x1bcc <__vector_4+0x11c>
	{
		OCR2 = 255;
    1bc4:	e3 e4       	ldi	r30, 0x43	; 67
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	8f ef       	ldi	r24, 0xFF	; 255
    1bca:	80 83       	st	Z, r24
	}

}
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	ff 91       	pop	r31
    1bd2:	ef 91       	pop	r30
    1bd4:	bf 91       	pop	r27
    1bd6:	af 91       	pop	r26
    1bd8:	9f 91       	pop	r25
    1bda:	8f 91       	pop	r24
    1bdc:	7f 91       	pop	r23
    1bde:	6f 91       	pop	r22
    1be0:	5f 91       	pop	r21
    1be2:	4f 91       	pop	r20
    1be4:	3f 91       	pop	r19
    1be6:	2f 91       	pop	r18
    1be8:	0f 90       	pop	r0
    1bea:	0f be       	out	0x3f, r0	; 63
    1bec:	0f 90       	pop	r0
    1bee:	1f 90       	pop	r1
    1bf0:	18 95       	reti

00001bf2 <DIO_voidSetPinDirection>:
#include"../../LIB/STD_TYPES.h"
#include"../../LIB/BIT_MATH.h"
#include<avr/io.h>
#include"DIO_Interface.h"

void DIO_voidSetPinDirection(u8 copy_u8port, u8 copy_u8pin, u8 copy_u8Direction){
    1bf2:	df 93       	push	r29
    1bf4:	cf 93       	push	r28
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
    1bfa:	27 97       	sbiw	r28, 0x07	; 7
    1bfc:	0f b6       	in	r0, 0x3f	; 63
    1bfe:	f8 94       	cli
    1c00:	de bf       	out	0x3e, r29	; 62
    1c02:	0f be       	out	0x3f, r0	; 63
    1c04:	cd bf       	out	0x3d, r28	; 61
    1c06:	89 83       	std	Y+1, r24	; 0x01
    1c08:	6a 83       	std	Y+2, r22	; 0x02
    1c0a:	4b 83       	std	Y+3, r20	; 0x03
	
	if (copy_u8Direction == 0 ){
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	88 23       	and	r24, r24
    1c10:	09 f0       	breq	.+2      	; 0x1c14 <DIO_voidSetPinDirection+0x22>
    1c12:	74 c0       	rjmp	.+232    	; 0x1cfc <DIO_voidSetPinDirection+0x10a>
		switch (copy_u8port){
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	3f 83       	std	Y+7, r19	; 0x07
    1c1c:	2e 83       	std	Y+6, r18	; 0x06
    1c1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c20:	9f 81       	ldd	r25, Y+7	; 0x07
    1c22:	81 30       	cpi	r24, 0x01	; 1
    1c24:	91 05       	cpc	r25, r1
    1c26:	59 f1       	breq	.+86     	; 0x1c7e <DIO_voidSetPinDirection+0x8c>
    1c28:	2e 81       	ldd	r18, Y+6	; 0x06
    1c2a:	3f 81       	ldd	r19, Y+7	; 0x07
    1c2c:	22 30       	cpi	r18, 0x02	; 2
    1c2e:	31 05       	cpc	r19, r1
    1c30:	2c f4       	brge	.+10     	; 0x1c3c <DIO_voidSetPinDirection+0x4a>
    1c32:	8e 81       	ldd	r24, Y+6	; 0x06
    1c34:	9f 81       	ldd	r25, Y+7	; 0x07
    1c36:	00 97       	sbiw	r24, 0x00	; 0
    1c38:	69 f0       	breq	.+26     	; 0x1c54 <DIO_voidSetPinDirection+0x62>
    1c3a:	d2 c0       	rjmp	.+420    	; 0x1de0 <DIO_voidSetPinDirection+0x1ee>
    1c3c:	2e 81       	ldd	r18, Y+6	; 0x06
    1c3e:	3f 81       	ldd	r19, Y+7	; 0x07
    1c40:	22 30       	cpi	r18, 0x02	; 2
    1c42:	31 05       	cpc	r19, r1
    1c44:	89 f1       	breq	.+98     	; 0x1ca8 <DIO_voidSetPinDirection+0xb6>
    1c46:	8e 81       	ldd	r24, Y+6	; 0x06
    1c48:	9f 81       	ldd	r25, Y+7	; 0x07
    1c4a:	83 30       	cpi	r24, 0x03	; 3
    1c4c:	91 05       	cpc	r25, r1
    1c4e:	09 f4       	brne	.+2      	; 0x1c52 <DIO_voidSetPinDirection+0x60>
    1c50:	40 c0       	rjmp	.+128    	; 0x1cd2 <DIO_voidSetPinDirection+0xe0>
    1c52:	c6 c0       	rjmp	.+396    	; 0x1de0 <DIO_voidSetPinDirection+0x1ee>
			case 0 : CLR_BIT(DDRA,copy_u8pin); break;
    1c54:	aa e3       	ldi	r26, 0x3A	; 58
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	ea e3       	ldi	r30, 0x3A	; 58
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	48 2f       	mov	r20, r24
    1c60:	8a 81       	ldd	r24, Y+2	; 0x02
    1c62:	28 2f       	mov	r18, r24
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	02 2e       	mov	r0, r18
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <DIO_voidSetPinDirection+0x80>
    1c6e:	88 0f       	add	r24, r24
    1c70:	99 1f       	adc	r25, r25
    1c72:	0a 94       	dec	r0
    1c74:	e2 f7       	brpl	.-8      	; 0x1c6e <DIO_voidSetPinDirection+0x7c>
    1c76:	80 95       	com	r24
    1c78:	84 23       	and	r24, r20
    1c7a:	8c 93       	st	X, r24
    1c7c:	b1 c0       	rjmp	.+354    	; 0x1de0 <DIO_voidSetPinDirection+0x1ee>
			case 1 : CLR_BIT(DDRB,copy_u8pin); break;
    1c7e:	a7 e3       	ldi	r26, 0x37	; 55
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	e7 e3       	ldi	r30, 0x37	; 55
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	48 2f       	mov	r20, r24
    1c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	02 2e       	mov	r0, r18
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <DIO_voidSetPinDirection+0xaa>
    1c98:	88 0f       	add	r24, r24
    1c9a:	99 1f       	adc	r25, r25
    1c9c:	0a 94       	dec	r0
    1c9e:	e2 f7       	brpl	.-8      	; 0x1c98 <DIO_voidSetPinDirection+0xa6>
    1ca0:	80 95       	com	r24
    1ca2:	84 23       	and	r24, r20
    1ca4:	8c 93       	st	X, r24
    1ca6:	9c c0       	rjmp	.+312    	; 0x1de0 <DIO_voidSetPinDirection+0x1ee>
			case 2 : CLR_BIT(DDRC,copy_u8pin); break;
    1ca8:	a4 e3       	ldi	r26, 0x34	; 52
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	e4 e3       	ldi	r30, 0x34	; 52
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	48 2f       	mov	r20, r24
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	28 2f       	mov	r18, r24
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	02 2e       	mov	r0, r18
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <DIO_voidSetPinDirection+0xd4>
    1cc2:	88 0f       	add	r24, r24
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	0a 94       	dec	r0
    1cc8:	e2 f7       	brpl	.-8      	; 0x1cc2 <DIO_voidSetPinDirection+0xd0>
    1cca:	80 95       	com	r24
    1ccc:	84 23       	and	r24, r20
    1cce:	8c 93       	st	X, r24
    1cd0:	87 c0       	rjmp	.+270    	; 0x1de0 <DIO_voidSetPinDirection+0x1ee>
			case 3 : CLR_BIT(DDRD,copy_u8pin); break;
    1cd2:	a1 e3       	ldi	r26, 0x31	; 49
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	e1 e3       	ldi	r30, 0x31	; 49
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	48 2f       	mov	r20, r24
    1cde:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce0:	28 2f       	mov	r18, r24
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	02 2e       	mov	r0, r18
    1cea:	02 c0       	rjmp	.+4      	; 0x1cf0 <DIO_voidSetPinDirection+0xfe>
    1cec:	88 0f       	add	r24, r24
    1cee:	99 1f       	adc	r25, r25
    1cf0:	0a 94       	dec	r0
    1cf2:	e2 f7       	brpl	.-8      	; 0x1cec <DIO_voidSetPinDirection+0xfa>
    1cf4:	80 95       	com	r24
    1cf6:	84 23       	and	r24, r20
    1cf8:	8c 93       	st	X, r24
    1cfa:	72 c0       	rjmp	.+228    	; 0x1de0 <DIO_voidSetPinDirection+0x1ee>
		}
	}
		
	else if (copy_u8Direction == 1 ){
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	81 30       	cpi	r24, 0x01	; 1
    1d00:	09 f0       	breq	.+2      	; 0x1d04 <DIO_voidSetPinDirection+0x112>
    1d02:	6e c0       	rjmp	.+220    	; 0x1de0 <DIO_voidSetPinDirection+0x1ee>
		switch (copy_u8port){
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	3d 83       	std	Y+5, r19	; 0x05
    1d0c:	2c 83       	std	Y+4, r18	; 0x04
    1d0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d10:	9d 81       	ldd	r25, Y+5	; 0x05
    1d12:	81 30       	cpi	r24, 0x01	; 1
    1d14:	91 05       	cpc	r25, r1
    1d16:	49 f1       	breq	.+82     	; 0x1d6a <DIO_voidSetPinDirection+0x178>
    1d18:	2c 81       	ldd	r18, Y+4	; 0x04
    1d1a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d1c:	22 30       	cpi	r18, 0x02	; 2
    1d1e:	31 05       	cpc	r19, r1
    1d20:	2c f4       	brge	.+10     	; 0x1d2c <DIO_voidSetPinDirection+0x13a>
    1d22:	8c 81       	ldd	r24, Y+4	; 0x04
    1d24:	9d 81       	ldd	r25, Y+5	; 0x05
    1d26:	00 97       	sbiw	r24, 0x00	; 0
    1d28:	61 f0       	breq	.+24     	; 0x1d42 <DIO_voidSetPinDirection+0x150>
    1d2a:	5a c0       	rjmp	.+180    	; 0x1de0 <DIO_voidSetPinDirection+0x1ee>
    1d2c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d2e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d30:	22 30       	cpi	r18, 0x02	; 2
    1d32:	31 05       	cpc	r19, r1
    1d34:	71 f1       	breq	.+92     	; 0x1d92 <DIO_voidSetPinDirection+0x1a0>
    1d36:	8c 81       	ldd	r24, Y+4	; 0x04
    1d38:	9d 81       	ldd	r25, Y+5	; 0x05
    1d3a:	83 30       	cpi	r24, 0x03	; 3
    1d3c:	91 05       	cpc	r25, r1
    1d3e:	e9 f1       	breq	.+122    	; 0x1dba <DIO_voidSetPinDirection+0x1c8>
    1d40:	4f c0       	rjmp	.+158    	; 0x1de0 <DIO_voidSetPinDirection+0x1ee>
			case 0 : SET_BIT(DDRA,copy_u8pin); break;
    1d42:	aa e3       	ldi	r26, 0x3A	; 58
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	ea e3       	ldi	r30, 0x3A	; 58
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	48 2f       	mov	r20, r24
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	28 2f       	mov	r18, r24
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	02 2e       	mov	r0, r18
    1d5a:	02 c0       	rjmp	.+4      	; 0x1d60 <DIO_voidSetPinDirection+0x16e>
    1d5c:	88 0f       	add	r24, r24
    1d5e:	99 1f       	adc	r25, r25
    1d60:	0a 94       	dec	r0
    1d62:	e2 f7       	brpl	.-8      	; 0x1d5c <DIO_voidSetPinDirection+0x16a>
    1d64:	84 2b       	or	r24, r20
    1d66:	8c 93       	st	X, r24
    1d68:	3b c0       	rjmp	.+118    	; 0x1de0 <DIO_voidSetPinDirection+0x1ee>
			case 1 : SET_BIT(DDRB,copy_u8pin); break;
    1d6a:	a7 e3       	ldi	r26, 0x37	; 55
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	e7 e3       	ldi	r30, 0x37	; 55
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	48 2f       	mov	r20, r24
    1d76:	8a 81       	ldd	r24, Y+2	; 0x02
    1d78:	28 2f       	mov	r18, r24
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	02 2e       	mov	r0, r18
    1d82:	02 c0       	rjmp	.+4      	; 0x1d88 <DIO_voidSetPinDirection+0x196>
    1d84:	88 0f       	add	r24, r24
    1d86:	99 1f       	adc	r25, r25
    1d88:	0a 94       	dec	r0
    1d8a:	e2 f7       	brpl	.-8      	; 0x1d84 <DIO_voidSetPinDirection+0x192>
    1d8c:	84 2b       	or	r24, r20
    1d8e:	8c 93       	st	X, r24
    1d90:	27 c0       	rjmp	.+78     	; 0x1de0 <DIO_voidSetPinDirection+0x1ee>
			case 2 : SET_BIT(DDRC,copy_u8pin); break;
    1d92:	a4 e3       	ldi	r26, 0x34	; 52
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	e4 e3       	ldi	r30, 0x34	; 52
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	48 2f       	mov	r20, r24
    1d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1da0:	28 2f       	mov	r18, r24
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	02 2e       	mov	r0, r18
    1daa:	02 c0       	rjmp	.+4      	; 0x1db0 <DIO_voidSetPinDirection+0x1be>
    1dac:	88 0f       	add	r24, r24
    1dae:	99 1f       	adc	r25, r25
    1db0:	0a 94       	dec	r0
    1db2:	e2 f7       	brpl	.-8      	; 0x1dac <DIO_voidSetPinDirection+0x1ba>
    1db4:	84 2b       	or	r24, r20
    1db6:	8c 93       	st	X, r24
    1db8:	13 c0       	rjmp	.+38     	; 0x1de0 <DIO_voidSetPinDirection+0x1ee>
			case 3 : SET_BIT(DDRD,copy_u8pin); break;
    1dba:	a1 e3       	ldi	r26, 0x31	; 49
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	e1 e3       	ldi	r30, 0x31	; 49
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	48 2f       	mov	r20, r24
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	28 2f       	mov	r18, r24
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	02 2e       	mov	r0, r18
    1dd2:	02 c0       	rjmp	.+4      	; 0x1dd8 <DIO_voidSetPinDirection+0x1e6>
    1dd4:	88 0f       	add	r24, r24
    1dd6:	99 1f       	adc	r25, r25
    1dd8:	0a 94       	dec	r0
    1dda:	e2 f7       	brpl	.-8      	; 0x1dd4 <DIO_voidSetPinDirection+0x1e2>
    1ddc:	84 2b       	or	r24, r20
    1dde:	8c 93       	st	X, r24
		}
	}
		
}
    1de0:	27 96       	adiw	r28, 0x07	; 7
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	f8 94       	cli
    1de6:	de bf       	out	0x3e, r29	; 62
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	cd bf       	out	0x3d, r28	; 61
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	08 95       	ret

00001df2 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 copy_u8port, u8 copy_u8pin, u8 copy_u8Value){
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
    1dfa:	27 97       	sbiw	r28, 0x07	; 7
    1dfc:	0f b6       	in	r0, 0x3f	; 63
    1dfe:	f8 94       	cli
    1e00:	de bf       	out	0x3e, r29	; 62
    1e02:	0f be       	out	0x3f, r0	; 63
    1e04:	cd bf       	out	0x3d, r28	; 61
    1e06:	89 83       	std	Y+1, r24	; 0x01
    1e08:	6a 83       	std	Y+2, r22	; 0x02
    1e0a:	4b 83       	std	Y+3, r20	; 0x03
	
	if (copy_u8Value == 0 ){
    1e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0e:	88 23       	and	r24, r24
    1e10:	09 f0       	breq	.+2      	; 0x1e14 <DIO_voidSetPinValue+0x22>
    1e12:	74 c0       	rjmp	.+232    	; 0x1efc <DIO_voidSetPinValue+0x10a>
		switch (copy_u8port){
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	28 2f       	mov	r18, r24
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	3f 83       	std	Y+7, r19	; 0x07
    1e1c:	2e 83       	std	Y+6, r18	; 0x06
    1e1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e20:	9f 81       	ldd	r25, Y+7	; 0x07
    1e22:	81 30       	cpi	r24, 0x01	; 1
    1e24:	91 05       	cpc	r25, r1
    1e26:	59 f1       	breq	.+86     	; 0x1e7e <DIO_voidSetPinValue+0x8c>
    1e28:	2e 81       	ldd	r18, Y+6	; 0x06
    1e2a:	3f 81       	ldd	r19, Y+7	; 0x07
    1e2c:	22 30       	cpi	r18, 0x02	; 2
    1e2e:	31 05       	cpc	r19, r1
    1e30:	2c f4       	brge	.+10     	; 0x1e3c <DIO_voidSetPinValue+0x4a>
    1e32:	8e 81       	ldd	r24, Y+6	; 0x06
    1e34:	9f 81       	ldd	r25, Y+7	; 0x07
    1e36:	00 97       	sbiw	r24, 0x00	; 0
    1e38:	69 f0       	breq	.+26     	; 0x1e54 <DIO_voidSetPinValue+0x62>
    1e3a:	d2 c0       	rjmp	.+420    	; 0x1fe0 <DIO_voidSetPinValue+0x1ee>
    1e3c:	2e 81       	ldd	r18, Y+6	; 0x06
    1e3e:	3f 81       	ldd	r19, Y+7	; 0x07
    1e40:	22 30       	cpi	r18, 0x02	; 2
    1e42:	31 05       	cpc	r19, r1
    1e44:	89 f1       	breq	.+98     	; 0x1ea8 <DIO_voidSetPinValue+0xb6>
    1e46:	8e 81       	ldd	r24, Y+6	; 0x06
    1e48:	9f 81       	ldd	r25, Y+7	; 0x07
    1e4a:	83 30       	cpi	r24, 0x03	; 3
    1e4c:	91 05       	cpc	r25, r1
    1e4e:	09 f4       	brne	.+2      	; 0x1e52 <DIO_voidSetPinValue+0x60>
    1e50:	40 c0       	rjmp	.+128    	; 0x1ed2 <DIO_voidSetPinValue+0xe0>
    1e52:	c6 c0       	rjmp	.+396    	; 0x1fe0 <DIO_voidSetPinValue+0x1ee>
			case 0 : CLR_BIT(PORTA,copy_u8pin); break;
    1e54:	ab e3       	ldi	r26, 0x3B	; 59
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	eb e3       	ldi	r30, 0x3B	; 59
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	48 2f       	mov	r20, r24
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	28 2f       	mov	r18, r24
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	02 2e       	mov	r0, r18
    1e6c:	02 c0       	rjmp	.+4      	; 0x1e72 <DIO_voidSetPinValue+0x80>
    1e6e:	88 0f       	add	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	0a 94       	dec	r0
    1e74:	e2 f7       	brpl	.-8      	; 0x1e6e <DIO_voidSetPinValue+0x7c>
    1e76:	80 95       	com	r24
    1e78:	84 23       	and	r24, r20
    1e7a:	8c 93       	st	X, r24
    1e7c:	b1 c0       	rjmp	.+354    	; 0x1fe0 <DIO_voidSetPinValue+0x1ee>
			case 1 : CLR_BIT(PORTB,copy_u8pin); break;
    1e7e:	a8 e3       	ldi	r26, 0x38	; 56
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	e8 e3       	ldi	r30, 0x38	; 56
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	48 2f       	mov	r20, r24
    1e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8c:	28 2f       	mov	r18, r24
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	02 2e       	mov	r0, r18
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <DIO_voidSetPinValue+0xaa>
    1e98:	88 0f       	add	r24, r24
    1e9a:	99 1f       	adc	r25, r25
    1e9c:	0a 94       	dec	r0
    1e9e:	e2 f7       	brpl	.-8      	; 0x1e98 <DIO_voidSetPinValue+0xa6>
    1ea0:	80 95       	com	r24
    1ea2:	84 23       	and	r24, r20
    1ea4:	8c 93       	st	X, r24
    1ea6:	9c c0       	rjmp	.+312    	; 0x1fe0 <DIO_voidSetPinValue+0x1ee>
			case 2 : CLR_BIT(PORTC,copy_u8pin); break;
    1ea8:	a5 e3       	ldi	r26, 0x35	; 53
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	e5 e3       	ldi	r30, 0x35	; 53
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	48 2f       	mov	r20, r24
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb6:	28 2f       	mov	r18, r24
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	02 2e       	mov	r0, r18
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <DIO_voidSetPinValue+0xd4>
    1ec2:	88 0f       	add	r24, r24
    1ec4:	99 1f       	adc	r25, r25
    1ec6:	0a 94       	dec	r0
    1ec8:	e2 f7       	brpl	.-8      	; 0x1ec2 <DIO_voidSetPinValue+0xd0>
    1eca:	80 95       	com	r24
    1ecc:	84 23       	and	r24, r20
    1ece:	8c 93       	st	X, r24
    1ed0:	87 c0       	rjmp	.+270    	; 0x1fe0 <DIO_voidSetPinValue+0x1ee>
			case 3 : CLR_BIT(PORTD,copy_u8pin); break;
    1ed2:	a2 e3       	ldi	r26, 0x32	; 50
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	e2 e3       	ldi	r30, 0x32	; 50
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	48 2f       	mov	r20, r24
    1ede:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee0:	28 2f       	mov	r18, r24
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	02 2e       	mov	r0, r18
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <DIO_voidSetPinValue+0xfe>
    1eec:	88 0f       	add	r24, r24
    1eee:	99 1f       	adc	r25, r25
    1ef0:	0a 94       	dec	r0
    1ef2:	e2 f7       	brpl	.-8      	; 0x1eec <DIO_voidSetPinValue+0xfa>
    1ef4:	80 95       	com	r24
    1ef6:	84 23       	and	r24, r20
    1ef8:	8c 93       	st	X, r24
    1efa:	72 c0       	rjmp	.+228    	; 0x1fe0 <DIO_voidSetPinValue+0x1ee>
		}
	}
		
	else if (copy_u8Value == 1 ){
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	81 30       	cpi	r24, 0x01	; 1
    1f00:	09 f0       	breq	.+2      	; 0x1f04 <DIO_voidSetPinValue+0x112>
    1f02:	6e c0       	rjmp	.+220    	; 0x1fe0 <DIO_voidSetPinValue+0x1ee>
		switch (copy_u8port){
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	28 2f       	mov	r18, r24
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	3d 83       	std	Y+5, r19	; 0x05
    1f0c:	2c 83       	std	Y+4, r18	; 0x04
    1f0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f10:	9d 81       	ldd	r25, Y+5	; 0x05
    1f12:	81 30       	cpi	r24, 0x01	; 1
    1f14:	91 05       	cpc	r25, r1
    1f16:	49 f1       	breq	.+82     	; 0x1f6a <DIO_voidSetPinValue+0x178>
    1f18:	2c 81       	ldd	r18, Y+4	; 0x04
    1f1a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f1c:	22 30       	cpi	r18, 0x02	; 2
    1f1e:	31 05       	cpc	r19, r1
    1f20:	2c f4       	brge	.+10     	; 0x1f2c <DIO_voidSetPinValue+0x13a>
    1f22:	8c 81       	ldd	r24, Y+4	; 0x04
    1f24:	9d 81       	ldd	r25, Y+5	; 0x05
    1f26:	00 97       	sbiw	r24, 0x00	; 0
    1f28:	61 f0       	breq	.+24     	; 0x1f42 <DIO_voidSetPinValue+0x150>
    1f2a:	5a c0       	rjmp	.+180    	; 0x1fe0 <DIO_voidSetPinValue+0x1ee>
    1f2c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f2e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f30:	22 30       	cpi	r18, 0x02	; 2
    1f32:	31 05       	cpc	r19, r1
    1f34:	71 f1       	breq	.+92     	; 0x1f92 <DIO_voidSetPinValue+0x1a0>
    1f36:	8c 81       	ldd	r24, Y+4	; 0x04
    1f38:	9d 81       	ldd	r25, Y+5	; 0x05
    1f3a:	83 30       	cpi	r24, 0x03	; 3
    1f3c:	91 05       	cpc	r25, r1
    1f3e:	e9 f1       	breq	.+122    	; 0x1fba <DIO_voidSetPinValue+0x1c8>
    1f40:	4f c0       	rjmp	.+158    	; 0x1fe0 <DIO_voidSetPinValue+0x1ee>
			case 0 : SET_BIT(PORTA,copy_u8pin); break;
    1f42:	ab e3       	ldi	r26, 0x3B	; 59
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	eb e3       	ldi	r30, 0x3B	; 59
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	48 2f       	mov	r20, r24
    1f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f50:	28 2f       	mov	r18, r24
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	02 2e       	mov	r0, r18
    1f5a:	02 c0       	rjmp	.+4      	; 0x1f60 <DIO_voidSetPinValue+0x16e>
    1f5c:	88 0f       	add	r24, r24
    1f5e:	99 1f       	adc	r25, r25
    1f60:	0a 94       	dec	r0
    1f62:	e2 f7       	brpl	.-8      	; 0x1f5c <DIO_voidSetPinValue+0x16a>
    1f64:	84 2b       	or	r24, r20
    1f66:	8c 93       	st	X, r24
    1f68:	3b c0       	rjmp	.+118    	; 0x1fe0 <DIO_voidSetPinValue+0x1ee>
			case 1 : SET_BIT(PORTB,copy_u8pin); break;
    1f6a:	a8 e3       	ldi	r26, 0x38	; 56
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	e8 e3       	ldi	r30, 0x38	; 56
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	48 2f       	mov	r20, r24
    1f76:	8a 81       	ldd	r24, Y+2	; 0x02
    1f78:	28 2f       	mov	r18, r24
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	02 2e       	mov	r0, r18
    1f82:	02 c0       	rjmp	.+4      	; 0x1f88 <DIO_voidSetPinValue+0x196>
    1f84:	88 0f       	add	r24, r24
    1f86:	99 1f       	adc	r25, r25
    1f88:	0a 94       	dec	r0
    1f8a:	e2 f7       	brpl	.-8      	; 0x1f84 <DIO_voidSetPinValue+0x192>
    1f8c:	84 2b       	or	r24, r20
    1f8e:	8c 93       	st	X, r24
    1f90:	27 c0       	rjmp	.+78     	; 0x1fe0 <DIO_voidSetPinValue+0x1ee>
			case 2 : SET_BIT(PORTC,copy_u8pin); break;
    1f92:	a5 e3       	ldi	r26, 0x35	; 53
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	e5 e3       	ldi	r30, 0x35	; 53
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	48 2f       	mov	r20, r24
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	28 2f       	mov	r18, r24
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	02 2e       	mov	r0, r18
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <DIO_voidSetPinValue+0x1be>
    1fac:	88 0f       	add	r24, r24
    1fae:	99 1f       	adc	r25, r25
    1fb0:	0a 94       	dec	r0
    1fb2:	e2 f7       	brpl	.-8      	; 0x1fac <DIO_voidSetPinValue+0x1ba>
    1fb4:	84 2b       	or	r24, r20
    1fb6:	8c 93       	st	X, r24
    1fb8:	13 c0       	rjmp	.+38     	; 0x1fe0 <DIO_voidSetPinValue+0x1ee>
			case 3 : SET_BIT(PORTD,copy_u8pin); break;
    1fba:	a2 e3       	ldi	r26, 0x32	; 50
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	e2 e3       	ldi	r30, 0x32	; 50
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	48 2f       	mov	r20, r24
    1fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc8:	28 2f       	mov	r18, r24
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	02 2e       	mov	r0, r18
    1fd2:	02 c0       	rjmp	.+4      	; 0x1fd8 <DIO_voidSetPinValue+0x1e6>
    1fd4:	88 0f       	add	r24, r24
    1fd6:	99 1f       	adc	r25, r25
    1fd8:	0a 94       	dec	r0
    1fda:	e2 f7       	brpl	.-8      	; 0x1fd4 <DIO_voidSetPinValue+0x1e2>
    1fdc:	84 2b       	or	r24, r20
    1fde:	8c 93       	st	X, r24
		}
	}

}
    1fe0:	27 96       	adiw	r28, 0x07	; 7
    1fe2:	0f b6       	in	r0, 0x3f	; 63
    1fe4:	f8 94       	cli
    1fe6:	de bf       	out	0x3e, r29	; 62
    1fe8:	0f be       	out	0x3f, r0	; 63
    1fea:	cd bf       	out	0x3d, r28	; 61
    1fec:	cf 91       	pop	r28
    1fee:	df 91       	pop	r29
    1ff0:	08 95       	ret

00001ff2 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 copy_u8port, u8 copy_u8pin){
    1ff2:	df 93       	push	r29
    1ff4:	cf 93       	push	r28
    1ff6:	00 d0       	rcall	.+0      	; 0x1ff8 <DIO_u8GetPinValue+0x6>
    1ff8:	00 d0       	rcall	.+0      	; 0x1ffa <DIO_u8GetPinValue+0x8>
    1ffa:	00 d0       	rcall	.+0      	; 0x1ffc <DIO_u8GetPinValue+0xa>
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    2000:	89 83       	std	Y+1, r24	; 0x01
    2002:	6a 83       	std	Y+2, r22	; 0x02
	
	switch (copy_u8port){
    2004:	89 81       	ldd	r24, Y+1	; 0x01
    2006:	28 2f       	mov	r18, r24
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	3d 83       	std	Y+5, r19	; 0x05
    200c:	2c 83       	std	Y+4, r18	; 0x04
    200e:	4c 81       	ldd	r20, Y+4	; 0x04
    2010:	5d 81       	ldd	r21, Y+5	; 0x05
    2012:	41 30       	cpi	r20, 0x01	; 1
    2014:	51 05       	cpc	r21, r1
    2016:	49 f1       	breq	.+82     	; 0x206a <DIO_u8GetPinValue+0x78>
    2018:	8c 81       	ldd	r24, Y+4	; 0x04
    201a:	9d 81       	ldd	r25, Y+5	; 0x05
    201c:	82 30       	cpi	r24, 0x02	; 2
    201e:	91 05       	cpc	r25, r1
    2020:	34 f4       	brge	.+12     	; 0x202e <DIO_u8GetPinValue+0x3c>
    2022:	2c 81       	ldd	r18, Y+4	; 0x04
    2024:	3d 81       	ldd	r19, Y+5	; 0x05
    2026:	21 15       	cp	r18, r1
    2028:	31 05       	cpc	r19, r1
    202a:	61 f0       	breq	.+24     	; 0x2044 <DIO_u8GetPinValue+0x52>
    202c:	57 c0       	rjmp	.+174    	; 0x20dc <DIO_u8GetPinValue+0xea>
    202e:	4c 81       	ldd	r20, Y+4	; 0x04
    2030:	5d 81       	ldd	r21, Y+5	; 0x05
    2032:	42 30       	cpi	r20, 0x02	; 2
    2034:	51 05       	cpc	r21, r1
    2036:	61 f1       	breq	.+88     	; 0x2090 <DIO_u8GetPinValue+0x9e>
    2038:	8c 81       	ldd	r24, Y+4	; 0x04
    203a:	9d 81       	ldd	r25, Y+5	; 0x05
    203c:	83 30       	cpi	r24, 0x03	; 3
    203e:	91 05       	cpc	r25, r1
    2040:	d1 f1       	breq	.+116    	; 0x20b6 <DIO_u8GetPinValue+0xc4>
    2042:	4c c0       	rjmp	.+152    	; 0x20dc <DIO_u8GetPinValue+0xea>
		case 0 : return GET_BIT(PINA,copy_u8pin); break;
    2044:	e9 e3       	ldi	r30, 0x39	; 57
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	28 2f       	mov	r18, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	8a 81       	ldd	r24, Y+2	; 0x02
    2050:	88 2f       	mov	r24, r24
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	a9 01       	movw	r20, r18
    2056:	02 c0       	rjmp	.+4      	; 0x205c <DIO_u8GetPinValue+0x6a>
    2058:	55 95       	asr	r21
    205a:	47 95       	ror	r20
    205c:	8a 95       	dec	r24
    205e:	e2 f7       	brpl	.-8      	; 0x2058 <DIO_u8GetPinValue+0x66>
    2060:	ca 01       	movw	r24, r20
    2062:	58 2f       	mov	r21, r24
    2064:	51 70       	andi	r21, 0x01	; 1
    2066:	5b 83       	std	Y+3, r21	; 0x03
    2068:	3a c0       	rjmp	.+116    	; 0x20de <DIO_u8GetPinValue+0xec>
		case 1 : return GET_BIT(PINB,copy_u8pin); break;
    206a:	e6 e3       	ldi	r30, 0x36	; 54
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	28 2f       	mov	r18, r24
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	8a 81       	ldd	r24, Y+2	; 0x02
    2076:	88 2f       	mov	r24, r24
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	a9 01       	movw	r20, r18
    207c:	02 c0       	rjmp	.+4      	; 0x2082 <DIO_u8GetPinValue+0x90>
    207e:	55 95       	asr	r21
    2080:	47 95       	ror	r20
    2082:	8a 95       	dec	r24
    2084:	e2 f7       	brpl	.-8      	; 0x207e <DIO_u8GetPinValue+0x8c>
    2086:	ca 01       	movw	r24, r20
    2088:	58 2f       	mov	r21, r24
    208a:	51 70       	andi	r21, 0x01	; 1
    208c:	5b 83       	std	Y+3, r21	; 0x03
    208e:	27 c0       	rjmp	.+78     	; 0x20de <DIO_u8GetPinValue+0xec>
		case 2 : return GET_BIT(PINC,copy_u8pin); break;
    2090:	e3 e3       	ldi	r30, 0x33	; 51
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	28 2f       	mov	r18, r24
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	8a 81       	ldd	r24, Y+2	; 0x02
    209c:	88 2f       	mov	r24, r24
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	a9 01       	movw	r20, r18
    20a2:	02 c0       	rjmp	.+4      	; 0x20a8 <DIO_u8GetPinValue+0xb6>
    20a4:	55 95       	asr	r21
    20a6:	47 95       	ror	r20
    20a8:	8a 95       	dec	r24
    20aa:	e2 f7       	brpl	.-8      	; 0x20a4 <DIO_u8GetPinValue+0xb2>
    20ac:	ca 01       	movw	r24, r20
    20ae:	58 2f       	mov	r21, r24
    20b0:	51 70       	andi	r21, 0x01	; 1
    20b2:	5b 83       	std	Y+3, r21	; 0x03
    20b4:	14 c0       	rjmp	.+40     	; 0x20de <DIO_u8GetPinValue+0xec>
		case 3 : return GET_BIT(PIND,copy_u8pin); break;
    20b6:	e0 e3       	ldi	r30, 0x30	; 48
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	28 2f       	mov	r18, r24
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	8a 81       	ldd	r24, Y+2	; 0x02
    20c2:	88 2f       	mov	r24, r24
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	a9 01       	movw	r20, r18
    20c8:	02 c0       	rjmp	.+4      	; 0x20ce <DIO_u8GetPinValue+0xdc>
    20ca:	55 95       	asr	r21
    20cc:	47 95       	ror	r20
    20ce:	8a 95       	dec	r24
    20d0:	e2 f7       	brpl	.-8      	; 0x20ca <DIO_u8GetPinValue+0xd8>
    20d2:	ca 01       	movw	r24, r20
    20d4:	58 2f       	mov	r21, r24
    20d6:	51 70       	andi	r21, 0x01	; 1
    20d8:	5b 83       	std	Y+3, r21	; 0x03
    20da:	01 c0       	rjmp	.+2      	; 0x20de <DIO_u8GetPinValue+0xec>
    20dc:	02 c0       	rjmp	.+4      	; 0x20e2 <DIO_u8GetPinValue+0xf0>
	}
	
}
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	8e 83       	std	Y+6, r24	; 0x06
    20e2:	8e 81       	ldd	r24, Y+6	; 0x06
    20e4:	26 96       	adiw	r28, 0x06	; 6
    20e6:	0f b6       	in	r0, 0x3f	; 63
    20e8:	f8 94       	cli
    20ea:	de bf       	out	0x3e, r29	; 62
    20ec:	0f be       	out	0x3f, r0	; 63
    20ee:	cd bf       	out	0x3d, r28	; 61
    20f0:	cf 91       	pop	r28
    20f2:	df 91       	pop	r29
    20f4:	08 95       	ret

000020f6 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 copy_u8port, u8 copy_u8Direction){
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	00 d0       	rcall	.+0      	; 0x20fc <DIO_voidSetPortDirection+0x6>
    20fc:	00 d0       	rcall	.+0      	; 0x20fe <DIO_voidSetPortDirection+0x8>
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
    2102:	89 83       	std	Y+1, r24	; 0x01
    2104:	6a 83       	std	Y+2, r22	; 0x02
	
	switch (copy_u8port){
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	28 2f       	mov	r18, r24
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	3c 83       	std	Y+4, r19	; 0x04
    210e:	2b 83       	std	Y+3, r18	; 0x03
    2110:	8b 81       	ldd	r24, Y+3	; 0x03
    2112:	9c 81       	ldd	r25, Y+4	; 0x04
    2114:	81 30       	cpi	r24, 0x01	; 1
    2116:	91 05       	cpc	r25, r1
    2118:	d1 f0       	breq	.+52     	; 0x214e <DIO_voidSetPortDirection+0x58>
    211a:	2b 81       	ldd	r18, Y+3	; 0x03
    211c:	3c 81       	ldd	r19, Y+4	; 0x04
    211e:	22 30       	cpi	r18, 0x02	; 2
    2120:	31 05       	cpc	r19, r1
    2122:	2c f4       	brge	.+10     	; 0x212e <DIO_voidSetPortDirection+0x38>
    2124:	8b 81       	ldd	r24, Y+3	; 0x03
    2126:	9c 81       	ldd	r25, Y+4	; 0x04
    2128:	00 97       	sbiw	r24, 0x00	; 0
    212a:	61 f0       	breq	.+24     	; 0x2144 <DIO_voidSetPortDirection+0x4e>
    212c:	1e c0       	rjmp	.+60     	; 0x216a <DIO_voidSetPortDirection+0x74>
    212e:	2b 81       	ldd	r18, Y+3	; 0x03
    2130:	3c 81       	ldd	r19, Y+4	; 0x04
    2132:	22 30       	cpi	r18, 0x02	; 2
    2134:	31 05       	cpc	r19, r1
    2136:	81 f0       	breq	.+32     	; 0x2158 <DIO_voidSetPortDirection+0x62>
    2138:	8b 81       	ldd	r24, Y+3	; 0x03
    213a:	9c 81       	ldd	r25, Y+4	; 0x04
    213c:	83 30       	cpi	r24, 0x03	; 3
    213e:	91 05       	cpc	r25, r1
    2140:	81 f0       	breq	.+32     	; 0x2162 <DIO_voidSetPortDirection+0x6c>
    2142:	13 c0       	rjmp	.+38     	; 0x216a <DIO_voidSetPortDirection+0x74>
		case 0 : DDRA = copy_u8Direction; break;
    2144:	ea e3       	ldi	r30, 0x3A	; 58
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	8a 81       	ldd	r24, Y+2	; 0x02
    214a:	80 83       	st	Z, r24
    214c:	0e c0       	rjmp	.+28     	; 0x216a <DIO_voidSetPortDirection+0x74>
		case 1 : DDRB = copy_u8Direction; break;
    214e:	e7 e3       	ldi	r30, 0x37	; 55
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	8a 81       	ldd	r24, Y+2	; 0x02
    2154:	80 83       	st	Z, r24
    2156:	09 c0       	rjmp	.+18     	; 0x216a <DIO_voidSetPortDirection+0x74>
		case 2 : DDRC = copy_u8Direction; break;
    2158:	e4 e3       	ldi	r30, 0x34	; 52
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	8a 81       	ldd	r24, Y+2	; 0x02
    215e:	80 83       	st	Z, r24
    2160:	04 c0       	rjmp	.+8      	; 0x216a <DIO_voidSetPortDirection+0x74>
		case 3 : DDRD = copy_u8Direction; break;
    2162:	e1 e3       	ldi	r30, 0x31	; 49
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	8a 81       	ldd	r24, Y+2	; 0x02
    2168:	80 83       	st	Z, r24
	}

}
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	cf 91       	pop	r28
    2174:	df 91       	pop	r29
    2176:	08 95       	ret

00002178 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 copy_u8port, u8 copy_u8Value){
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	00 d0       	rcall	.+0      	; 0x217e <DIO_voidSetPortValue+0x6>
    217e:	00 d0       	rcall	.+0      	; 0x2180 <DIO_voidSetPortValue+0x8>
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
    2184:	89 83       	std	Y+1, r24	; 0x01
    2186:	6a 83       	std	Y+2, r22	; 0x02
	
	switch (copy_u8port){
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	28 2f       	mov	r18, r24
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	3c 83       	std	Y+4, r19	; 0x04
    2190:	2b 83       	std	Y+3, r18	; 0x03
    2192:	8b 81       	ldd	r24, Y+3	; 0x03
    2194:	9c 81       	ldd	r25, Y+4	; 0x04
    2196:	81 30       	cpi	r24, 0x01	; 1
    2198:	91 05       	cpc	r25, r1
    219a:	d1 f0       	breq	.+52     	; 0x21d0 <DIO_voidSetPortValue+0x58>
    219c:	2b 81       	ldd	r18, Y+3	; 0x03
    219e:	3c 81       	ldd	r19, Y+4	; 0x04
    21a0:	22 30       	cpi	r18, 0x02	; 2
    21a2:	31 05       	cpc	r19, r1
    21a4:	2c f4       	brge	.+10     	; 0x21b0 <DIO_voidSetPortValue+0x38>
    21a6:	8b 81       	ldd	r24, Y+3	; 0x03
    21a8:	9c 81       	ldd	r25, Y+4	; 0x04
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	61 f0       	breq	.+24     	; 0x21c6 <DIO_voidSetPortValue+0x4e>
    21ae:	1e c0       	rjmp	.+60     	; 0x21ec <DIO_voidSetPortValue+0x74>
    21b0:	2b 81       	ldd	r18, Y+3	; 0x03
    21b2:	3c 81       	ldd	r19, Y+4	; 0x04
    21b4:	22 30       	cpi	r18, 0x02	; 2
    21b6:	31 05       	cpc	r19, r1
    21b8:	81 f0       	breq	.+32     	; 0x21da <DIO_voidSetPortValue+0x62>
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
    21bc:	9c 81       	ldd	r25, Y+4	; 0x04
    21be:	83 30       	cpi	r24, 0x03	; 3
    21c0:	91 05       	cpc	r25, r1
    21c2:	81 f0       	breq	.+32     	; 0x21e4 <DIO_voidSetPortValue+0x6c>
    21c4:	13 c0       	rjmp	.+38     	; 0x21ec <DIO_voidSetPortValue+0x74>
		case 0 : PORTA = copy_u8Value; break;
    21c6:	eb e3       	ldi	r30, 0x3B	; 59
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	8a 81       	ldd	r24, Y+2	; 0x02
    21cc:	80 83       	st	Z, r24
    21ce:	0e c0       	rjmp	.+28     	; 0x21ec <DIO_voidSetPortValue+0x74>
		case 1 : PORTB = copy_u8Value; break;
    21d0:	e8 e3       	ldi	r30, 0x38	; 56
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	8a 81       	ldd	r24, Y+2	; 0x02
    21d6:	80 83       	st	Z, r24
    21d8:	09 c0       	rjmp	.+18     	; 0x21ec <DIO_voidSetPortValue+0x74>
		case 2 : PORTC = copy_u8Value; break;
    21da:	e5 e3       	ldi	r30, 0x35	; 53
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	80 83       	st	Z, r24
    21e2:	04 c0       	rjmp	.+8      	; 0x21ec <DIO_voidSetPortValue+0x74>
		case 3 : PORTD = copy_u8Value; break;
    21e4:	e2 e3       	ldi	r30, 0x32	; 50
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ea:	80 83       	st	Z, r24
	}
}
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	0f 90       	pop	r0
    21f2:	0f 90       	pop	r0
    21f4:	cf 91       	pop	r28
    21f6:	df 91       	pop	r29
    21f8:	08 95       	ret

000021fa <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue(u8 copy_u8port,u8 copy_u8pin){
    21fa:	df 93       	push	r29
    21fc:	cf 93       	push	r28
    21fe:	00 d0       	rcall	.+0      	; 0x2200 <DIO_voidTogglePinValue+0x6>
    2200:	00 d0       	rcall	.+0      	; 0x2202 <DIO_voidTogglePinValue+0x8>
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
    2206:	89 83       	std	Y+1, r24	; 0x01
    2208:	6a 83       	std	Y+2, r22	; 0x02
	
	switch (copy_u8port){
    220a:	89 81       	ldd	r24, Y+1	; 0x01
    220c:	28 2f       	mov	r18, r24
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	3c 83       	std	Y+4, r19	; 0x04
    2212:	2b 83       	std	Y+3, r18	; 0x03
    2214:	8b 81       	ldd	r24, Y+3	; 0x03
    2216:	9c 81       	ldd	r25, Y+4	; 0x04
    2218:	81 30       	cpi	r24, 0x01	; 1
    221a:	91 05       	cpc	r25, r1
    221c:	49 f1       	breq	.+82     	; 0x2270 <DIO_voidTogglePinValue+0x76>
    221e:	2b 81       	ldd	r18, Y+3	; 0x03
    2220:	3c 81       	ldd	r19, Y+4	; 0x04
    2222:	22 30       	cpi	r18, 0x02	; 2
    2224:	31 05       	cpc	r19, r1
    2226:	2c f4       	brge	.+10     	; 0x2232 <DIO_voidTogglePinValue+0x38>
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	9c 81       	ldd	r25, Y+4	; 0x04
    222c:	00 97       	sbiw	r24, 0x00	; 0
    222e:	61 f0       	breq	.+24     	; 0x2248 <DIO_voidTogglePinValue+0x4e>
    2230:	5a c0       	rjmp	.+180    	; 0x22e6 <DIO_voidTogglePinValue+0xec>
    2232:	2b 81       	ldd	r18, Y+3	; 0x03
    2234:	3c 81       	ldd	r19, Y+4	; 0x04
    2236:	22 30       	cpi	r18, 0x02	; 2
    2238:	31 05       	cpc	r19, r1
    223a:	71 f1       	breq	.+92     	; 0x2298 <DIO_voidTogglePinValue+0x9e>
    223c:	8b 81       	ldd	r24, Y+3	; 0x03
    223e:	9c 81       	ldd	r25, Y+4	; 0x04
    2240:	83 30       	cpi	r24, 0x03	; 3
    2242:	91 05       	cpc	r25, r1
    2244:	e9 f1       	breq	.+122    	; 0x22c0 <DIO_voidTogglePinValue+0xc6>
    2246:	4f c0       	rjmp	.+158    	; 0x22e6 <DIO_voidTogglePinValue+0xec>
		case 0 : TOG_BIT(PORTA,copy_u8pin); break;
    2248:	ab e3       	ldi	r26, 0x3B	; 59
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	eb e3       	ldi	r30, 0x3B	; 59
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	80 81       	ld	r24, Z
    2252:	48 2f       	mov	r20, r24
    2254:	8a 81       	ldd	r24, Y+2	; 0x02
    2256:	28 2f       	mov	r18, r24
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	02 2e       	mov	r0, r18
    2260:	02 c0       	rjmp	.+4      	; 0x2266 <DIO_voidTogglePinValue+0x6c>
    2262:	88 0f       	add	r24, r24
    2264:	99 1f       	adc	r25, r25
    2266:	0a 94       	dec	r0
    2268:	e2 f7       	brpl	.-8      	; 0x2262 <DIO_voidTogglePinValue+0x68>
    226a:	84 27       	eor	r24, r20
    226c:	8c 93       	st	X, r24
    226e:	3b c0       	rjmp	.+118    	; 0x22e6 <DIO_voidTogglePinValue+0xec>
		case 1 : TOG_BIT(PORTB,copy_u8pin); break;
    2270:	a8 e3       	ldi	r26, 0x38	; 56
    2272:	b0 e0       	ldi	r27, 0x00	; 0
    2274:	e8 e3       	ldi	r30, 0x38	; 56
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	80 81       	ld	r24, Z
    227a:	48 2f       	mov	r20, r24
    227c:	8a 81       	ldd	r24, Y+2	; 0x02
    227e:	28 2f       	mov	r18, r24
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	02 2e       	mov	r0, r18
    2288:	02 c0       	rjmp	.+4      	; 0x228e <DIO_voidTogglePinValue+0x94>
    228a:	88 0f       	add	r24, r24
    228c:	99 1f       	adc	r25, r25
    228e:	0a 94       	dec	r0
    2290:	e2 f7       	brpl	.-8      	; 0x228a <DIO_voidTogglePinValue+0x90>
    2292:	84 27       	eor	r24, r20
    2294:	8c 93       	st	X, r24
    2296:	27 c0       	rjmp	.+78     	; 0x22e6 <DIO_voidTogglePinValue+0xec>
		case 2 : TOG_BIT(PORTC,copy_u8pin); break;
    2298:	a5 e3       	ldi	r26, 0x35	; 53
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	e5 e3       	ldi	r30, 0x35	; 53
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	48 2f       	mov	r20, r24
    22a4:	8a 81       	ldd	r24, Y+2	; 0x02
    22a6:	28 2f       	mov	r18, r24
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	02 2e       	mov	r0, r18
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <DIO_voidTogglePinValue+0xbc>
    22b2:	88 0f       	add	r24, r24
    22b4:	99 1f       	adc	r25, r25
    22b6:	0a 94       	dec	r0
    22b8:	e2 f7       	brpl	.-8      	; 0x22b2 <DIO_voidTogglePinValue+0xb8>
    22ba:	84 27       	eor	r24, r20
    22bc:	8c 93       	st	X, r24
    22be:	13 c0       	rjmp	.+38     	; 0x22e6 <DIO_voidTogglePinValue+0xec>
		case 3 : TOG_BIT(PORTD,copy_u8pin); break;
    22c0:	a2 e3       	ldi	r26, 0x32	; 50
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	e2 e3       	ldi	r30, 0x32	; 50
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	48 2f       	mov	r20, r24
    22cc:	8a 81       	ldd	r24, Y+2	; 0x02
    22ce:	28 2f       	mov	r18, r24
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	02 2e       	mov	r0, r18
    22d8:	02 c0       	rjmp	.+4      	; 0x22de <DIO_voidTogglePinValue+0xe4>
    22da:	88 0f       	add	r24, r24
    22dc:	99 1f       	adc	r25, r25
    22de:	0a 94       	dec	r0
    22e0:	e2 f7       	brpl	.-8      	; 0x22da <DIO_voidTogglePinValue+0xe0>
    22e2:	84 27       	eor	r24, r20
    22e4:	8c 93       	st	X, r24
	}
	
}
    22e6:	0f 90       	pop	r0
    22e8:	0f 90       	pop	r0
    22ea:	0f 90       	pop	r0
    22ec:	0f 90       	pop	r0
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	08 95       	ret

000022f4 <TIMER1_voidFPWM>:
#include <avr/interrupt.h>
#include "../../MCAL/DIO/DIO_Interface.h"
#include "SERVOMOTOR_Interface.h"

void TIMER1_voidFPWM(void)
{
    22f4:	df 93       	push	r29
    22f6:	cf 93       	push	r28
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
	/* SELECT FAST PWM */
	CLR_BIT(TCCR1A, WGM10);
    22fc:	af e4       	ldi	r26, 0x4F	; 79
    22fe:	b0 e0       	ldi	r27, 0x00	; 0
    2300:	ef e4       	ldi	r30, 0x4F	; 79
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	8e 7f       	andi	r24, 0xFE	; 254
    2308:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11);
    230a:	af e4       	ldi	r26, 0x4F	; 79
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	ef e4       	ldi	r30, 0x4F	; 79
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	82 60       	ori	r24, 0x02	; 2
    2316:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
    2318:	ae e4       	ldi	r26, 0x4E	; 78
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	ee e4       	ldi	r30, 0x4E	; 78
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
    2322:	88 60       	ori	r24, 0x08	; 8
    2324:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM13);
    2326:	ae e4       	ldi	r26, 0x4E	; 78
    2328:	b0 e0       	ldi	r27, 0x00	; 0
    232a:	ee e4       	ldi	r30, 0x4E	; 78
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	80 81       	ld	r24, Z
    2330:	80 61       	ori	r24, 0x10	; 16
    2332:	8c 93       	st	X, r24

	/* CLEAR OC1A */
	CLR_BIT(TCCR1A, COM1A0);
    2334:	af e4       	ldi	r26, 0x4F	; 79
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	ef e4       	ldi	r30, 0x4F	; 79
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	8f 7b       	andi	r24, 0xBF	; 191
    2340:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1A1);
    2342:	af e4       	ldi	r26, 0x4F	; 79
    2344:	b0 e0       	ldi	r27, 0x00	; 0
    2346:	ef e4       	ldi	r30, 0x4F	; 79
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	80 68       	ori	r24, 0x80	; 128
    234e:	8c 93       	st	X, r24

	/* ICR1 */
	ICR1 = 19999;
    2350:	e6 e4       	ldi	r30, 0x46	; 70
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	8f e1       	ldi	r24, 0x1F	; 31
    2356:	9e e4       	ldi	r25, 0x4E	; 78
    2358:	91 83       	std	Z+1, r25	; 0x01
    235a:	80 83       	st	Z, r24

	/* CLK/8 */
	CLR_BIT(TCCR1B, CS10);
    235c:	ae e4       	ldi	r26, 0x4E	; 78
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	ee e4       	ldi	r30, 0x4E	; 78
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 81       	ld	r24, Z
    2366:	8e 7f       	andi	r24, 0xFE	; 254
    2368:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS11);
    236a:	ae e4       	ldi	r26, 0x4E	; 78
    236c:	b0 e0       	ldi	r27, 0x00	; 0
    236e:	ee e4       	ldi	r30, 0x4E	; 78
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	82 60       	ori	r24, 0x02	; 2
    2376:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
    2378:	ae e4       	ldi	r26, 0x4E	; 78
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	ee e4       	ldi	r30, 0x4E	; 78
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	80 81       	ld	r24, Z
    2382:	8b 7f       	andi	r24, 0xFB	; 251
    2384:	8c 93       	st	X, r24
	DIO_voidSetPinDirection(3,5,1);
    2386:	83 e0       	ldi	r24, 0x03	; 3
    2388:	65 e0       	ldi	r22, 0x05	; 5
    238a:	41 e0       	ldi	r20, 0x01	; 1
    238c:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <DIO_voidSetPinDirection>

}
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	08 95       	ret

00002396 <SERVO_voidSetAngle>:

void SERVO_voidSetAngle(u8 copy_u8Angle)
{
    2396:	df 93       	push	r29
    2398:	cf 93       	push	r28
    239a:	0f 92       	push	r0
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
    23a0:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = ((50* copy_u8Angle)+8991)/9;
    23a2:	ea e4       	ldi	r30, 0x4A	; 74
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	89 81       	ldd	r24, Y+1	; 0x01
    23a8:	28 2f       	mov	r18, r24
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	82 e3       	ldi	r24, 0x32	; 50
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	ac 01       	movw	r20, r24
    23b2:	24 9f       	mul	r18, r20
    23b4:	c0 01       	movw	r24, r0
    23b6:	25 9f       	mul	r18, r21
    23b8:	90 0d       	add	r25, r0
    23ba:	34 9f       	mul	r19, r20
    23bc:	90 0d       	add	r25, r0
    23be:	11 24       	eor	r1, r1
    23c0:	81 5e       	subi	r24, 0xE1	; 225
    23c2:	9c 4d       	sbci	r25, 0xDC	; 220
    23c4:	29 e0       	ldi	r18, 0x09	; 9
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	b9 01       	movw	r22, r18
    23ca:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divmodhi4>
    23ce:	cb 01       	movw	r24, r22
    23d0:	91 83       	std	Z+1, r25	; 0x01
    23d2:	80 83       	st	Z, r24
}
    23d4:	0f 90       	pop	r0
    23d6:	cf 91       	pop	r28
    23d8:	df 91       	pop	r29
    23da:	08 95       	ret

000023dc <LCD_voidInit>:
#include "LCD_Interface.h"



void LCD_voidInit()
{
    23dc:	df 93       	push	r29
    23de:	cf 93       	push	r28
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
    23e4:	e8 97       	sbiw	r28, 0x38	; 56
    23e6:	0f b6       	in	r0, 0x3f	; 63
    23e8:	f8 94       	cli
    23ea:	de bf       	out	0x3e, r29	; 62
    23ec:	0f be       	out	0x3f, r0	; 63
    23ee:	cd bf       	out	0x3d, r28	; 61
	/* SET DATA PORT OUTPUT */
	DIO_voidSetPortDirection(LCD_DATA_PORT, 0xFF);
    23f0:	82 e0       	ldi	r24, 0x02	; 2
    23f2:	6f ef       	ldi	r22, 0xFF	; 255
    23f4:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <DIO_voidSetPortDirection>
	
	/* SET PINS OF CONTROL OUTPUT */
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, RS, DIO_OUTPUT);
    23f8:	83 e0       	ldi	r24, 0x03	; 3
    23fa:	60 e0       	ldi	r22, 0x00	; 0
    23fc:	41 e0       	ldi	r20, 0x01	; 1
    23fe:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, RW, DIO_OUTPUT);
    2402:	83 e0       	ldi	r24, 0x03	; 3
    2404:	61 e0       	ldi	r22, 0x01	; 1
    2406:	41 e0       	ldi	r20, 0x01	; 1
    2408:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, EN, DIO_OUTPUT);
    240c:	83 e0       	ldi	r24, 0x03	; 3
    240e:	62 e0       	ldi	r22, 0x02	; 2
    2410:	41 e0       	ldi	r20, 0x01	; 1
    2412:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <DIO_voidSetPinDirection>
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	a0 ef       	ldi	r26, 0xF0	; 240
    241c:	b1 e4       	ldi	r27, 0x41	; 65
    241e:	8d ab       	std	Y+53, r24	; 0x35
    2420:	9e ab       	std	Y+54, r25	; 0x36
    2422:	af ab       	std	Y+55, r26	; 0x37
    2424:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2426:	6d a9       	ldd	r22, Y+53	; 0x35
    2428:	7e a9       	ldd	r23, Y+54	; 0x36
    242a:	8f a9       	ldd	r24, Y+55	; 0x37
    242c:	98 ad       	ldd	r25, Y+56	; 0x38
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	4a ef       	ldi	r20, 0xFA	; 250
    2434:	54 e4       	ldi	r21, 0x44	; 68
    2436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	89 ab       	std	Y+49, r24	; 0x31
    2440:	9a ab       	std	Y+50, r25	; 0x32
    2442:	ab ab       	std	Y+51, r26	; 0x33
    2444:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2446:	69 a9       	ldd	r22, Y+49	; 0x31
    2448:	7a a9       	ldd	r23, Y+50	; 0x32
    244a:	8b a9       	ldd	r24, Y+51	; 0x33
    244c:	9c a9       	ldd	r25, Y+52	; 0x34
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	40 e8       	ldi	r20, 0x80	; 128
    2454:	5f e3       	ldi	r21, 0x3F	; 63
    2456:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    245a:	88 23       	and	r24, r24
    245c:	2c f4       	brge	.+10     	; 0x2468 <LCD_voidInit+0x8c>
		__ticks = 1;
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	98 ab       	std	Y+48, r25	; 0x30
    2464:	8f a7       	std	Y+47, r24	; 0x2f
    2466:	3f c0       	rjmp	.+126    	; 0x24e6 <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    2468:	69 a9       	ldd	r22, Y+49	; 0x31
    246a:	7a a9       	ldd	r23, Y+50	; 0x32
    246c:	8b a9       	ldd	r24, Y+51	; 0x33
    246e:	9c a9       	ldd	r25, Y+52	; 0x34
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	3f ef       	ldi	r19, 0xFF	; 255
    2474:	4f e7       	ldi	r20, 0x7F	; 127
    2476:	57 e4       	ldi	r21, 0x47	; 71
    2478:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    247c:	18 16       	cp	r1, r24
    247e:	4c f5       	brge	.+82     	; 0x24d2 <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2480:	6d a9       	ldd	r22, Y+53	; 0x35
    2482:	7e a9       	ldd	r23, Y+54	; 0x36
    2484:	8f a9       	ldd	r24, Y+55	; 0x37
    2486:	98 ad       	ldd	r25, Y+56	; 0x38
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	40 e2       	ldi	r20, 0x20	; 32
    248e:	51 e4       	ldi	r21, 0x41	; 65
    2490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	bc 01       	movw	r22, r24
    249a:	cd 01       	movw	r24, r26
    249c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	98 ab       	std	Y+48, r25	; 0x30
    24a6:	8f a7       	std	Y+47, r24	; 0x2f
    24a8:	0f c0       	rjmp	.+30     	; 0x24c8 <LCD_voidInit+0xec>
    24aa:	88 ec       	ldi	r24, 0xC8	; 200
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	9e a7       	std	Y+46, r25	; 0x2e
    24b0:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    24b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	f1 f7       	brne	.-4      	; 0x24b6 <LCD_voidInit+0xda>
    24ba:	9e a7       	std	Y+46, r25	; 0x2e
    24bc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24be:	8f a5       	ldd	r24, Y+47	; 0x2f
    24c0:	98 a9       	ldd	r25, Y+48	; 0x30
    24c2:	01 97       	sbiw	r24, 0x01	; 1
    24c4:	98 ab       	std	Y+48, r25	; 0x30
    24c6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ca:	98 a9       	ldd	r25, Y+48	; 0x30
    24cc:	00 97       	sbiw	r24, 0x00	; 0
    24ce:	69 f7       	brne	.-38     	; 0x24aa <LCD_voidInit+0xce>
    24d0:	14 c0       	rjmp	.+40     	; 0x24fa <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d2:	69 a9       	ldd	r22, Y+49	; 0x31
    24d4:	7a a9       	ldd	r23, Y+50	; 0x32
    24d6:	8b a9       	ldd	r24, Y+51	; 0x33
    24d8:	9c a9       	ldd	r25, Y+52	; 0x34
    24da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	98 ab       	std	Y+48, r25	; 0x30
    24e4:	8f a7       	std	Y+47, r24	; 0x2f
    24e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    24e8:	98 a9       	ldd	r25, Y+48	; 0x30
    24ea:	9c a7       	std	Y+44, r25	; 0x2c
    24ec:	8b a7       	std	Y+43, r24	; 0x2b
    24ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    24f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	f1 f7       	brne	.-4      	; 0x24f2 <LCD_voidInit+0x116>
    24f6:	9c a7       	std	Y+44, r25	; 0x2c
    24f8:	8b a7       	std	Y+43, r24	; 0x2b
	
	/* WAIT 30ms AFTER VDD RISES TO 4.5V */
	_delay_ms(30);
	
	/* FUNCTION SET */
	LCD_voidSendCommand (LCD_FUNC_SET);
    24fa:	88 e3       	ldi	r24, 0x38	; 56
    24fc:	0e 94 e5 13 	call	0x27ca	; 0x27ca <LCD_voidSendCommand>
    2500:	80 e0       	ldi	r24, 0x00	; 0
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	a0 e8       	ldi	r26, 0x80	; 128
    2506:	bf e3       	ldi	r27, 0x3F	; 63
    2508:	8f a3       	std	Y+39, r24	; 0x27
    250a:	98 a7       	std	Y+40, r25	; 0x28
    250c:	a9 a7       	std	Y+41, r26	; 0x29
    250e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2510:	6f a1       	ldd	r22, Y+39	; 0x27
    2512:	78 a5       	ldd	r23, Y+40	; 0x28
    2514:	89 a5       	ldd	r24, Y+41	; 0x29
    2516:	9a a5       	ldd	r25, Y+42	; 0x2a
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	4a ef       	ldi	r20, 0xFA	; 250
    251e:	54 e4       	ldi	r21, 0x44	; 68
    2520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	8b a3       	std	Y+35, r24	; 0x23
    252a:	9c a3       	std	Y+36, r25	; 0x24
    252c:	ad a3       	std	Y+37, r26	; 0x25
    252e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2530:	6b a1       	ldd	r22, Y+35	; 0x23
    2532:	7c a1       	ldd	r23, Y+36	; 0x24
    2534:	8d a1       	ldd	r24, Y+37	; 0x25
    2536:	9e a1       	ldd	r25, Y+38	; 0x26
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	40 e8       	ldi	r20, 0x80	; 128
    253e:	5f e3       	ldi	r21, 0x3F	; 63
    2540:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2544:	88 23       	and	r24, r24
    2546:	2c f4       	brge	.+10     	; 0x2552 <LCD_voidInit+0x176>
		__ticks = 1;
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	9a a3       	std	Y+34, r25	; 0x22
    254e:	89 a3       	std	Y+33, r24	; 0x21
    2550:	3f c0       	rjmp	.+126    	; 0x25d0 <LCD_voidInit+0x1f4>
	else if (__tmp > 65535)
    2552:	6b a1       	ldd	r22, Y+35	; 0x23
    2554:	7c a1       	ldd	r23, Y+36	; 0x24
    2556:	8d a1       	ldd	r24, Y+37	; 0x25
    2558:	9e a1       	ldd	r25, Y+38	; 0x26
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	3f ef       	ldi	r19, 0xFF	; 255
    255e:	4f e7       	ldi	r20, 0x7F	; 127
    2560:	57 e4       	ldi	r21, 0x47	; 71
    2562:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2566:	18 16       	cp	r1, r24
    2568:	4c f5       	brge	.+82     	; 0x25bc <LCD_voidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    256a:	6f a1       	ldd	r22, Y+39	; 0x27
    256c:	78 a5       	ldd	r23, Y+40	; 0x28
    256e:	89 a5       	ldd	r24, Y+41	; 0x29
    2570:	9a a5       	ldd	r25, Y+42	; 0x2a
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	40 e2       	ldi	r20, 0x20	; 32
    2578:	51 e4       	ldi	r21, 0x41	; 65
    257a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	bc 01       	movw	r22, r24
    2584:	cd 01       	movw	r24, r26
    2586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	9a a3       	std	Y+34, r25	; 0x22
    2590:	89 a3       	std	Y+33, r24	; 0x21
    2592:	0f c0       	rjmp	.+30     	; 0x25b2 <LCD_voidInit+0x1d6>
    2594:	88 ec       	ldi	r24, 0xC8	; 200
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	98 a3       	std	Y+32, r25	; 0x20
    259a:	8f 8f       	std	Y+31, r24	; 0x1f
    259c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    259e:	98 a1       	ldd	r25, Y+32	; 0x20
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	f1 f7       	brne	.-4      	; 0x25a0 <LCD_voidInit+0x1c4>
    25a4:	98 a3       	std	Y+32, r25	; 0x20
    25a6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a8:	89 a1       	ldd	r24, Y+33	; 0x21
    25aa:	9a a1       	ldd	r25, Y+34	; 0x22
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	9a a3       	std	Y+34, r25	; 0x22
    25b0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b2:	89 a1       	ldd	r24, Y+33	; 0x21
    25b4:	9a a1       	ldd	r25, Y+34	; 0x22
    25b6:	00 97       	sbiw	r24, 0x00	; 0
    25b8:	69 f7       	brne	.-38     	; 0x2594 <LCD_voidInit+0x1b8>
    25ba:	14 c0       	rjmp	.+40     	; 0x25e4 <LCD_voidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25bc:	6b a1       	ldd	r22, Y+35	; 0x23
    25be:	7c a1       	ldd	r23, Y+36	; 0x24
    25c0:	8d a1       	ldd	r24, Y+37	; 0x25
    25c2:	9e a1       	ldd	r25, Y+38	; 0x26
    25c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c8:	dc 01       	movw	r26, r24
    25ca:	cb 01       	movw	r24, r22
    25cc:	9a a3       	std	Y+34, r25	; 0x22
    25ce:	89 a3       	std	Y+33, r24	; 0x21
    25d0:	89 a1       	ldd	r24, Y+33	; 0x21
    25d2:	9a a1       	ldd	r25, Y+34	; 0x22
    25d4:	9e 8f       	std	Y+30, r25	; 0x1e
    25d6:	8d 8f       	std	Y+29, r24	; 0x1d
    25d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	f1 f7       	brne	.-4      	; 0x25dc <LCD_voidInit+0x200>
    25e0:	9e 8f       	std	Y+30, r25	; 0x1e
    25e2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	
	/* DISPLAY ON/OFF */
	LCD_voidSendCommand (LCD_ONOF);
    25e4:	8f e0       	ldi	r24, 0x0F	; 15
    25e6:	0e 94 e5 13 	call	0x27ca	; 0x27ca <LCD_voidSendCommand>
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	a0 e8       	ldi	r26, 0x80	; 128
    25f0:	bf e3       	ldi	r27, 0x3F	; 63
    25f2:	89 8f       	std	Y+25, r24	; 0x19
    25f4:	9a 8f       	std	Y+26, r25	; 0x1a
    25f6:	ab 8f       	std	Y+27, r26	; 0x1b
    25f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25fa:	69 8d       	ldd	r22, Y+25	; 0x19
    25fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2600:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	4a ef       	ldi	r20, 0xFA	; 250
    2608:	54 e4       	ldi	r21, 0x44	; 68
    260a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	8d 8b       	std	Y+21, r24	; 0x15
    2614:	9e 8b       	std	Y+22, r25	; 0x16
    2616:	af 8b       	std	Y+23, r26	; 0x17
    2618:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    261a:	6d 89       	ldd	r22, Y+21	; 0x15
    261c:	7e 89       	ldd	r23, Y+22	; 0x16
    261e:	8f 89       	ldd	r24, Y+23	; 0x17
    2620:	98 8d       	ldd	r25, Y+24	; 0x18
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	40 e8       	ldi	r20, 0x80	; 128
    2628:	5f e3       	ldi	r21, 0x3F	; 63
    262a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    262e:	88 23       	and	r24, r24
    2630:	2c f4       	brge	.+10     	; 0x263c <LCD_voidInit+0x260>
		__ticks = 1;
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	9c 8b       	std	Y+20, r25	; 0x14
    2638:	8b 8b       	std	Y+19, r24	; 0x13
    263a:	3f c0       	rjmp	.+126    	; 0x26ba <LCD_voidInit+0x2de>
	else if (__tmp > 65535)
    263c:	6d 89       	ldd	r22, Y+21	; 0x15
    263e:	7e 89       	ldd	r23, Y+22	; 0x16
    2640:	8f 89       	ldd	r24, Y+23	; 0x17
    2642:	98 8d       	ldd	r25, Y+24	; 0x18
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	3f ef       	ldi	r19, 0xFF	; 255
    2648:	4f e7       	ldi	r20, 0x7F	; 127
    264a:	57 e4       	ldi	r21, 0x47	; 71
    264c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2650:	18 16       	cp	r1, r24
    2652:	4c f5       	brge	.+82     	; 0x26a6 <LCD_voidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2654:	69 8d       	ldd	r22, Y+25	; 0x19
    2656:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2658:	8b 8d       	ldd	r24, Y+27	; 0x1b
    265a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	40 e2       	ldi	r20, 0x20	; 32
    2662:	51 e4       	ldi	r21, 0x41	; 65
    2664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	bc 01       	movw	r22, r24
    266e:	cd 01       	movw	r24, r26
    2670:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	9c 8b       	std	Y+20, r25	; 0x14
    267a:	8b 8b       	std	Y+19, r24	; 0x13
    267c:	0f c0       	rjmp	.+30     	; 0x269c <LCD_voidInit+0x2c0>
    267e:	88 ec       	ldi	r24, 0xC8	; 200
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	9a 8b       	std	Y+18, r25	; 0x12
    2684:	89 8b       	std	Y+17, r24	; 0x11
    2686:	89 89       	ldd	r24, Y+17	; 0x11
    2688:	9a 89       	ldd	r25, Y+18	; 0x12
    268a:	01 97       	sbiw	r24, 0x01	; 1
    268c:	f1 f7       	brne	.-4      	; 0x268a <LCD_voidInit+0x2ae>
    268e:	9a 8b       	std	Y+18, r25	; 0x12
    2690:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2692:	8b 89       	ldd	r24, Y+19	; 0x13
    2694:	9c 89       	ldd	r25, Y+20	; 0x14
    2696:	01 97       	sbiw	r24, 0x01	; 1
    2698:	9c 8b       	std	Y+20, r25	; 0x14
    269a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    269c:	8b 89       	ldd	r24, Y+19	; 0x13
    269e:	9c 89       	ldd	r25, Y+20	; 0x14
    26a0:	00 97       	sbiw	r24, 0x00	; 0
    26a2:	69 f7       	brne	.-38     	; 0x267e <LCD_voidInit+0x2a2>
    26a4:	14 c0       	rjmp	.+40     	; 0x26ce <LCD_voidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a6:	6d 89       	ldd	r22, Y+21	; 0x15
    26a8:	7e 89       	ldd	r23, Y+22	; 0x16
    26aa:	8f 89       	ldd	r24, Y+23	; 0x17
    26ac:	98 8d       	ldd	r25, Y+24	; 0x18
    26ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	9c 8b       	std	Y+20, r25	; 0x14
    26b8:	8b 8b       	std	Y+19, r24	; 0x13
    26ba:	8b 89       	ldd	r24, Y+19	; 0x13
    26bc:	9c 89       	ldd	r25, Y+20	; 0x14
    26be:	98 8b       	std	Y+16, r25	; 0x10
    26c0:	8f 87       	std	Y+15, r24	; 0x0f
    26c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    26c4:	98 89       	ldd	r25, Y+16	; 0x10
    26c6:	01 97       	sbiw	r24, 0x01	; 1
    26c8:	f1 f7       	brne	.-4      	; 0x26c6 <LCD_voidInit+0x2ea>
    26ca:	98 8b       	std	Y+16, r25	; 0x10
    26cc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	
	/* DISPLAY CLEAR */
	LCD_voidSendCommand (LCD_CLEAR);
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	0e 94 e5 13 	call	0x27ca	; 0x27ca <LCD_voidSendCommand>
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	a0 e0       	ldi	r26, 0x00	; 0
    26da:	b0 e4       	ldi	r27, 0x40	; 64
    26dc:	8b 87       	std	Y+11, r24	; 0x0b
    26de:	9c 87       	std	Y+12, r25	; 0x0c
    26e0:	ad 87       	std	Y+13, r26	; 0x0d
    26e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	4a ef       	ldi	r20, 0xFA	; 250
    26f2:	54 e4       	ldi	r21, 0x44	; 68
    26f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	8f 83       	std	Y+7, r24	; 0x07
    26fe:	98 87       	std	Y+8, r25	; 0x08
    2700:	a9 87       	std	Y+9, r26	; 0x09
    2702:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2704:	6f 81       	ldd	r22, Y+7	; 0x07
    2706:	78 85       	ldd	r23, Y+8	; 0x08
    2708:	89 85       	ldd	r24, Y+9	; 0x09
    270a:	9a 85       	ldd	r25, Y+10	; 0x0a
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	40 e8       	ldi	r20, 0x80	; 128
    2712:	5f e3       	ldi	r21, 0x3F	; 63
    2714:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2718:	88 23       	and	r24, r24
    271a:	2c f4       	brge	.+10     	; 0x2726 <LCD_voidInit+0x34a>
		__ticks = 1;
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	9e 83       	std	Y+6, r25	; 0x06
    2722:	8d 83       	std	Y+5, r24	; 0x05
    2724:	3f c0       	rjmp	.+126    	; 0x27a4 <LCD_voidInit+0x3c8>
	else if (__tmp > 65535)
    2726:	6f 81       	ldd	r22, Y+7	; 0x07
    2728:	78 85       	ldd	r23, Y+8	; 0x08
    272a:	89 85       	ldd	r24, Y+9	; 0x09
    272c:	9a 85       	ldd	r25, Y+10	; 0x0a
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	3f ef       	ldi	r19, 0xFF	; 255
    2732:	4f e7       	ldi	r20, 0x7F	; 127
    2734:	57 e4       	ldi	r21, 0x47	; 71
    2736:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    273a:	18 16       	cp	r1, r24
    273c:	4c f5       	brge	.+82     	; 0x2790 <LCD_voidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    273e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2740:	7c 85       	ldd	r23, Y+12	; 0x0c
    2742:	8d 85       	ldd	r24, Y+13	; 0x0d
    2744:	9e 85       	ldd	r25, Y+14	; 0x0e
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	40 e2       	ldi	r20, 0x20	; 32
    274c:	51 e4       	ldi	r21, 0x41	; 65
    274e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	bc 01       	movw	r22, r24
    2758:	cd 01       	movw	r24, r26
    275a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	9e 83       	std	Y+6, r25	; 0x06
    2764:	8d 83       	std	Y+5, r24	; 0x05
    2766:	0f c0       	rjmp	.+30     	; 0x2786 <LCD_voidInit+0x3aa>
    2768:	88 ec       	ldi	r24, 0xC8	; 200
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	9c 83       	std	Y+4, r25	; 0x04
    276e:	8b 83       	std	Y+3, r24	; 0x03
    2770:	8b 81       	ldd	r24, Y+3	; 0x03
    2772:	9c 81       	ldd	r25, Y+4	; 0x04
    2774:	01 97       	sbiw	r24, 0x01	; 1
    2776:	f1 f7       	brne	.-4      	; 0x2774 <LCD_voidInit+0x398>
    2778:	9c 83       	std	Y+4, r25	; 0x04
    277a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    277c:	8d 81       	ldd	r24, Y+5	; 0x05
    277e:	9e 81       	ldd	r25, Y+6	; 0x06
    2780:	01 97       	sbiw	r24, 0x01	; 1
    2782:	9e 83       	std	Y+6, r25	; 0x06
    2784:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2786:	8d 81       	ldd	r24, Y+5	; 0x05
    2788:	9e 81       	ldd	r25, Y+6	; 0x06
    278a:	00 97       	sbiw	r24, 0x00	; 0
    278c:	69 f7       	brne	.-38     	; 0x2768 <LCD_voidInit+0x38c>
    278e:	14 c0       	rjmp	.+40     	; 0x27b8 <LCD_voidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2790:	6f 81       	ldd	r22, Y+7	; 0x07
    2792:	78 85       	ldd	r23, Y+8	; 0x08
    2794:	89 85       	ldd	r24, Y+9	; 0x09
    2796:	9a 85       	ldd	r25, Y+10	; 0x0a
    2798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	9e 83       	std	Y+6, r25	; 0x06
    27a2:	8d 83       	std	Y+5, r24	; 0x05
    27a4:	8d 81       	ldd	r24, Y+5	; 0x05
    27a6:	9e 81       	ldd	r25, Y+6	; 0x06
    27a8:	9a 83       	std	Y+2, r25	; 0x02
    27aa:	89 83       	std	Y+1, r24	; 0x01
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
    27ae:	9a 81       	ldd	r25, Y+2	; 0x02
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	f1 f7       	brne	.-4      	; 0x27b0 <LCD_voidInit+0x3d4>
    27b4:	9a 83       	std	Y+2, r25	; 0x02
    27b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    27b8:	e8 96       	adiw	r28, 0x38	; 56
    27ba:	0f b6       	in	r0, 0x3f	; 63
    27bc:	f8 94       	cli
    27be:	de bf       	out	0x3e, r29	; 62
    27c0:	0f be       	out	0x3f, r0	; 63
    27c2:	cd bf       	out	0x3d, r28	; 61
    27c4:	cf 91       	pop	r28
    27c6:	df 91       	pop	r29
    27c8:	08 95       	ret

000027ca <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 Copy_U8Command)
{
    27ca:	df 93       	push	r29
    27cc:	cf 93       	push	r28
    27ce:	cd b7       	in	r28, 0x3d	; 61
    27d0:	de b7       	in	r29, 0x3e	; 62
    27d2:	2f 97       	sbiw	r28, 0x0f	; 15
    27d4:	0f b6       	in	r0, 0x3f	; 63
    27d6:	f8 94       	cli
    27d8:	de bf       	out	0x3e, r29	; 62
    27da:	0f be       	out	0x3f, r0	; 63
    27dc:	cd bf       	out	0x3d, r28	; 61
    27de:	8f 87       	std	Y+15, r24	; 0x0f
	/* RS = 0 */
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RS, DIO_LOW);
    27e0:	83 e0       	ldi	r24, 0x03	; 3
    27e2:	60 e0       	ldi	r22, 0x00	; 0
    27e4:	40 e0       	ldi	r20, 0x00	; 0
    27e6:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <DIO_voidSetPinValue>
	/* RW = 0 */
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RW, DIO_LOW);
    27ea:	83 e0       	ldi	r24, 0x03	; 3
    27ec:	61 e0       	ldi	r22, 0x01	; 1
    27ee:	40 e0       	ldi	r20, 0x00	; 0
    27f0:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <DIO_voidSetPinValue>
	/* PUT THE COMMAND ON DATA PINS */
	DIO_voidSetPortValue(LCD_DATA_PORT, Copy_U8Command);
    27f4:	82 e0       	ldi	r24, 0x02	; 2
    27f6:	6f 85       	ldd	r22, Y+15	; 0x0f
    27f8:	0e 94 bc 10 	call	0x2178	; 0x2178 <DIO_voidSetPortValue>
	/* E = 1 */
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_HIGH);
    27fc:	83 e0       	ldi	r24, 0x03	; 3
    27fe:	62 e0       	ldi	r22, 0x02	; 2
    2800:	41 e0       	ldi	r20, 0x01	; 1
    2802:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <DIO_voidSetPinValue>
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	a0 e0       	ldi	r26, 0x00	; 0
    280c:	b0 e4       	ldi	r27, 0x40	; 64
    280e:	8b 87       	std	Y+11, r24	; 0x0b
    2810:	9c 87       	std	Y+12, r25	; 0x0c
    2812:	ad 87       	std	Y+13, r26	; 0x0d
    2814:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2816:	6b 85       	ldd	r22, Y+11	; 0x0b
    2818:	7c 85       	ldd	r23, Y+12	; 0x0c
    281a:	8d 85       	ldd	r24, Y+13	; 0x0d
    281c:	9e 85       	ldd	r25, Y+14	; 0x0e
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	4a ef       	ldi	r20, 0xFA	; 250
    2824:	54 e4       	ldi	r21, 0x44	; 68
    2826:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	8f 83       	std	Y+7, r24	; 0x07
    2830:	98 87       	std	Y+8, r25	; 0x08
    2832:	a9 87       	std	Y+9, r26	; 0x09
    2834:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2836:	6f 81       	ldd	r22, Y+7	; 0x07
    2838:	78 85       	ldd	r23, Y+8	; 0x08
    283a:	89 85       	ldd	r24, Y+9	; 0x09
    283c:	9a 85       	ldd	r25, Y+10	; 0x0a
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	40 e8       	ldi	r20, 0x80	; 128
    2844:	5f e3       	ldi	r21, 0x3F	; 63
    2846:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    284a:	88 23       	and	r24, r24
    284c:	2c f4       	brge	.+10     	; 0x2858 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	9e 83       	std	Y+6, r25	; 0x06
    2854:	8d 83       	std	Y+5, r24	; 0x05
    2856:	3f c0       	rjmp	.+126    	; 0x28d6 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    2858:	6f 81       	ldd	r22, Y+7	; 0x07
    285a:	78 85       	ldd	r23, Y+8	; 0x08
    285c:	89 85       	ldd	r24, Y+9	; 0x09
    285e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	3f ef       	ldi	r19, 0xFF	; 255
    2864:	4f e7       	ldi	r20, 0x7F	; 127
    2866:	57 e4       	ldi	r21, 0x47	; 71
    2868:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    286c:	18 16       	cp	r1, r24
    286e:	4c f5       	brge	.+82     	; 0x28c2 <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2870:	6b 85       	ldd	r22, Y+11	; 0x0b
    2872:	7c 85       	ldd	r23, Y+12	; 0x0c
    2874:	8d 85       	ldd	r24, Y+13	; 0x0d
    2876:	9e 85       	ldd	r25, Y+14	; 0x0e
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	40 e2       	ldi	r20, 0x20	; 32
    287e:	51 e4       	ldi	r21, 0x41	; 65
    2880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	bc 01       	movw	r22, r24
    288a:	cd 01       	movw	r24, r26
    288c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	9e 83       	std	Y+6, r25	; 0x06
    2896:	8d 83       	std	Y+5, r24	; 0x05
    2898:	0f c0       	rjmp	.+30     	; 0x28b8 <LCD_voidSendCommand+0xee>
    289a:	88 ec       	ldi	r24, 0xC8	; 200
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	9c 83       	std	Y+4, r25	; 0x04
    28a0:	8b 83       	std	Y+3, r24	; 0x03
    28a2:	8b 81       	ldd	r24, Y+3	; 0x03
    28a4:	9c 81       	ldd	r25, Y+4	; 0x04
    28a6:	01 97       	sbiw	r24, 0x01	; 1
    28a8:	f1 f7       	brne	.-4      	; 0x28a6 <LCD_voidSendCommand+0xdc>
    28aa:	9c 83       	std	Y+4, r25	; 0x04
    28ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ae:	8d 81       	ldd	r24, Y+5	; 0x05
    28b0:	9e 81       	ldd	r25, Y+6	; 0x06
    28b2:	01 97       	sbiw	r24, 0x01	; 1
    28b4:	9e 83       	std	Y+6, r25	; 0x06
    28b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ba:	9e 81       	ldd	r25, Y+6	; 0x06
    28bc:	00 97       	sbiw	r24, 0x00	; 0
    28be:	69 f7       	brne	.-38     	; 0x289a <LCD_voidSendCommand+0xd0>
    28c0:	14 c0       	rjmp	.+40     	; 0x28ea <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c2:	6f 81       	ldd	r22, Y+7	; 0x07
    28c4:	78 85       	ldd	r23, Y+8	; 0x08
    28c6:	89 85       	ldd	r24, Y+9	; 0x09
    28c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	9e 83       	std	Y+6, r25	; 0x06
    28d4:	8d 83       	std	Y+5, r24	; 0x05
    28d6:	8d 81       	ldd	r24, Y+5	; 0x05
    28d8:	9e 81       	ldd	r25, Y+6	; 0x06
    28da:	9a 83       	std	Y+2, r25	; 0x02
    28dc:	89 83       	std	Y+1, r24	; 0x01
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	9a 81       	ldd	r25, Y+2	; 0x02
    28e2:	01 97       	sbiw	r24, 0x01	; 1
    28e4:	f1 f7       	brne	.-4      	; 0x28e2 <LCD_voidSendCommand+0x118>
    28e6:	9a 83       	std	Y+2, r25	; 0x02
    28e8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/* E = 0 */
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_LOW);
    28ea:	83 e0       	ldi	r24, 0x03	; 3
    28ec:	62 e0       	ldi	r22, 0x02	; 2
    28ee:	40 e0       	ldi	r20, 0x00	; 0
    28f0:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <DIO_voidSetPinValue>

}
    28f4:	2f 96       	adiw	r28, 0x0f	; 15
    28f6:	0f b6       	in	r0, 0x3f	; 63
    28f8:	f8 94       	cli
    28fa:	de bf       	out	0x3e, r29	; 62
    28fc:	0f be       	out	0x3f, r0	; 63
    28fe:	cd bf       	out	0x3d, r28	; 61
    2900:	cf 91       	pop	r28
    2902:	df 91       	pop	r29
    2904:	08 95       	ret

00002906 <LCD_voidSendChar>:

void LCD_voidSendChar (u8 Copy_U8Data)
{
    2906:	df 93       	push	r29
    2908:	cf 93       	push	r28
    290a:	cd b7       	in	r28, 0x3d	; 61
    290c:	de b7       	in	r29, 0x3e	; 62
    290e:	2f 97       	sbiw	r28, 0x0f	; 15
    2910:	0f b6       	in	r0, 0x3f	; 63
    2912:	f8 94       	cli
    2914:	de bf       	out	0x3e, r29	; 62
    2916:	0f be       	out	0x3f, r0	; 63
    2918:	cd bf       	out	0x3d, r28	; 61
    291a:	8f 87       	std	Y+15, r24	; 0x0f
	/* RS = 1 */
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RS, DIO_HIGH);
    291c:	83 e0       	ldi	r24, 0x03	; 3
    291e:	60 e0       	ldi	r22, 0x00	; 0
    2920:	41 e0       	ldi	r20, 0x01	; 1
    2922:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <DIO_voidSetPinValue>
    /* RW = 0 */
    DIO_voidSetPinValue(LCD_CONTROL_PORT, RW, DIO_LOW);
    2926:	83 e0       	ldi	r24, 0x03	; 3
    2928:	61 e0       	ldi	r22, 0x01	; 1
    292a:	40 e0       	ldi	r20, 0x00	; 0
    292c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <DIO_voidSetPinValue>
    /* PUT THE COMMAND ON DATA PINS */
    DIO_voidSetPortValue(LCD_DATA_PORT, Copy_U8Data);
    2930:	82 e0       	ldi	r24, 0x02	; 2
    2932:	6f 85       	ldd	r22, Y+15	; 0x0f
    2934:	0e 94 bc 10 	call	0x2178	; 0x2178 <DIO_voidSetPortValue>
    /* E = 1 */
    DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_HIGH);
    2938:	83 e0       	ldi	r24, 0x03	; 3
    293a:	62 e0       	ldi	r22, 0x02	; 2
    293c:	41 e0       	ldi	r20, 0x01	; 1
    293e:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <DIO_voidSetPinValue>
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	a0 e0       	ldi	r26, 0x00	; 0
    2948:	b0 e4       	ldi	r27, 0x40	; 64
    294a:	8b 87       	std	Y+11, r24	; 0x0b
    294c:	9c 87       	std	Y+12, r25	; 0x0c
    294e:	ad 87       	std	Y+13, r26	; 0x0d
    2950:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2952:	6b 85       	ldd	r22, Y+11	; 0x0b
    2954:	7c 85       	ldd	r23, Y+12	; 0x0c
    2956:	8d 85       	ldd	r24, Y+13	; 0x0d
    2958:	9e 85       	ldd	r25, Y+14	; 0x0e
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	4a ef       	ldi	r20, 0xFA	; 250
    2960:	54 e4       	ldi	r21, 0x44	; 68
    2962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	8f 83       	std	Y+7, r24	; 0x07
    296c:	98 87       	std	Y+8, r25	; 0x08
    296e:	a9 87       	std	Y+9, r26	; 0x09
    2970:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2972:	6f 81       	ldd	r22, Y+7	; 0x07
    2974:	78 85       	ldd	r23, Y+8	; 0x08
    2976:	89 85       	ldd	r24, Y+9	; 0x09
    2978:	9a 85       	ldd	r25, Y+10	; 0x0a
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	40 e8       	ldi	r20, 0x80	; 128
    2980:	5f e3       	ldi	r21, 0x3F	; 63
    2982:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2986:	88 23       	and	r24, r24
    2988:	2c f4       	brge	.+10     	; 0x2994 <LCD_voidSendChar+0x8e>
		__ticks = 1;
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	9e 83       	std	Y+6, r25	; 0x06
    2990:	8d 83       	std	Y+5, r24	; 0x05
    2992:	3f c0       	rjmp	.+126    	; 0x2a12 <LCD_voidSendChar+0x10c>
	else if (__tmp > 65535)
    2994:	6f 81       	ldd	r22, Y+7	; 0x07
    2996:	78 85       	ldd	r23, Y+8	; 0x08
    2998:	89 85       	ldd	r24, Y+9	; 0x09
    299a:	9a 85       	ldd	r25, Y+10	; 0x0a
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	3f ef       	ldi	r19, 0xFF	; 255
    29a0:	4f e7       	ldi	r20, 0x7F	; 127
    29a2:	57 e4       	ldi	r21, 0x47	; 71
    29a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29a8:	18 16       	cp	r1, r24
    29aa:	4c f5       	brge	.+82     	; 0x29fe <LCD_voidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    29b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	40 e2       	ldi	r20, 0x20	; 32
    29ba:	51 e4       	ldi	r21, 0x41	; 65
    29bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	bc 01       	movw	r22, r24
    29c6:	cd 01       	movw	r24, r26
    29c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	9e 83       	std	Y+6, r25	; 0x06
    29d2:	8d 83       	std	Y+5, r24	; 0x05
    29d4:	0f c0       	rjmp	.+30     	; 0x29f4 <LCD_voidSendChar+0xee>
    29d6:	88 ec       	ldi	r24, 0xC8	; 200
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	9c 83       	std	Y+4, r25	; 0x04
    29dc:	8b 83       	std	Y+3, r24	; 0x03
    29de:	8b 81       	ldd	r24, Y+3	; 0x03
    29e0:	9c 81       	ldd	r25, Y+4	; 0x04
    29e2:	01 97       	sbiw	r24, 0x01	; 1
    29e4:	f1 f7       	brne	.-4      	; 0x29e2 <LCD_voidSendChar+0xdc>
    29e6:	9c 83       	std	Y+4, r25	; 0x04
    29e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ea:	8d 81       	ldd	r24, Y+5	; 0x05
    29ec:	9e 81       	ldd	r25, Y+6	; 0x06
    29ee:	01 97       	sbiw	r24, 0x01	; 1
    29f0:	9e 83       	std	Y+6, r25	; 0x06
    29f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f4:	8d 81       	ldd	r24, Y+5	; 0x05
    29f6:	9e 81       	ldd	r25, Y+6	; 0x06
    29f8:	00 97       	sbiw	r24, 0x00	; 0
    29fa:	69 f7       	brne	.-38     	; 0x29d6 <LCD_voidSendChar+0xd0>
    29fc:	14 c0       	rjmp	.+40     	; 0x2a26 <LCD_voidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2a00:	78 85       	ldd	r23, Y+8	; 0x08
    2a02:	89 85       	ldd	r24, Y+9	; 0x09
    2a04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	9e 83       	std	Y+6, r25	; 0x06
    2a10:	8d 83       	std	Y+5, r24	; 0x05
    2a12:	8d 81       	ldd	r24, Y+5	; 0x05
    2a14:	9e 81       	ldd	r25, Y+6	; 0x06
    2a16:	9a 83       	std	Y+2, r25	; 0x02
    2a18:	89 83       	std	Y+1, r24	; 0x01
    2a1a:	89 81       	ldd	r24, Y+1	; 0x01
    2a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a1e:	01 97       	sbiw	r24, 0x01	; 1
    2a20:	f1 f7       	brne	.-4      	; 0x2a1e <LCD_voidSendChar+0x118>
    2a22:	9a 83       	std	Y+2, r25	; 0x02
    2a24:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    /* E = 0 */
    DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_LOW);
    2a26:	83 e0       	ldi	r24, 0x03	; 3
    2a28:	62 e0       	ldi	r22, 0x02	; 2
    2a2a:	40 e0       	ldi	r20, 0x00	; 0
    2a2c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <DIO_voidSetPinValue>
}
    2a30:	2f 96       	adiw	r28, 0x0f	; 15
    2a32:	0f b6       	in	r0, 0x3f	; 63
    2a34:	f8 94       	cli
    2a36:	de bf       	out	0x3e, r29	; 62
    2a38:	0f be       	out	0x3f, r0	; 63
    2a3a:	cd bf       	out	0x3d, r28	; 61
    2a3c:	cf 91       	pop	r28
    2a3e:	df 91       	pop	r29
    2a40:	08 95       	ret

00002a42 <LCD_voidSendString>:

void LCD_voidSendString (u8 *Copy_U8String)
{
    2a42:	df 93       	push	r29
    2a44:	cf 93       	push	r28
    2a46:	00 d0       	rcall	.+0      	; 0x2a48 <LCD_voidSendString+0x6>
    2a48:	0f 92       	push	r0
    2a4a:	cd b7       	in	r28, 0x3d	; 61
    2a4c:	de b7       	in	r29, 0x3e	; 62
    2a4e:	9b 83       	std	Y+3, r25	; 0x03
    2a50:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8Counter ;
	for (Local_U8Counter = 0 ; Copy_U8String[Local_U8Counter] != '\0' ; Local_U8Counter++)
    2a52:	19 82       	std	Y+1, r1	; 0x01
    2a54:	0e c0       	rjmp	.+28     	; 0x2a72 <LCD_voidSendString+0x30>
	{
		LCD_voidSendChar(Copy_U8String[Local_U8Counter]);
    2a56:	89 81       	ldd	r24, Y+1	; 0x01
    2a58:	28 2f       	mov	r18, r24
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a60:	fc 01       	movw	r30, r24
    2a62:	e2 0f       	add	r30, r18
    2a64:	f3 1f       	adc	r31, r19
    2a66:	80 81       	ld	r24, Z
    2a68:	0e 94 83 14 	call	0x2906	; 0x2906 <LCD_voidSendChar>
}

void LCD_voidSendString (u8 *Copy_U8String)
{
	u8 Local_U8Counter ;
	for (Local_U8Counter = 0 ; Copy_U8String[Local_U8Counter] != '\0' ; Local_U8Counter++)
    2a6c:	89 81       	ldd	r24, Y+1	; 0x01
    2a6e:	8f 5f       	subi	r24, 0xFF	; 255
    2a70:	89 83       	std	Y+1, r24	; 0x01
    2a72:	89 81       	ldd	r24, Y+1	; 0x01
    2a74:	28 2f       	mov	r18, r24
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a7c:	fc 01       	movw	r30, r24
    2a7e:	e2 0f       	add	r30, r18
    2a80:	f3 1f       	adc	r31, r19
    2a82:	80 81       	ld	r24, Z
    2a84:	88 23       	and	r24, r24
    2a86:	39 f7       	brne	.-50     	; 0x2a56 <LCD_voidSendString+0x14>
	{
		LCD_voidSendChar(Copy_U8String[Local_U8Counter]);
	}
		
}
    2a88:	0f 90       	pop	r0
    2a8a:	0f 90       	pop	r0
    2a8c:	0f 90       	pop	r0
    2a8e:	cf 91       	pop	r28
    2a90:	df 91       	pop	r29
    2a92:	08 95       	ret

00002a94 <LCD_voidSetLocation>:
void LCD_voidSetLocation (u8 Copy_U8LineNum , u8 Copy_U8CharNum)
{
    2a94:	df 93       	push	r29
    2a96:	cf 93       	push	r28
    2a98:	00 d0       	rcall	.+0      	; 0x2a9a <LCD_voidSetLocation+0x6>
    2a9a:	00 d0       	rcall	.+0      	; 0x2a9c <LCD_voidSetLocation+0x8>
    2a9c:	cd b7       	in	r28, 0x3d	; 61
    2a9e:	de b7       	in	r29, 0x3e	; 62
    2aa0:	89 83       	std	Y+1, r24	; 0x01
    2aa2:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_U8LineNum)
    2aa4:	89 81       	ldd	r24, Y+1	; 0x01
    2aa6:	28 2f       	mov	r18, r24
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	3c 83       	std	Y+4, r19	; 0x04
    2aac:	2b 83       	std	Y+3, r18	; 0x03
    2aae:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab2:	81 30       	cpi	r24, 0x01	; 1
    2ab4:	91 05       	cpc	r25, r1
    2ab6:	31 f0       	breq	.+12     	; 0x2ac4 <LCD_voidSetLocation+0x30>
    2ab8:	2b 81       	ldd	r18, Y+3	; 0x03
    2aba:	3c 81       	ldd	r19, Y+4	; 0x04
    2abc:	22 30       	cpi	r18, 0x02	; 2
    2abe:	31 05       	cpc	r19, r1
    2ac0:	31 f0       	breq	.+12     	; 0x2ace <LCD_voidSetLocation+0x3a>
    2ac2:	09 c0       	rjmp	.+18     	; 0x2ad6 <LCD_voidSetLocation+0x42>
	{
		case LCD_U8_LINE1 : LCD_voidSendCommand(0x80+Copy_U8CharNum); break ;
    2ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac6:	80 58       	subi	r24, 0x80	; 128
    2ac8:	0e 94 e5 13 	call	0x27ca	; 0x27ca <LCD_voidSendCommand>
    2acc:	04 c0       	rjmp	.+8      	; 0x2ad6 <LCD_voidSetLocation+0x42>
		
		case LCD_U8_LINE2 : LCD_voidSendCommand(0xc0+Copy_U8CharNum); break ;
    2ace:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad0:	80 54       	subi	r24, 0x40	; 64
    2ad2:	0e 94 e5 13 	call	0x27ca	; 0x27ca <LCD_voidSendCommand>
	}
}
    2ad6:	0f 90       	pop	r0
    2ad8:	0f 90       	pop	r0
    2ada:	0f 90       	pop	r0
    2adc:	0f 90       	pop	r0
    2ade:	cf 91       	pop	r28
    2ae0:	df 91       	pop	r29
    2ae2:	08 95       	ret

00002ae4 <LCD_voidSendNumber>:

void LCD_voidSendNumber(u32 Copy_u32Number)
{
    2ae4:	df 93       	push	r29
    2ae6:	cf 93       	push	r28
    2ae8:	cd b7       	in	r28, 0x3d	; 61
    2aea:	de b7       	in	r29, 0x3e	; 62
    2aec:	2c 97       	sbiw	r28, 0x0c	; 12
    2aee:	0f b6       	in	r0, 0x3f	; 63
    2af0:	f8 94       	cli
    2af2:	de bf       	out	0x3e, r29	; 62
    2af4:	0f be       	out	0x3f, r0	; 63
    2af6:	cd bf       	out	0x3d, r28	; 61
    2af8:	69 87       	std	Y+9, r22	; 0x09
    2afa:	7a 87       	std	Y+10, r23	; 0x0a
    2afc:	8b 87       	std	Y+11, r24	; 0x0b
    2afe:	9c 87       	std	Y+12, r25	; 0x0c
	u32 Local_u32Counter=1 , Local_u32Digit=0;
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	a0 e0       	ldi	r26, 0x00	; 0
    2b06:	b0 e0       	ldi	r27, 0x00	; 0
    2b08:	8d 83       	std	Y+5, r24	; 0x05
    2b0a:	9e 83       	std	Y+6, r25	; 0x06
    2b0c:	af 83       	std	Y+7, r26	; 0x07
    2b0e:	b8 87       	std	Y+8, r27	; 0x08
    2b10:	19 82       	std	Y+1, r1	; 0x01
    2b12:	1a 82       	std	Y+2, r1	; 0x02
    2b14:	1b 82       	std	Y+3, r1	; 0x03
    2b16:	1c 82       	std	Y+4, r1	; 0x04

	if (Copy_u32Number == 0)
    2b18:	89 85       	ldd	r24, Y+9	; 0x09
    2b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b1c:	ab 85       	ldd	r26, Y+11	; 0x0b
    2b1e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2b20:	00 97       	sbiw	r24, 0x00	; 0
    2b22:	a1 05       	cpc	r26, r1
    2b24:	b1 05       	cpc	r27, r1
    2b26:	b1 f4       	brne	.+44     	; 0x2b54 <LCD_voidSendNumber+0x70>
		LCD_voidSendChar('0');
    2b28:	80 e3       	ldi	r24, 0x30	; 48
    2b2a:	0e 94 83 14 	call	0x2906	; 0x2906 <LCD_voidSendChar>
    2b2e:	7a c0       	rjmp	.+244    	; 0x2c24 <LCD_voidSendNumber+0x140>
	else
	{
		while (Copy_u32Number/Local_u32Counter != 0)
		{
			Local_u32Counter *= 10;
    2b30:	8d 81       	ldd	r24, Y+5	; 0x05
    2b32:	9e 81       	ldd	r25, Y+6	; 0x06
    2b34:	af 81       	ldd	r26, Y+7	; 0x07
    2b36:	b8 85       	ldd	r27, Y+8	; 0x08
    2b38:	2a e0       	ldi	r18, 0x0A	; 10
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	40 e0       	ldi	r20, 0x00	; 0
    2b3e:	50 e0       	ldi	r21, 0x00	; 0
    2b40:	bc 01       	movw	r22, r24
    2b42:	cd 01       	movw	r24, r26
    2b44:	0e 94 c9 1b 	call	0x3792	; 0x3792 <__mulsi3>
    2b48:	dc 01       	movw	r26, r24
    2b4a:	cb 01       	movw	r24, r22
    2b4c:	8d 83       	std	Y+5, r24	; 0x05
    2b4e:	9e 83       	std	Y+6, r25	; 0x06
    2b50:	af 83       	std	Y+7, r26	; 0x07
    2b52:	b8 87       	std	Y+8, r27	; 0x08

	if (Copy_u32Number == 0)
		LCD_voidSendChar('0');
	else
	{
		while (Copy_u32Number/Local_u32Counter != 0)
    2b54:	89 85       	ldd	r24, Y+9	; 0x09
    2b56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b58:	ab 85       	ldd	r26, Y+11	; 0x0b
    2b5a:	bc 85       	ldd	r27, Y+12	; 0x0c
    2b5c:	2d 81       	ldd	r18, Y+5	; 0x05
    2b5e:	3e 81       	ldd	r19, Y+6	; 0x06
    2b60:	4f 81       	ldd	r20, Y+7	; 0x07
    2b62:	58 85       	ldd	r21, Y+8	; 0x08
    2b64:	bc 01       	movw	r22, r24
    2b66:	cd 01       	movw	r24, r26
    2b68:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <__udivmodsi4>
    2b6c:	da 01       	movw	r26, r20
    2b6e:	c9 01       	movw	r24, r18
    2b70:	00 97       	sbiw	r24, 0x00	; 0
    2b72:	a1 05       	cpc	r26, r1
    2b74:	b1 05       	cpc	r27, r1
    2b76:	e1 f6       	brne	.-72     	; 0x2b30 <LCD_voidSendNumber+0x4c>
		{
			Local_u32Counter *= 10;
		}
		Local_u32Counter /=10;
    2b78:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7c:	af 81       	ldd	r26, Y+7	; 0x07
    2b7e:	b8 85       	ldd	r27, Y+8	; 0x08
    2b80:	2a e0       	ldi	r18, 0x0A	; 10
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	40 e0       	ldi	r20, 0x00	; 0
    2b86:	50 e0       	ldi	r21, 0x00	; 0
    2b88:	bc 01       	movw	r22, r24
    2b8a:	cd 01       	movw	r24, r26
    2b8c:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <__udivmodsi4>
    2b90:	da 01       	movw	r26, r20
    2b92:	c9 01       	movw	r24, r18
    2b94:	8d 83       	std	Y+5, r24	; 0x05
    2b96:	9e 83       	std	Y+6, r25	; 0x06
    2b98:	af 83       	std	Y+7, r26	; 0x07
    2b9a:	b8 87       	std	Y+8, r27	; 0x08
    2b9c:	3a c0       	rjmp	.+116    	; 0x2c12 <LCD_voidSendNumber+0x12e>

		while (Local_u32Counter != 0)
		{
			Local_u32Digit = Copy_u32Number/Local_u32Counter;
    2b9e:	89 85       	ldd	r24, Y+9	; 0x09
    2ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba2:	ab 85       	ldd	r26, Y+11	; 0x0b
    2ba4:	bc 85       	ldd	r27, Y+12	; 0x0c
    2ba6:	2d 81       	ldd	r18, Y+5	; 0x05
    2ba8:	3e 81       	ldd	r19, Y+6	; 0x06
    2baa:	4f 81       	ldd	r20, Y+7	; 0x07
    2bac:	58 85       	ldd	r21, Y+8	; 0x08
    2bae:	bc 01       	movw	r22, r24
    2bb0:	cd 01       	movw	r24, r26
    2bb2:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <__udivmodsi4>
    2bb6:	da 01       	movw	r26, r20
    2bb8:	c9 01       	movw	r24, r18
    2bba:	89 83       	std	Y+1, r24	; 0x01
    2bbc:	9a 83       	std	Y+2, r25	; 0x02
    2bbe:	ab 83       	std	Y+3, r26	; 0x03
    2bc0:	bc 83       	std	Y+4, r27	; 0x04

			LCD_voidSendChar(Local_u32Digit + '0');
    2bc2:	89 81       	ldd	r24, Y+1	; 0x01
    2bc4:	80 5d       	subi	r24, 0xD0	; 208
    2bc6:	0e 94 83 14 	call	0x2906	; 0x2906 <LCD_voidSendChar>

			Copy_u32Number = Copy_u32Number%Local_u32Counter;
    2bca:	89 85       	ldd	r24, Y+9	; 0x09
    2bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bce:	ab 85       	ldd	r26, Y+11	; 0x0b
    2bd0:	bc 85       	ldd	r27, Y+12	; 0x0c
    2bd2:	2d 81       	ldd	r18, Y+5	; 0x05
    2bd4:	3e 81       	ldd	r19, Y+6	; 0x06
    2bd6:	4f 81       	ldd	r20, Y+7	; 0x07
    2bd8:	58 85       	ldd	r21, Y+8	; 0x08
    2bda:	bc 01       	movw	r22, r24
    2bdc:	cd 01       	movw	r24, r26
    2bde:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <__udivmodsi4>
    2be2:	dc 01       	movw	r26, r24
    2be4:	cb 01       	movw	r24, r22
    2be6:	89 87       	std	Y+9, r24	; 0x09
    2be8:	9a 87       	std	Y+10, r25	; 0x0a
    2bea:	ab 87       	std	Y+11, r26	; 0x0b
    2bec:	bc 87       	std	Y+12, r27	; 0x0c

			Local_u32Counter /= 10;
    2bee:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf2:	af 81       	ldd	r26, Y+7	; 0x07
    2bf4:	b8 85       	ldd	r27, Y+8	; 0x08
    2bf6:	2a e0       	ldi	r18, 0x0A	; 10
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	40 e0       	ldi	r20, 0x00	; 0
    2bfc:	50 e0       	ldi	r21, 0x00	; 0
    2bfe:	bc 01       	movw	r22, r24
    2c00:	cd 01       	movw	r24, r26
    2c02:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <__udivmodsi4>
    2c06:	da 01       	movw	r26, r20
    2c08:	c9 01       	movw	r24, r18
    2c0a:	8d 83       	std	Y+5, r24	; 0x05
    2c0c:	9e 83       	std	Y+6, r25	; 0x06
    2c0e:	af 83       	std	Y+7, r26	; 0x07
    2c10:	b8 87       	std	Y+8, r27	; 0x08
		{
			Local_u32Counter *= 10;
		}
		Local_u32Counter /=10;

		while (Local_u32Counter != 0)
    2c12:	8d 81       	ldd	r24, Y+5	; 0x05
    2c14:	9e 81       	ldd	r25, Y+6	; 0x06
    2c16:	af 81       	ldd	r26, Y+7	; 0x07
    2c18:	b8 85       	ldd	r27, Y+8	; 0x08
    2c1a:	00 97       	sbiw	r24, 0x00	; 0
    2c1c:	a1 05       	cpc	r26, r1
    2c1e:	b1 05       	cpc	r27, r1
    2c20:	09 f0       	breq	.+2      	; 0x2c24 <LCD_voidSendNumber+0x140>
    2c22:	bd cf       	rjmp	.-134    	; 0x2b9e <LCD_voidSendNumber+0xba>
			Copy_u32Number = Copy_u32Number%Local_u32Counter;

			Local_u32Counter /= 10;
		}
	}
}
    2c24:	2c 96       	adiw	r28, 0x0c	; 12
    2c26:	0f b6       	in	r0, 0x3f	; 63
    2c28:	f8 94       	cli
    2c2a:	de bf       	out	0x3e, r29	; 62
    2c2c:	0f be       	out	0x3f, r0	; 63
    2c2e:	cd bf       	out	0x3d, r28	; 61
    2c30:	cf 91       	pop	r28
    2c32:	df 91       	pop	r29
    2c34:	08 95       	ret

00002c36 <HKP_voidInit>:

u8 Row[4] = {HKP_R1_PIN, HKP_R2_PIN, HKP_R3_PIN, HKP_R4_PIN};
u8 Col[4] = {HKP_C1_PIN, HKP_C2_PIN, HKP_C3_PIN, HKP_C4_PIN};
u8 Keys[4][4] = HKP_KEYS;

void HKP_voidInit(void){
    2c36:	df 93       	push	r29
    2c38:	cf 93       	push	r28
    2c3a:	cd b7       	in	r28, 0x3d	; 61
    2c3c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDirection(HKP_PORT,0b00001111);
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	6f e0       	ldi	r22, 0x0F	; 15
    2c42:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <DIO_voidSetPortDirection>
	DIO_voidSetPortValue(HKP_PORT,HKP_KEY_NOT_PRESSED);
    2c46:	81 e0       	ldi	r24, 0x01	; 1
    2c48:	6f ef       	ldi	r22, 0xFF	; 255
    2c4a:	0e 94 bc 10 	call	0x2178	; 0x2178 <DIO_voidSetPortValue>
}
    2c4e:	cf 91       	pop	r28
    2c50:	df 91       	pop	r29
    2c52:	08 95       	ret

00002c54 <HKP_u8GetKeyValue>:

u8 HKP_u8GetKeyValue(void) {
    2c54:	df 93       	push	r29
    2c56:	cf 93       	push	r28
    2c58:	cd b7       	in	r28, 0x3d	; 61
    2c5a:	de b7       	in	r29, 0x3e	; 62
    2c5c:	61 97       	sbiw	r28, 0x11	; 17
    2c5e:	0f b6       	in	r0, 0x3f	; 63
    2c60:	f8 94       	cli
    2c62:	de bf       	out	0x3e, r29	; 62
    2c64:	0f be       	out	0x3f, r0	; 63
    2c66:	cd bf       	out	0x3d, r28	; 61
    u8 Local_u8RowsCounter, Local_u8ColsCounter;

    for (Local_u8RowsCounter = 0; Local_u8RowsCounter < 4; Local_u8RowsCounter++) {  // Change condition to < instead of <=
    2c68:	18 8a       	std	Y+16, r1	; 0x10
    2c6a:	c4 c0       	rjmp	.+392    	; 0x2df4 <HKP_u8GetKeyValue+0x1a0>

        DIO_voidSetPinValue(HKP_PORT, Row[Local_u8RowsCounter], DIO_LOW);
    2c6c:	88 89       	ldd	r24, Y+16	; 0x10
    2c6e:	88 2f       	mov	r24, r24
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	fc 01       	movw	r30, r24
    2c74:	e0 50       	subi	r30, 0x00	; 0
    2c76:	fe 4f       	sbci	r31, 0xFE	; 254
    2c78:	90 81       	ld	r25, Z
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	69 2f       	mov	r22, r25
    2c7e:	40 e0       	ldi	r20, 0x00	; 0
    2c80:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <DIO_voidSetPinValue>

        for (Local_u8ColsCounter = 0; Local_u8ColsCounter < 4; Local_u8ColsCounter++) {  // Change condition to < instead of <=
    2c84:	1f 86       	std	Y+15, r1	; 0x0f
    2c86:	a3 c0       	rjmp	.+326    	; 0x2dce <HKP_u8GetKeyValue+0x17a>
            if (DIO_u8GetPinValue(HKP_PORT, Col[Local_u8ColsCounter]) == 0) {
    2c88:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c8a:	88 2f       	mov	r24, r24
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	fc 01       	movw	r30, r24
    2c90:	ec 5f       	subi	r30, 0xFC	; 252
    2c92:	fd 4f       	sbci	r31, 0xFD	; 253
    2c94:	90 81       	ld	r25, Z
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	69 2f       	mov	r22, r25
    2c9a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <DIO_u8GetPinValue>
    2c9e:	88 23       	and	r24, r24
    2ca0:	09 f0       	breq	.+2      	; 0x2ca4 <HKP_u8GetKeyValue+0x50>
    2ca2:	92 c0       	rjmp	.+292    	; 0x2dc8 <HKP_u8GetKeyValue+0x174>
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	a0 ea       	ldi	r26, 0xA0	; 160
    2caa:	b1 e4       	ldi	r27, 0x41	; 65
    2cac:	8b 87       	std	Y+11, r24	; 0x0b
    2cae:	9c 87       	std	Y+12, r25	; 0x0c
    2cb0:	ad 87       	std	Y+13, r26	; 0x0d
    2cb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cba:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	4a ef       	ldi	r20, 0xFA	; 250
    2cc2:	54 e4       	ldi	r21, 0x44	; 68
    2cc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc8:	dc 01       	movw	r26, r24
    2cca:	cb 01       	movw	r24, r22
    2ccc:	8f 83       	std	Y+7, r24	; 0x07
    2cce:	98 87       	std	Y+8, r25	; 0x08
    2cd0:	a9 87       	std	Y+9, r26	; 0x09
    2cd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cd4:	6f 81       	ldd	r22, Y+7	; 0x07
    2cd6:	78 85       	ldd	r23, Y+8	; 0x08
    2cd8:	89 85       	ldd	r24, Y+9	; 0x09
    2cda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cdc:	20 e0       	ldi	r18, 0x00	; 0
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	40 e8       	ldi	r20, 0x80	; 128
    2ce2:	5f e3       	ldi	r21, 0x3F	; 63
    2ce4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ce8:	88 23       	and	r24, r24
    2cea:	2c f4       	brge	.+10     	; 0x2cf6 <HKP_u8GetKeyValue+0xa2>
		__ticks = 1;
    2cec:	81 e0       	ldi	r24, 0x01	; 1
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	9e 83       	std	Y+6, r25	; 0x06
    2cf2:	8d 83       	std	Y+5, r24	; 0x05
    2cf4:	3f c0       	rjmp	.+126    	; 0x2d74 <HKP_u8GetKeyValue+0x120>
	else if (__tmp > 65535)
    2cf6:	6f 81       	ldd	r22, Y+7	; 0x07
    2cf8:	78 85       	ldd	r23, Y+8	; 0x08
    2cfa:	89 85       	ldd	r24, Y+9	; 0x09
    2cfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	3f ef       	ldi	r19, 0xFF	; 255
    2d02:	4f e7       	ldi	r20, 0x7F	; 127
    2d04:	57 e4       	ldi	r21, 0x47	; 71
    2d06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d0a:	18 16       	cp	r1, r24
    2d0c:	4c f5       	brge	.+82     	; 0x2d60 <HKP_u8GetKeyValue+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d10:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d12:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d14:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	40 e2       	ldi	r20, 0x20	; 32
    2d1c:	51 e4       	ldi	r21, 0x41	; 65
    2d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	bc 01       	movw	r22, r24
    2d28:	cd 01       	movw	r24, r26
    2d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	9e 83       	std	Y+6, r25	; 0x06
    2d34:	8d 83       	std	Y+5, r24	; 0x05
    2d36:	0f c0       	rjmp	.+30     	; 0x2d56 <HKP_u8GetKeyValue+0x102>
    2d38:	88 ec       	ldi	r24, 0xC8	; 200
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	9c 83       	std	Y+4, r25	; 0x04
    2d3e:	8b 83       	std	Y+3, r24	; 0x03
    2d40:	8b 81       	ldd	r24, Y+3	; 0x03
    2d42:	9c 81       	ldd	r25, Y+4	; 0x04
    2d44:	01 97       	sbiw	r24, 0x01	; 1
    2d46:	f1 f7       	brne	.-4      	; 0x2d44 <HKP_u8GetKeyValue+0xf0>
    2d48:	9c 83       	std	Y+4, r25	; 0x04
    2d4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d50:	01 97       	sbiw	r24, 0x01	; 1
    2d52:	9e 83       	std	Y+6, r25	; 0x06
    2d54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d56:	8d 81       	ldd	r24, Y+5	; 0x05
    2d58:	9e 81       	ldd	r25, Y+6	; 0x06
    2d5a:	00 97       	sbiw	r24, 0x00	; 0
    2d5c:	69 f7       	brne	.-38     	; 0x2d38 <HKP_u8GetKeyValue+0xe4>
    2d5e:	14 c0       	rjmp	.+40     	; 0x2d88 <HKP_u8GetKeyValue+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d60:	6f 81       	ldd	r22, Y+7	; 0x07
    2d62:	78 85       	ldd	r23, Y+8	; 0x08
    2d64:	89 85       	ldd	r24, Y+9	; 0x09
    2d66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d6c:	dc 01       	movw	r26, r24
    2d6e:	cb 01       	movw	r24, r22
    2d70:	9e 83       	std	Y+6, r25	; 0x06
    2d72:	8d 83       	std	Y+5, r24	; 0x05
    2d74:	8d 81       	ldd	r24, Y+5	; 0x05
    2d76:	9e 81       	ldd	r25, Y+6	; 0x06
    2d78:	9a 83       	std	Y+2, r25	; 0x02
    2d7a:	89 83       	std	Y+1, r24	; 0x01
    2d7c:	89 81       	ldd	r24, Y+1	; 0x01
    2d7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d80:	01 97       	sbiw	r24, 0x01	; 1
    2d82:	f1 f7       	brne	.-4      	; 0x2d80 <HKP_u8GetKeyValue+0x12c>
    2d84:	9a 83       	std	Y+2, r25	; 0x02
    2d86:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(20);
                while (DIO_u8GetPinValue(HKP_PORT, Col[Local_u8ColsCounter]) == 0) {
    2d88:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d8a:	88 2f       	mov	r24, r24
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	fc 01       	movw	r30, r24
    2d90:	ec 5f       	subi	r30, 0xFC	; 252
    2d92:	fd 4f       	sbci	r31, 0xFD	; 253
    2d94:	90 81       	ld	r25, Z
    2d96:	81 e0       	ldi	r24, 0x01	; 1
    2d98:	69 2f       	mov	r22, r25
    2d9a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <DIO_u8GetPinValue>
    2d9e:	88 23       	and	r24, r24
    2da0:	99 f3       	breq	.-26     	; 0x2d88 <HKP_u8GetKeyValue+0x134>
                    /*Do Nothing*/
                }
                return Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    2da2:	88 89       	ldd	r24, Y+16	; 0x10
    2da4:	48 2f       	mov	r20, r24
    2da6:	50 e0       	ldi	r21, 0x00	; 0
    2da8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2daa:	28 2f       	mov	r18, r24
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	ca 01       	movw	r24, r20
    2db0:	88 0f       	add	r24, r24
    2db2:	99 1f       	adc	r25, r25
    2db4:	88 0f       	add	r24, r24
    2db6:	99 1f       	adc	r25, r25
    2db8:	82 0f       	add	r24, r18
    2dba:	93 1f       	adc	r25, r19
    2dbc:	fc 01       	movw	r30, r24
    2dbe:	e8 5f       	subi	r30, 0xF8	; 248
    2dc0:	fd 4f       	sbci	r31, 0xFD	; 253
    2dc2:	80 81       	ld	r24, Z
    2dc4:	89 8b       	std	Y+17, r24	; 0x11
    2dc6:	1c c0       	rjmp	.+56     	; 0x2e00 <HKP_u8GetKeyValue+0x1ac>

    for (Local_u8RowsCounter = 0; Local_u8RowsCounter < 4; Local_u8RowsCounter++) {  // Change condition to < instead of <=

        DIO_voidSetPinValue(HKP_PORT, Row[Local_u8RowsCounter], DIO_LOW);

        for (Local_u8ColsCounter = 0; Local_u8ColsCounter < 4; Local_u8ColsCounter++) {  // Change condition to < instead of <=
    2dc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dca:	8f 5f       	subi	r24, 0xFF	; 255
    2dcc:	8f 87       	std	Y+15, r24	; 0x0f
    2dce:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dd0:	84 30       	cpi	r24, 0x04	; 4
    2dd2:	08 f4       	brcc	.+2      	; 0x2dd6 <HKP_u8GetKeyValue+0x182>
    2dd4:	59 cf       	rjmp	.-334    	; 0x2c88 <HKP_u8GetKeyValue+0x34>
                    /*Do Nothing*/
                }
                return Keys[Local_u8RowsCounter][Local_u8ColsCounter];
            }
        }
        DIO_voidSetPinValue(HKP_PORT, Row[Local_u8RowsCounter], DIO_HIGH);
    2dd6:	88 89       	ldd	r24, Y+16	; 0x10
    2dd8:	88 2f       	mov	r24, r24
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	fc 01       	movw	r30, r24
    2dde:	e0 50       	subi	r30, 0x00	; 0
    2de0:	fe 4f       	sbci	r31, 0xFE	; 254
    2de2:	90 81       	ld	r25, Z
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	69 2f       	mov	r22, r25
    2de8:	41 e0       	ldi	r20, 0x01	; 1
    2dea:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <DIO_voidSetPinValue>
}

u8 HKP_u8GetKeyValue(void) {
    u8 Local_u8RowsCounter, Local_u8ColsCounter;

    for (Local_u8RowsCounter = 0; Local_u8RowsCounter < 4; Local_u8RowsCounter++) {  // Change condition to < instead of <=
    2dee:	88 89       	ldd	r24, Y+16	; 0x10
    2df0:	8f 5f       	subi	r24, 0xFF	; 255
    2df2:	88 8b       	std	Y+16, r24	; 0x10
    2df4:	88 89       	ldd	r24, Y+16	; 0x10
    2df6:	84 30       	cpi	r24, 0x04	; 4
    2df8:	08 f4       	brcc	.+2      	; 0x2dfc <HKP_u8GetKeyValue+0x1a8>
    2dfa:	38 cf       	rjmp	.-400    	; 0x2c6c <HKP_u8GetKeyValue+0x18>
                return Keys[Local_u8RowsCounter][Local_u8ColsCounter];
            }
        }
        DIO_voidSetPinValue(HKP_PORT, Row[Local_u8RowsCounter], DIO_HIGH);
    }
    return HKP_KEY_NOT_PRESSED;
    2dfc:	8f ef       	ldi	r24, 0xFF	; 255
    2dfe:	89 8b       	std	Y+17, r24	; 0x11
    2e00:	89 89       	ldd	r24, Y+17	; 0x11
}
    2e02:	61 96       	adiw	r28, 0x11	; 17
    2e04:	0f b6       	in	r0, 0x3f	; 63
    2e06:	f8 94       	cli
    2e08:	de bf       	out	0x3e, r29	; 62
    2e0a:	0f be       	out	0x3f, r0	; 63
    2e0c:	cd bf       	out	0x3d, r28	; 61
    2e0e:	cf 91       	pop	r28
    2e10:	df 91       	pop	r29
    2e12:	08 95       	ret

00002e14 <DCMOTOR_voidInit>:
#include"DCMOTOR_Interface.h"



void DCMOTOR_voidInit(void)
{
    2e14:	df 93       	push	r29
    2e16:	cf 93       	push	r28
    2e18:	cd b7       	in	r28, 0x3d	; 61
    2e1a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DCMOTOR_PORT,DCMOTOR_PIN1,DIO_OUTPUT);
    2e1c:	83 e0       	ldi	r24, 0x03	; 3
    2e1e:	66 e0       	ldi	r22, 0x06	; 6
    2e20:	41 e0       	ldi	r20, 0x01	; 1
    2e22:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DCMOTOR_PORT,DCMOTOR_PIN2,DIO_OUTPUT);
    2e26:	83 e0       	ldi	r24, 0x03	; 3
    2e28:	67 e0       	ldi	r22, 0x07	; 7
    2e2a:	41 e0       	ldi	r20, 0x01	; 1
    2e2c:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <DIO_voidSetPinDirection>
}
    2e30:	cf 91       	pop	r28
    2e32:	df 91       	pop	r29
    2e34:	08 95       	ret

00002e36 <DCMOTOR_voidRotateCW>:
void DCMOTOR_voidRotateCW(void)
{
    2e36:	df 93       	push	r29
    2e38:	cf 93       	push	r28
    2e3a:	cd b7       	in	r28, 0x3d	; 61
    2e3c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DCMOTOR_PORT,DCMOTOR_PIN1,DIO_HIGH);   //A
    2e3e:	83 e0       	ldi	r24, 0x03	; 3
    2e40:	66 e0       	ldi	r22, 0x06	; 6
    2e42:	41 e0       	ldi	r20, 0x01	; 1
    2e44:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DCMOTOR_PORT,DCMOTOR_PIN2,DIO_LOW);    //B
    2e48:	83 e0       	ldi	r24, 0x03	; 3
    2e4a:	67 e0       	ldi	r22, 0x07	; 7
    2e4c:	40 e0       	ldi	r20, 0x00	; 0
    2e4e:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <DIO_voidSetPinValue>
}
    2e52:	cf 91       	pop	r28
    2e54:	df 91       	pop	r29
    2e56:	08 95       	ret

00002e58 <DCMOTOR_voidRotateCCW>:
void DCMOTOR_voidRotateCCW(void)
{
    2e58:	df 93       	push	r29
    2e5a:	cf 93       	push	r28
    2e5c:	cd b7       	in	r28, 0x3d	; 61
    2e5e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DCMOTOR_PORT,DCMOTOR_PIN1,DIO_LOW);   //A
    2e60:	83 e0       	ldi	r24, 0x03	; 3
    2e62:	66 e0       	ldi	r22, 0x06	; 6
    2e64:	40 e0       	ldi	r20, 0x00	; 0
    2e66:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DCMOTOR_PORT,DCMOTOR_PIN2,DIO_HIGH);  //B
    2e6a:	83 e0       	ldi	r24, 0x03	; 3
    2e6c:	67 e0       	ldi	r22, 0x07	; 7
    2e6e:	41 e0       	ldi	r20, 0x01	; 1
    2e70:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <DIO_voidSetPinValue>
}
    2e74:	cf 91       	pop	r28
    2e76:	df 91       	pop	r29
    2e78:	08 95       	ret

00002e7a <DCMOTOR_voidStop>:
void DCMOTOR_voidStop(void)
{
    2e7a:	df 93       	push	r29
    2e7c:	cf 93       	push	r28
    2e7e:	cd b7       	in	r28, 0x3d	; 61
    2e80:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DCMOTOR_PORT,DCMOTOR_PIN1,DIO_LOW);  //A
    2e82:	83 e0       	ldi	r24, 0x03	; 3
    2e84:	66 e0       	ldi	r22, 0x06	; 6
    2e86:	40 e0       	ldi	r20, 0x00	; 0
    2e88:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DCMOTOR_PORT,DCMOTOR_PIN2,DIO_LOW);  //B
    2e8c:	83 e0       	ldi	r24, 0x03	; 3
    2e8e:	67 e0       	ldi	r22, 0x07	; 7
    2e90:	40 e0       	ldi	r20, 0x00	; 0
    2e92:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <DIO_voidSetPinValue>
}
    2e96:	cf 91       	pop	r28
    2e98:	df 91       	pop	r29
    2e9a:	08 95       	ret

00002e9c <APP_voidAppInit>:
extern u8 G_u8LCDCursor, G_u8HKPReturn, G_u8Positioner, G_u8MotorState, G_u8Counter;
extern u16 G_u16PasswordSave;


void APP_voidAppInit()
{
    2e9c:	df 93       	push	r29
    2e9e:	cf 93       	push	r28
    2ea0:	cd b7       	in	r28, 0x3d	; 61
    2ea2:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DIO_PORTA, DIO_PIN0, DIO_INPUT);
    2ea4:	80 e0       	ldi	r24, 0x00	; 0
    2ea6:	60 e0       	ldi	r22, 0x00	; 0
    2ea8:	40 e0       	ldi	r20, 0x00	; 0
    2eaa:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTA, DIO_PIN1, DIO_INPUT);
    2eae:	80 e0       	ldi	r24, 0x00	; 0
    2eb0:	61 e0       	ldi	r22, 0x01	; 1
    2eb2:	40 e0       	ldi	r20, 0x00	; 0
    2eb4:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <DIO_voidSetPinDirection>

	DIO_voidSetPinValue(DIO_PORTA, DIO_PIN0, DIO_HIGH);
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	60 e0       	ldi	r22, 0x00	; 0
    2ebc:	41 e0       	ldi	r20, 0x01	; 1
    2ebe:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTA, DIO_PIN1, DIO_HIGH);
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	61 e0       	ldi	r22, 0x01	; 1
    2ec6:	41 e0       	ldi	r20, 0x01	; 1
    2ec8:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <DIO_voidSetPinValue>

	TIMER1_voidFPWM();
    2ecc:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <TIMER1_voidFPWM>

	HKP_voidInit();
    2ed0:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <HKP_voidInit>
	LCD_voidInit();
    2ed4:	0e 94 ee 11 	call	0x23dc	; 0x23dc <LCD_voidInit>

	DCMOTOR_voidInit();
    2ed8:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <DCMOTOR_voidInit>
}
    2edc:	cf 91       	pop	r28
    2ede:	df 91       	pop	r29
    2ee0:	08 95       	ret

00002ee2 <APP_voidAppLocked>:

void APP_voidAppLocked()
{
    2ee2:	df 93       	push	r29
    2ee4:	cf 93       	push	r28
    2ee6:	cd b7       	in	r28, 0x3d	; 61
    2ee8:	de b7       	in	r29, 0x3e	; 62
    2eea:	2e 97       	sbiw	r28, 0x0e	; 14
    2eec:	0f b6       	in	r0, 0x3f	; 63
    2eee:	f8 94       	cli
    2ef0:	de bf       	out	0x3e, r29	; 62
    2ef2:	0f be       	out	0x3f, r0	; 63
    2ef4:	cd bf       	out	0x3d, r28	; 61
	DCMOTOR_voidStop();
    2ef6:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <DCMOTOR_voidStop>
	SERVO_voidSetAngle(0);
    2efa:	80 e0       	ldi	r24, 0x00	; 0
    2efc:	0e 94 cb 11 	call	0x2396	; 0x2396 <SERVO_voidSetAngle>
	G_u16PasswordSave = 0 ;
    2f00:	10 92 3e 02 	sts	0x023E, r1
    2f04:	10 92 3d 02 	sts	0x023D, r1
	G_u8LCDCursor = 0;
    2f08:	10 92 38 02 	sts	0x0238, r1
	G_u8Positioner =  LOCKED;
    2f0c:	10 92 39 02 	sts	0x0239, r1
	LCD_voidSendCommand(LCD_CLEAR);
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	0e 94 e5 13 	call	0x27ca	; 0x27ca <LCD_voidSendCommand>
    2f16:	80 e0       	ldi	r24, 0x00	; 0
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	a0 e0       	ldi	r26, 0x00	; 0
    2f1c:	b0 e4       	ldi	r27, 0x40	; 64
    2f1e:	8b 87       	std	Y+11, r24	; 0x0b
    2f20:	9c 87       	std	Y+12, r25	; 0x0c
    2f22:	ad 87       	std	Y+13, r26	; 0x0d
    2f24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f26:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f28:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	4a ef       	ldi	r20, 0xFA	; 250
    2f34:	54 e4       	ldi	r21, 0x44	; 68
    2f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f3a:	dc 01       	movw	r26, r24
    2f3c:	cb 01       	movw	r24, r22
    2f3e:	8f 83       	std	Y+7, r24	; 0x07
    2f40:	98 87       	std	Y+8, r25	; 0x08
    2f42:	a9 87       	std	Y+9, r26	; 0x09
    2f44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f46:	6f 81       	ldd	r22, Y+7	; 0x07
    2f48:	78 85       	ldd	r23, Y+8	; 0x08
    2f4a:	89 85       	ldd	r24, Y+9	; 0x09
    2f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f4e:	20 e0       	ldi	r18, 0x00	; 0
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	40 e8       	ldi	r20, 0x80	; 128
    2f54:	5f e3       	ldi	r21, 0x3F	; 63
    2f56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f5a:	88 23       	and	r24, r24
    2f5c:	2c f4       	brge	.+10     	; 0x2f68 <APP_voidAppLocked+0x86>
		__ticks = 1;
    2f5e:	81 e0       	ldi	r24, 0x01	; 1
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	9e 83       	std	Y+6, r25	; 0x06
    2f64:	8d 83       	std	Y+5, r24	; 0x05
    2f66:	3f c0       	rjmp	.+126    	; 0x2fe6 <APP_voidAppLocked+0x104>
	else if (__tmp > 65535)
    2f68:	6f 81       	ldd	r22, Y+7	; 0x07
    2f6a:	78 85       	ldd	r23, Y+8	; 0x08
    2f6c:	89 85       	ldd	r24, Y+9	; 0x09
    2f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	3f ef       	ldi	r19, 0xFF	; 255
    2f74:	4f e7       	ldi	r20, 0x7F	; 127
    2f76:	57 e4       	ldi	r21, 0x47	; 71
    2f78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f7c:	18 16       	cp	r1, r24
    2f7e:	4c f5       	brge	.+82     	; 0x2fd2 <APP_voidAppLocked+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f80:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f82:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f84:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f86:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f88:	20 e0       	ldi	r18, 0x00	; 0
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	40 e2       	ldi	r20, 0x20	; 32
    2f8e:	51 e4       	ldi	r21, 0x41	; 65
    2f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f94:	dc 01       	movw	r26, r24
    2f96:	cb 01       	movw	r24, r22
    2f98:	bc 01       	movw	r22, r24
    2f9a:	cd 01       	movw	r24, r26
    2f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa0:	dc 01       	movw	r26, r24
    2fa2:	cb 01       	movw	r24, r22
    2fa4:	9e 83       	std	Y+6, r25	; 0x06
    2fa6:	8d 83       	std	Y+5, r24	; 0x05
    2fa8:	0f c0       	rjmp	.+30     	; 0x2fc8 <APP_voidAppLocked+0xe6>
    2faa:	88 ec       	ldi	r24, 0xC8	; 200
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	9c 83       	std	Y+4, r25	; 0x04
    2fb0:	8b 83       	std	Y+3, r24	; 0x03
    2fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb6:	01 97       	sbiw	r24, 0x01	; 1
    2fb8:	f1 f7       	brne	.-4      	; 0x2fb6 <APP_voidAppLocked+0xd4>
    2fba:	9c 83       	std	Y+4, r25	; 0x04
    2fbc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc2:	01 97       	sbiw	r24, 0x01	; 1
    2fc4:	9e 83       	std	Y+6, r25	; 0x06
    2fc6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc8:	8d 81       	ldd	r24, Y+5	; 0x05
    2fca:	9e 81       	ldd	r25, Y+6	; 0x06
    2fcc:	00 97       	sbiw	r24, 0x00	; 0
    2fce:	69 f7       	brne	.-38     	; 0x2faa <APP_voidAppLocked+0xc8>
    2fd0:	14 c0       	rjmp	.+40     	; 0x2ffa <APP_voidAppLocked+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fd2:	6f 81       	ldd	r22, Y+7	; 0x07
    2fd4:	78 85       	ldd	r23, Y+8	; 0x08
    2fd6:	89 85       	ldd	r24, Y+9	; 0x09
    2fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	9e 83       	std	Y+6, r25	; 0x06
    2fe4:	8d 83       	std	Y+5, r24	; 0x05
    2fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fea:	9a 83       	std	Y+2, r25	; 0x02
    2fec:	89 83       	std	Y+1, r24	; 0x01
    2fee:	89 81       	ldd	r24, Y+1	; 0x01
    2ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff2:	01 97       	sbiw	r24, 0x01	; 1
    2ff4:	f1 f7       	brne	.-4      	; 0x2ff2 <APP_voidAppLocked+0x110>
    2ff6:	9a 83       	std	Y+2, r25	; 0x02
    2ff8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidSetLocation(LCD_U8_LINE1,0);
    2ffa:	81 e0       	ldi	r24, 0x01	; 1
    2ffc:	60 e0       	ldi	r22, 0x00	; 0
    2ffe:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <LCD_voidSetLocation>
	LCD_voidSendString("Enter Anything");
    3002:	80 e6       	ldi	r24, 0x60	; 96
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	0e 94 21 15 	call	0x2a42	; 0x2a42 <LCD_voidSendString>
	LCD_voidSetLocation(LCD_U8_LINE2,0);
    300a:	82 e0       	ldi	r24, 0x02	; 2
    300c:	60 e0       	ldi	r22, 0x00	; 0
    300e:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <LCD_voidSetLocation>
	LCD_voidSendString("to Enter Pass");
    3012:	8f e6       	ldi	r24, 0x6F	; 111
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	0e 94 21 15 	call	0x2a42	; 0x2a42 <LCD_voidSendString>
    301a:	04 c0       	rjmp	.+8      	; 0x3024 <APP_voidAppLocked+0x142>

	while (G_u8HKPReturn == HKP_KEY_NOT_PRESSED)
	{
		G_u8HKPReturn = HKP_u8GetKeyValue();
    301c:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <HKP_u8GetKeyValue>
    3020:	80 93 3a 02 	sts	0x023A, r24
	LCD_voidSetLocation(LCD_U8_LINE1,0);
	LCD_voidSendString("Enter Anything");
	LCD_voidSetLocation(LCD_U8_LINE2,0);
	LCD_voidSendString("to Enter Pass");

	while (G_u8HKPReturn == HKP_KEY_NOT_PRESSED)
    3024:	80 91 3a 02 	lds	r24, 0x023A
    3028:	8f 3f       	cpi	r24, 0xFF	; 255
    302a:	c1 f3       	breq	.-16     	; 0x301c <APP_voidAppLocked+0x13a>
	{
		G_u8HKPReturn = HKP_u8GetKeyValue();
	}
}
    302c:	2e 96       	adiw	r28, 0x0e	; 14
    302e:	0f b6       	in	r0, 0x3f	; 63
    3030:	f8 94       	cli
    3032:	de bf       	out	0x3e, r29	; 62
    3034:	0f be       	out	0x3f, r0	; 63
    3036:	cd bf       	out	0x3d, r28	; 61
    3038:	cf 91       	pop	r28
    303a:	df 91       	pop	r29
    303c:	08 95       	ret

0000303e <APP_voidAppUnlocked>:

void APP_voidAppUnlocked(void)
{
    303e:	df 93       	push	r29
    3040:	cf 93       	push	r28
    3042:	cd b7       	in	r28, 0x3d	; 61
    3044:	de b7       	in	r29, 0x3e	; 62
    3046:	6c 97       	sbiw	r28, 0x1c	; 28
    3048:	0f b6       	in	r0, 0x3f	; 63
    304a:	f8 94       	cli
    304c:	de bf       	out	0x3e, r29	; 62
    304e:	0f be       	out	0x3f, r0	; 63
    3050:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCommand(LCD_CLEAR);
    3052:	81 e0       	ldi	r24, 0x01	; 1
    3054:	0e 94 e5 13 	call	0x27ca	; 0x27ca <LCD_voidSendCommand>
    3058:	80 e0       	ldi	r24, 0x00	; 0
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	a0 e0       	ldi	r26, 0x00	; 0
    305e:	b0 e4       	ldi	r27, 0x40	; 64
    3060:	89 8f       	std	Y+25, r24	; 0x19
    3062:	9a 8f       	std	Y+26, r25	; 0x1a
    3064:	ab 8f       	std	Y+27, r26	; 0x1b
    3066:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3068:	69 8d       	ldd	r22, Y+25	; 0x19
    306a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    306c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    306e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	4a ef       	ldi	r20, 0xFA	; 250
    3076:	54 e4       	ldi	r21, 0x44	; 68
    3078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307c:	dc 01       	movw	r26, r24
    307e:	cb 01       	movw	r24, r22
    3080:	8d 8b       	std	Y+21, r24	; 0x15
    3082:	9e 8b       	std	Y+22, r25	; 0x16
    3084:	af 8b       	std	Y+23, r26	; 0x17
    3086:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3088:	6d 89       	ldd	r22, Y+21	; 0x15
    308a:	7e 89       	ldd	r23, Y+22	; 0x16
    308c:	8f 89       	ldd	r24, Y+23	; 0x17
    308e:	98 8d       	ldd	r25, Y+24	; 0x18
    3090:	20 e0       	ldi	r18, 0x00	; 0
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	40 e8       	ldi	r20, 0x80	; 128
    3096:	5f e3       	ldi	r21, 0x3F	; 63
    3098:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    309c:	88 23       	and	r24, r24
    309e:	2c f4       	brge	.+10     	; 0x30aa <APP_voidAppUnlocked+0x6c>
		__ticks = 1;
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	9c 8b       	std	Y+20, r25	; 0x14
    30a6:	8b 8b       	std	Y+19, r24	; 0x13
    30a8:	3f c0       	rjmp	.+126    	; 0x3128 <APP_voidAppUnlocked+0xea>
	else if (__tmp > 65535)
    30aa:	6d 89       	ldd	r22, Y+21	; 0x15
    30ac:	7e 89       	ldd	r23, Y+22	; 0x16
    30ae:	8f 89       	ldd	r24, Y+23	; 0x17
    30b0:	98 8d       	ldd	r25, Y+24	; 0x18
    30b2:	20 e0       	ldi	r18, 0x00	; 0
    30b4:	3f ef       	ldi	r19, 0xFF	; 255
    30b6:	4f e7       	ldi	r20, 0x7F	; 127
    30b8:	57 e4       	ldi	r21, 0x47	; 71
    30ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30be:	18 16       	cp	r1, r24
    30c0:	4c f5       	brge	.+82     	; 0x3114 <APP_voidAppUnlocked+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30c2:	69 8d       	ldd	r22, Y+25	; 0x19
    30c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30ca:	20 e0       	ldi	r18, 0x00	; 0
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	40 e2       	ldi	r20, 0x20	; 32
    30d0:	51 e4       	ldi	r21, 0x41	; 65
    30d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d6:	dc 01       	movw	r26, r24
    30d8:	cb 01       	movw	r24, r22
    30da:	bc 01       	movw	r22, r24
    30dc:	cd 01       	movw	r24, r26
    30de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e2:	dc 01       	movw	r26, r24
    30e4:	cb 01       	movw	r24, r22
    30e6:	9c 8b       	std	Y+20, r25	; 0x14
    30e8:	8b 8b       	std	Y+19, r24	; 0x13
    30ea:	0f c0       	rjmp	.+30     	; 0x310a <APP_voidAppUnlocked+0xcc>
    30ec:	88 ec       	ldi	r24, 0xC8	; 200
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	9a 8b       	std	Y+18, r25	; 0x12
    30f2:	89 8b       	std	Y+17, r24	; 0x11
    30f4:	89 89       	ldd	r24, Y+17	; 0x11
    30f6:	9a 89       	ldd	r25, Y+18	; 0x12
    30f8:	01 97       	sbiw	r24, 0x01	; 1
    30fa:	f1 f7       	brne	.-4      	; 0x30f8 <APP_voidAppUnlocked+0xba>
    30fc:	9a 8b       	std	Y+18, r25	; 0x12
    30fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3100:	8b 89       	ldd	r24, Y+19	; 0x13
    3102:	9c 89       	ldd	r25, Y+20	; 0x14
    3104:	01 97       	sbiw	r24, 0x01	; 1
    3106:	9c 8b       	std	Y+20, r25	; 0x14
    3108:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    310a:	8b 89       	ldd	r24, Y+19	; 0x13
    310c:	9c 89       	ldd	r25, Y+20	; 0x14
    310e:	00 97       	sbiw	r24, 0x00	; 0
    3110:	69 f7       	brne	.-38     	; 0x30ec <APP_voidAppUnlocked+0xae>
    3112:	14 c0       	rjmp	.+40     	; 0x313c <APP_voidAppUnlocked+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3114:	6d 89       	ldd	r22, Y+21	; 0x15
    3116:	7e 89       	ldd	r23, Y+22	; 0x16
    3118:	8f 89       	ldd	r24, Y+23	; 0x17
    311a:	98 8d       	ldd	r25, Y+24	; 0x18
    311c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3120:	dc 01       	movw	r26, r24
    3122:	cb 01       	movw	r24, r22
    3124:	9c 8b       	std	Y+20, r25	; 0x14
    3126:	8b 8b       	std	Y+19, r24	; 0x13
    3128:	8b 89       	ldd	r24, Y+19	; 0x13
    312a:	9c 89       	ldd	r25, Y+20	; 0x14
    312c:	98 8b       	std	Y+16, r25	; 0x10
    312e:	8f 87       	std	Y+15, r24	; 0x0f
    3130:	8f 85       	ldd	r24, Y+15	; 0x0f
    3132:	98 89       	ldd	r25, Y+16	; 0x10
    3134:	01 97       	sbiw	r24, 0x01	; 1
    3136:	f1 f7       	brne	.-4      	; 0x3134 <APP_voidAppUnlocked+0xf6>
    3138:	98 8b       	std	Y+16, r25	; 0x10
    313a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_voidSetLocation(LCD_U8_LINE1,0);
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	60 e0       	ldi	r22, 0x00	; 0
    3140:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <LCD_voidSetLocation>
	LCD_voidSendString("Door Opened");
    3144:	8d e7       	ldi	r24, 0x7D	; 125
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	0e 94 21 15 	call	0x2a42	; 0x2a42 <LCD_voidSendString>

	SERVO_voidSetAngle(90);
    314c:	8a e5       	ldi	r24, 0x5A	; 90
    314e:	0e 94 cb 11 	call	0x2396	; 0x2396 <SERVO_voidSetAngle>
	G_u16PasswordSave = 0 ;
    3152:	10 92 3e 02 	sts	0x023E, r1
    3156:	10 92 3d 02 	sts	0x023D, r1
	G_u8LCDCursor = 0;
    315a:	10 92 38 02 	sts	0x0238, r1
	G_u8Counter = 0;
    315e:	10 92 3b 02 	sts	0x023B, r1
	G_u8Positioner = UNLOCKED;
    3162:	81 e0       	ldi	r24, 0x01	; 1
    3164:	80 93 39 02 	sts	0x0239, r24

	LCD_voidSetLocation(LCD_U8_LINE2,0);
    3168:	82 e0       	ldi	r24, 0x02	; 2
    316a:	60 e0       	ldi	r22, 0x00	; 0
    316c:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <LCD_voidSetLocation>
	LCD_voidSendString("Press C to exit");
    3170:	89 e8       	ldi	r24, 0x89	; 137
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	0e 94 21 15 	call	0x2a42	; 0x2a42 <LCD_voidSendString>
	LCD_voidSendNumber(G_u8Positioner);
    3178:	80 91 39 02 	lds	r24, 0x0239
    317c:	88 2f       	mov	r24, r24
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	a0 e0       	ldi	r26, 0x00	; 0
    3182:	b0 e0       	ldi	r27, 0x00	; 0
    3184:	bc 01       	movw	r22, r24
    3186:	cd 01       	movw	r24, r26
    3188:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <LCD_voidSendNumber>
    318c:	80 e0       	ldi	r24, 0x00	; 0
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	aa e7       	ldi	r26, 0x7A	; 122
    3192:	b4 e4       	ldi	r27, 0x44	; 68
    3194:	8b 87       	std	Y+11, r24	; 0x0b
    3196:	9c 87       	std	Y+12, r25	; 0x0c
    3198:	ad 87       	std	Y+13, r26	; 0x0d
    319a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    319c:	6b 85       	ldd	r22, Y+11	; 0x0b
    319e:	7c 85       	ldd	r23, Y+12	; 0x0c
    31a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    31a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    31a4:	20 e0       	ldi	r18, 0x00	; 0
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	4a ef       	ldi	r20, 0xFA	; 250
    31aa:	54 e4       	ldi	r21, 0x44	; 68
    31ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b0:	dc 01       	movw	r26, r24
    31b2:	cb 01       	movw	r24, r22
    31b4:	8f 83       	std	Y+7, r24	; 0x07
    31b6:	98 87       	std	Y+8, r25	; 0x08
    31b8:	a9 87       	std	Y+9, r26	; 0x09
    31ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31bc:	6f 81       	ldd	r22, Y+7	; 0x07
    31be:	78 85       	ldd	r23, Y+8	; 0x08
    31c0:	89 85       	ldd	r24, Y+9	; 0x09
    31c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    31c4:	20 e0       	ldi	r18, 0x00	; 0
    31c6:	30 e0       	ldi	r19, 0x00	; 0
    31c8:	40 e8       	ldi	r20, 0x80	; 128
    31ca:	5f e3       	ldi	r21, 0x3F	; 63
    31cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31d0:	88 23       	and	r24, r24
    31d2:	2c f4       	brge	.+10     	; 0x31de <APP_voidAppUnlocked+0x1a0>
		__ticks = 1;
    31d4:	81 e0       	ldi	r24, 0x01	; 1
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	9e 83       	std	Y+6, r25	; 0x06
    31da:	8d 83       	std	Y+5, r24	; 0x05
    31dc:	3f c0       	rjmp	.+126    	; 0x325c <APP_voidAppUnlocked+0x21e>
	else if (__tmp > 65535)
    31de:	6f 81       	ldd	r22, Y+7	; 0x07
    31e0:	78 85       	ldd	r23, Y+8	; 0x08
    31e2:	89 85       	ldd	r24, Y+9	; 0x09
    31e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31e6:	20 e0       	ldi	r18, 0x00	; 0
    31e8:	3f ef       	ldi	r19, 0xFF	; 255
    31ea:	4f e7       	ldi	r20, 0x7F	; 127
    31ec:	57 e4       	ldi	r21, 0x47	; 71
    31ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31f2:	18 16       	cp	r1, r24
    31f4:	4c f5       	brge	.+82     	; 0x3248 <APP_voidAppUnlocked+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    31f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    31fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    31fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    31fe:	20 e0       	ldi	r18, 0x00	; 0
    3200:	30 e0       	ldi	r19, 0x00	; 0
    3202:	40 e2       	ldi	r20, 0x20	; 32
    3204:	51 e4       	ldi	r21, 0x41	; 65
    3206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    320a:	dc 01       	movw	r26, r24
    320c:	cb 01       	movw	r24, r22
    320e:	bc 01       	movw	r22, r24
    3210:	cd 01       	movw	r24, r26
    3212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3216:	dc 01       	movw	r26, r24
    3218:	cb 01       	movw	r24, r22
    321a:	9e 83       	std	Y+6, r25	; 0x06
    321c:	8d 83       	std	Y+5, r24	; 0x05
    321e:	0f c0       	rjmp	.+30     	; 0x323e <APP_voidAppUnlocked+0x200>
    3220:	88 ec       	ldi	r24, 0xC8	; 200
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	9c 83       	std	Y+4, r25	; 0x04
    3226:	8b 83       	std	Y+3, r24	; 0x03
    3228:	8b 81       	ldd	r24, Y+3	; 0x03
    322a:	9c 81       	ldd	r25, Y+4	; 0x04
    322c:	01 97       	sbiw	r24, 0x01	; 1
    322e:	f1 f7       	brne	.-4      	; 0x322c <APP_voidAppUnlocked+0x1ee>
    3230:	9c 83       	std	Y+4, r25	; 0x04
    3232:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3234:	8d 81       	ldd	r24, Y+5	; 0x05
    3236:	9e 81       	ldd	r25, Y+6	; 0x06
    3238:	01 97       	sbiw	r24, 0x01	; 1
    323a:	9e 83       	std	Y+6, r25	; 0x06
    323c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    323e:	8d 81       	ldd	r24, Y+5	; 0x05
    3240:	9e 81       	ldd	r25, Y+6	; 0x06
    3242:	00 97       	sbiw	r24, 0x00	; 0
    3244:	69 f7       	brne	.-38     	; 0x3220 <APP_voidAppUnlocked+0x1e2>
    3246:	14 c0       	rjmp	.+40     	; 0x3270 <APP_voidAppUnlocked+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3248:	6f 81       	ldd	r22, Y+7	; 0x07
    324a:	78 85       	ldd	r23, Y+8	; 0x08
    324c:	89 85       	ldd	r24, Y+9	; 0x09
    324e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	9e 83       	std	Y+6, r25	; 0x06
    325a:	8d 83       	std	Y+5, r24	; 0x05
    325c:	8d 81       	ldd	r24, Y+5	; 0x05
    325e:	9e 81       	ldd	r25, Y+6	; 0x06
    3260:	9a 83       	std	Y+2, r25	; 0x02
    3262:	89 83       	std	Y+1, r24	; 0x01
    3264:	89 81       	ldd	r24, Y+1	; 0x01
    3266:	9a 81       	ldd	r25, Y+2	; 0x02
    3268:	01 97       	sbiw	r24, 0x01	; 1
    326a:	f1 f7       	brne	.-4      	; 0x3268 <APP_voidAppUnlocked+0x22a>
    326c:	9a 83       	std	Y+2, r25	; 0x02
    326e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_voidSetLocation(LCD_U8_LINE1,0);
    3270:	81 e0       	ldi	r24, 0x01	; 1
    3272:	60 e0       	ldi	r22, 0x00	; 0
    3274:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <LCD_voidSetLocation>
	LCD_voidSendString("Welcome, Sir.");
    3278:	89 e9       	ldi	r24, 0x99	; 153
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	0e 94 21 15 	call	0x2a42	; 0x2a42 <LCD_voidSendString>
}
    3280:	6c 96       	adiw	r28, 0x1c	; 28
    3282:	0f b6       	in	r0, 0x3f	; 63
    3284:	f8 94       	cli
    3286:	de bf       	out	0x3e, r29	; 62
    3288:	0f be       	out	0x3f, r0	; 63
    328a:	cd bf       	out	0x3d, r28	; 61
    328c:	cf 91       	pop	r28
    328e:	df 91       	pop	r29
    3290:	08 95       	ret

00003292 <APP_voidTakePassword>:


void APP_voidTakePassword(void)
{
    3292:	df 93       	push	r29
    3294:	cf 93       	push	r28
    3296:	cd b7       	in	r28, 0x3d	; 61
    3298:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSetLocation(LCD_U8_LINE2, G_u8LCDCursor);
    329a:	90 91 38 02 	lds	r25, 0x0238
    329e:	82 e0       	ldi	r24, 0x02	; 2
    32a0:	69 2f       	mov	r22, r25
    32a2:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <LCD_voidSetLocation>
	LCD_voidSendChar(48 + G_u8HKPReturn);
    32a6:	80 91 3a 02 	lds	r24, 0x023A
    32aa:	80 5d       	subi	r24, 0xD0	; 208
    32ac:	0e 94 83 14 	call	0x2906	; 0x2906 <LCD_voidSendChar>
	G_u16PasswordSave = (G_u16PasswordSave*10) + G_u8HKPReturn;
    32b0:	80 91 3d 02 	lds	r24, 0x023D
    32b4:	90 91 3e 02 	lds	r25, 0x023E
    32b8:	9c 01       	movw	r18, r24
    32ba:	22 0f       	add	r18, r18
    32bc:	33 1f       	adc	r19, r19
    32be:	c9 01       	movw	r24, r18
    32c0:	88 0f       	add	r24, r24
    32c2:	99 1f       	adc	r25, r25
    32c4:	88 0f       	add	r24, r24
    32c6:	99 1f       	adc	r25, r25
    32c8:	28 0f       	add	r18, r24
    32ca:	39 1f       	adc	r19, r25
    32cc:	80 91 3a 02 	lds	r24, 0x023A
    32d0:	88 2f       	mov	r24, r24
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	82 0f       	add	r24, r18
    32d6:	93 1f       	adc	r25, r19
    32d8:	90 93 3e 02 	sts	0x023E, r25
    32dc:	80 93 3d 02 	sts	0x023D, r24
	G_u8LCDCursor ++;
    32e0:	80 91 38 02 	lds	r24, 0x0238
    32e4:	8f 5f       	subi	r24, 0xFF	; 255
    32e6:	80 93 38 02 	sts	0x0238, r24
}
    32ea:	cf 91       	pop	r28
    32ec:	df 91       	pop	r29
    32ee:	08 95       	ret

000032f0 <APP_ControlMotor>:


void APP_ControlMotor(void)
{
    32f0:	df 93       	push	r29
    32f2:	cf 93       	push	r28
    32f4:	cd b7       	in	r28, 0x3d	; 61
    32f6:	de b7       	in	r29, 0x3e	; 62
	if (G_u8Positioner == UNLOCKED)
    32f8:	80 91 39 02 	lds	r24, 0x0239
    32fc:	81 30       	cpi	r24, 0x01	; 1
    32fe:	09 f0       	breq	.+2      	; 0x3302 <APP_ControlMotor+0x12>
    3300:	47 c0       	rjmp	.+142    	; 0x3390 <APP_ControlMotor+0xa0>
	{
		if ( (!DIO_u8GetPinValue(DIO_PORTA,DIO_PIN0)) && (!DIO_u8GetPinValue(DIO_PORTA,DIO_PIN1)) )
    3302:	80 e0       	ldi	r24, 0x00	; 0
    3304:	60 e0       	ldi	r22, 0x00	; 0
    3306:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <DIO_u8GetPinValue>
    330a:	88 23       	and	r24, r24
    330c:	61 f4       	brne	.+24     	; 0x3326 <APP_ControlMotor+0x36>
    330e:	80 e0       	ldi	r24, 0x00	; 0
    3310:	61 e0       	ldi	r22, 0x01	; 1
    3312:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <DIO_u8GetPinValue>
    3316:	88 23       	and	r24, r24
    3318:	31 f4       	brne	.+12     	; 0x3326 <APP_ControlMotor+0x36>
		{
			G_u8MotorState = MOTOR_ERROR;
    331a:	86 e0       	ldi	r24, 0x06	; 6
    331c:	80 93 3c 02 	sts	0x023C, r24
			DCMOTOR_voidStop();
    3320:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <DCMOTOR_voidStop>
    3324:	35 c0       	rjmp	.+106    	; 0x3390 <APP_ControlMotor+0xa0>
		}

		else if (DIO_u8GetPinValue(DIO_PORTA,DIO_PIN0) && (!DIO_u8GetPinValue(DIO_PORTA,DIO_PIN1)) )
    3326:	80 e0       	ldi	r24, 0x00	; 0
    3328:	60 e0       	ldi	r22, 0x00	; 0
    332a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <DIO_u8GetPinValue>
    332e:	88 23       	and	r24, r24
    3330:	61 f0       	breq	.+24     	; 0x334a <APP_ControlMotor+0x5a>
    3332:	80 e0       	ldi	r24, 0x00	; 0
    3334:	61 e0       	ldi	r22, 0x01	; 1
    3336:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <DIO_u8GetPinValue>
    333a:	88 23       	and	r24, r24
    333c:	31 f4       	brne	.+12     	; 0x334a <APP_ControlMotor+0x5a>
		{
			G_u8MotorState = MOTOR_CW;
    333e:	83 e0       	ldi	r24, 0x03	; 3
    3340:	80 93 3c 02 	sts	0x023C, r24
			DCMOTOR_voidRotateCW();
    3344:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <DCMOTOR_voidRotateCW>
    3348:	23 c0       	rjmp	.+70     	; 0x3390 <APP_ControlMotor+0xa0>
		}

		else if (DIO_u8GetPinValue(DIO_PORTA,DIO_PIN1) && (!DIO_u8GetPinValue(DIO_PORTA,DIO_PIN0)) )
    334a:	80 e0       	ldi	r24, 0x00	; 0
    334c:	61 e0       	ldi	r22, 0x01	; 1
    334e:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <DIO_u8GetPinValue>
    3352:	88 23       	and	r24, r24
    3354:	61 f0       	breq	.+24     	; 0x336e <APP_ControlMotor+0x7e>
    3356:	80 e0       	ldi	r24, 0x00	; 0
    3358:	60 e0       	ldi	r22, 0x00	; 0
    335a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <DIO_u8GetPinValue>
    335e:	88 23       	and	r24, r24
    3360:	31 f4       	brne	.+12     	; 0x336e <APP_ControlMotor+0x7e>
		{
			G_u8MotorState = MOTOR_CCW;
    3362:	84 e0       	ldi	r24, 0x04	; 4
    3364:	80 93 3c 02 	sts	0x023C, r24
			DCMOTOR_voidRotateCCW();
    3368:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <DCMOTOR_voidRotateCCW>
    336c:	11 c0       	rjmp	.+34     	; 0x3390 <APP_ControlMotor+0xa0>
		}

		else if ( (DIO_u8GetPinValue(DIO_PORTA,DIO_PIN0)) && (DIO_u8GetPinValue(DIO_PORTA,DIO_PIN1)) )
    336e:	80 e0       	ldi	r24, 0x00	; 0
    3370:	60 e0       	ldi	r22, 0x00	; 0
    3372:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <DIO_u8GetPinValue>
    3376:	88 23       	and	r24, r24
    3378:	59 f0       	breq	.+22     	; 0x3390 <APP_ControlMotor+0xa0>
    337a:	80 e0       	ldi	r24, 0x00	; 0
    337c:	61 e0       	ldi	r22, 0x01	; 1
    337e:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <DIO_u8GetPinValue>
    3382:	88 23       	and	r24, r24
    3384:	29 f0       	breq	.+10     	; 0x3390 <APP_ControlMotor+0xa0>
		{
			G_u8MotorState = MOTOR_STOP;
    3386:	85 e0       	ldi	r24, 0x05	; 5
    3388:	80 93 3c 02 	sts	0x023C, r24
			DCMOTOR_voidStop();
    338c:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <DCMOTOR_voidStop>
		}
	}
}
    3390:	cf 91       	pop	r28
    3392:	df 91       	pop	r29
    3394:	08 95       	ret

00003396 <main>:
u8 G_u8LCDCursor, G_u8HKPReturn, G_u8Positioner, G_u8Counter, G_u8MotorState;
u16 G_u16PasswordSave;


int main ()
{
    3396:	df 93       	push	r29
    3398:	cf 93       	push	r28
    339a:	cd b7       	in	r28, 0x3d	; 61
    339c:	de b7       	in	r29, 0x3e	; 62
    339e:	aa 97       	sbiw	r28, 0x2a	; 42
    33a0:	0f b6       	in	r0, 0x3f	; 63
    33a2:	f8 94       	cli
    33a4:	de bf       	out	0x3e, r29	; 62
    33a6:	0f be       	out	0x3f, r0	; 63
    33a8:	cd bf       	out	0x3d, r28	; 61
    G_u16PasswordSave = 0;
    33aa:	10 92 3e 02 	sts	0x023E, r1
    33ae:	10 92 3d 02 	sts	0x023D, r1
    G_u8HKPReturn = HKP_KEY_NOT_PRESSED , G_u8Positioner =  LOCKED ;
    33b2:	8f ef       	ldi	r24, 0xFF	; 255
    33b4:	80 93 3a 02 	sts	0x023A, r24
    33b8:	10 92 39 02 	sts	0x0239, r1
    G_u8LCDCursor = 0;
    33bc:	10 92 38 02 	sts	0x0238, r1
    APP_voidAppInit();
    33c0:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <APP_voidAppInit>
//
//    		while (G_u8HKPReturn == HKP_KEY_NOT_PRESSED)
//    		{
//    			G_u8HKPReturn = HKP_u8GetKeyValue();
//    		}
    		APP_voidAppLocked();
    33c4:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <APP_voidAppLocked>

    		if (G_u8HKPReturn !=HKP_KEY_NOT_PRESSED)
    33c8:	80 91 3a 02 	lds	r24, 0x023A
    33cc:	8f 3f       	cpi	r24, 0xFF	; 255
    33ce:	d1 f3       	breq	.-12     	; 0x33c4 <main+0x2e>
    		{
    			G_u8Positioner = PASSWORD;
    33d0:	82 e0       	ldi	r24, 0x02	; 2
    33d2:	80 93 39 02 	sts	0x0239, r24
    			LCD_voidSendCommand(LCD_CLEAR);
    33d6:	81 e0       	ldi	r24, 0x01	; 1
    33d8:	0e 94 e5 13 	call	0x27ca	; 0x27ca <LCD_voidSendCommand>
    33dc:	80 e0       	ldi	r24, 0x00	; 0
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	a0 e0       	ldi	r26, 0x00	; 0
    33e2:	b0 e4       	ldi	r27, 0x40	; 64
    33e4:	8f a3       	std	Y+39, r24	; 0x27
    33e6:	98 a7       	std	Y+40, r25	; 0x28
    33e8:	a9 a7       	std	Y+41, r26	; 0x29
    33ea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33ec:	6f a1       	ldd	r22, Y+39	; 0x27
    33ee:	78 a5       	ldd	r23, Y+40	; 0x28
    33f0:	89 a5       	ldd	r24, Y+41	; 0x29
    33f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    33f4:	20 e0       	ldi	r18, 0x00	; 0
    33f6:	30 e0       	ldi	r19, 0x00	; 0
    33f8:	4a ef       	ldi	r20, 0xFA	; 250
    33fa:	54 e4       	ldi	r21, 0x44	; 68
    33fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3400:	dc 01       	movw	r26, r24
    3402:	cb 01       	movw	r24, r22
    3404:	8b a3       	std	Y+35, r24	; 0x23
    3406:	9c a3       	std	Y+36, r25	; 0x24
    3408:	ad a3       	std	Y+37, r26	; 0x25
    340a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    340c:	6b a1       	ldd	r22, Y+35	; 0x23
    340e:	7c a1       	ldd	r23, Y+36	; 0x24
    3410:	8d a1       	ldd	r24, Y+37	; 0x25
    3412:	9e a1       	ldd	r25, Y+38	; 0x26
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	40 e8       	ldi	r20, 0x80	; 128
    341a:	5f e3       	ldi	r21, 0x3F	; 63
    341c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3420:	88 23       	and	r24, r24
    3422:	2c f4       	brge	.+10     	; 0x342e <main+0x98>
		__ticks = 1;
    3424:	81 e0       	ldi	r24, 0x01	; 1
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	9a a3       	std	Y+34, r25	; 0x22
    342a:	89 a3       	std	Y+33, r24	; 0x21
    342c:	3f c0       	rjmp	.+126    	; 0x34ac <main+0x116>
	else if (__tmp > 65535)
    342e:	6b a1       	ldd	r22, Y+35	; 0x23
    3430:	7c a1       	ldd	r23, Y+36	; 0x24
    3432:	8d a1       	ldd	r24, Y+37	; 0x25
    3434:	9e a1       	ldd	r25, Y+38	; 0x26
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	3f ef       	ldi	r19, 0xFF	; 255
    343a:	4f e7       	ldi	r20, 0x7F	; 127
    343c:	57 e4       	ldi	r21, 0x47	; 71
    343e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3442:	18 16       	cp	r1, r24
    3444:	4c f5       	brge	.+82     	; 0x3498 <main+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3446:	6f a1       	ldd	r22, Y+39	; 0x27
    3448:	78 a5       	ldd	r23, Y+40	; 0x28
    344a:	89 a5       	ldd	r24, Y+41	; 0x29
    344c:	9a a5       	ldd	r25, Y+42	; 0x2a
    344e:	20 e0       	ldi	r18, 0x00	; 0
    3450:	30 e0       	ldi	r19, 0x00	; 0
    3452:	40 e2       	ldi	r20, 0x20	; 32
    3454:	51 e4       	ldi	r21, 0x41	; 65
    3456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    345a:	dc 01       	movw	r26, r24
    345c:	cb 01       	movw	r24, r22
    345e:	bc 01       	movw	r22, r24
    3460:	cd 01       	movw	r24, r26
    3462:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3466:	dc 01       	movw	r26, r24
    3468:	cb 01       	movw	r24, r22
    346a:	9a a3       	std	Y+34, r25	; 0x22
    346c:	89 a3       	std	Y+33, r24	; 0x21
    346e:	0f c0       	rjmp	.+30     	; 0x348e <main+0xf8>
    3470:	88 ec       	ldi	r24, 0xC8	; 200
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	98 a3       	std	Y+32, r25	; 0x20
    3476:	8f 8f       	std	Y+31, r24	; 0x1f
    3478:	8f 8d       	ldd	r24, Y+31	; 0x1f
    347a:	98 a1       	ldd	r25, Y+32	; 0x20
    347c:	01 97       	sbiw	r24, 0x01	; 1
    347e:	f1 f7       	brne	.-4      	; 0x347c <main+0xe6>
    3480:	98 a3       	std	Y+32, r25	; 0x20
    3482:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3484:	89 a1       	ldd	r24, Y+33	; 0x21
    3486:	9a a1       	ldd	r25, Y+34	; 0x22
    3488:	01 97       	sbiw	r24, 0x01	; 1
    348a:	9a a3       	std	Y+34, r25	; 0x22
    348c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    348e:	89 a1       	ldd	r24, Y+33	; 0x21
    3490:	9a a1       	ldd	r25, Y+34	; 0x22
    3492:	00 97       	sbiw	r24, 0x00	; 0
    3494:	69 f7       	brne	.-38     	; 0x3470 <main+0xda>
    3496:	14 c0       	rjmp	.+40     	; 0x34c0 <main+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3498:	6b a1       	ldd	r22, Y+35	; 0x23
    349a:	7c a1       	ldd	r23, Y+36	; 0x24
    349c:	8d a1       	ldd	r24, Y+37	; 0x25
    349e:	9e a1       	ldd	r25, Y+38	; 0x26
    34a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a4:	dc 01       	movw	r26, r24
    34a6:	cb 01       	movw	r24, r22
    34a8:	9a a3       	std	Y+34, r25	; 0x22
    34aa:	89 a3       	std	Y+33, r24	; 0x21
    34ac:	89 a1       	ldd	r24, Y+33	; 0x21
    34ae:	9a a1       	ldd	r25, Y+34	; 0x22
    34b0:	9e 8f       	std	Y+30, r25	; 0x1e
    34b2:	8d 8f       	std	Y+29, r24	; 0x1d
    34b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34b8:	01 97       	sbiw	r24, 0x01	; 1
    34ba:	f1 f7       	brne	.-4      	; 0x34b8 <main+0x122>
    34bc:	9e 8f       	std	Y+30, r25	; 0x1e
    34be:	8d 8f       	std	Y+29, r24	; 0x1d
    			_delay_ms(2);
    			LCD_voidSendString("Press = to Enter");
    34c0:	87 ea       	ldi	r24, 0xA7	; 167
    34c2:	90 e0       	ldi	r25, 0x00	; 0
    34c4:	0e 94 21 15 	call	0x2a42	; 0x2a42 <LCD_voidSendString>
    34c8:	5b c1       	rjmp	.+694    	; 0x3780 <main+0x3ea>
//						{
//							G_u8MotorState = MOTOR_STOP;
//							DCMOTOR_voidStop();
//						}
//    				}
    				APP_ControlMotor();
    34ca:	0e 94 78 19 	call	0x32f0	; 0x32f0 <APP_ControlMotor>

    				G_u8HKPReturn = HKP_u8GetKeyValue();
    34ce:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <HKP_u8GetKeyValue>
    34d2:	80 93 3a 02 	sts	0x023A, r24

    				if (G_u8HKPReturn !=HKP_KEY_NOT_PRESSED)
    34d6:	80 91 3a 02 	lds	r24, 0x023A
    34da:	8f 3f       	cpi	r24, 0xFF	; 255
    34dc:	09 f4       	brne	.+2      	; 0x34e0 <main+0x14a>
    34de:	50 c1       	rjmp	.+672    	; 0x3780 <main+0x3ea>
    				{
    					if (G_u8HKPReturn == '=')
    34e0:	80 91 3a 02 	lds	r24, 0x023A
    34e4:	8d 33       	cpi	r24, 0x3D	; 61
    34e6:	09 f0       	breq	.+2      	; 0x34ea <main+0x154>
    34e8:	0c c1       	rjmp	.+536    	; 0x3702 <main+0x36c>
    					{
    						if (G_u16PasswordSave ==  PASS) /*The Password Is Enterred Correctly*/
    34ea:	80 91 3d 02 	lds	r24, 0x023D
    34ee:	90 91 3e 02 	lds	r25, 0x023E
    34f2:	24 e0       	ldi	r18, 0x04	; 4
    34f4:	82 3d       	cpi	r24, 0xD2	; 210
    34f6:	92 07       	cpc	r25, r18
    34f8:	19 f4       	brne	.+6      	; 0x3500 <main+0x16a>
//    							LCD_voidSendString("Press * to exit");
//    							LCD_voidSendNumber(G_u8Positioner);
//    							_delay_ms(1000);
//    							LCD_voidSetLocation(LCD_U8_LINE1,0);
//    							LCD_voidSendString("Welcome, Sir.");
    							APP_voidAppUnlocked();
    34fa:	0e 94 1f 18 	call	0x303e	; 0x303e <APP_voidAppUnlocked>
    34fe:	40 c1       	rjmp	.+640    	; 0x3780 <main+0x3ea>
    						}
    						else	/*The Password is Enterred Wrong*/
    						{
    							LCD_voidSendCommand(LCD_CLEAR);
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	0e 94 e5 13 	call	0x27ca	; 0x27ca <LCD_voidSendCommand>
    3506:	80 e0       	ldi	r24, 0x00	; 0
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	a0 e0       	ldi	r26, 0x00	; 0
    350c:	b0 e4       	ldi	r27, 0x40	; 64
    350e:	89 8f       	std	Y+25, r24	; 0x19
    3510:	9a 8f       	std	Y+26, r25	; 0x1a
    3512:	ab 8f       	std	Y+27, r26	; 0x1b
    3514:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3516:	69 8d       	ldd	r22, Y+25	; 0x19
    3518:	7a 8d       	ldd	r23, Y+26	; 0x1a
    351a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    351c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    351e:	20 e0       	ldi	r18, 0x00	; 0
    3520:	30 e0       	ldi	r19, 0x00	; 0
    3522:	4a ef       	ldi	r20, 0xFA	; 250
    3524:	54 e4       	ldi	r21, 0x44	; 68
    3526:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    352a:	dc 01       	movw	r26, r24
    352c:	cb 01       	movw	r24, r22
    352e:	8d 8b       	std	Y+21, r24	; 0x15
    3530:	9e 8b       	std	Y+22, r25	; 0x16
    3532:	af 8b       	std	Y+23, r26	; 0x17
    3534:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3536:	6d 89       	ldd	r22, Y+21	; 0x15
    3538:	7e 89       	ldd	r23, Y+22	; 0x16
    353a:	8f 89       	ldd	r24, Y+23	; 0x17
    353c:	98 8d       	ldd	r25, Y+24	; 0x18
    353e:	20 e0       	ldi	r18, 0x00	; 0
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	40 e8       	ldi	r20, 0x80	; 128
    3544:	5f e3       	ldi	r21, 0x3F	; 63
    3546:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    354a:	88 23       	and	r24, r24
    354c:	2c f4       	brge	.+10     	; 0x3558 <main+0x1c2>
		__ticks = 1;
    354e:	81 e0       	ldi	r24, 0x01	; 1
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	9c 8b       	std	Y+20, r25	; 0x14
    3554:	8b 8b       	std	Y+19, r24	; 0x13
    3556:	3f c0       	rjmp	.+126    	; 0x35d6 <main+0x240>
	else if (__tmp > 65535)
    3558:	6d 89       	ldd	r22, Y+21	; 0x15
    355a:	7e 89       	ldd	r23, Y+22	; 0x16
    355c:	8f 89       	ldd	r24, Y+23	; 0x17
    355e:	98 8d       	ldd	r25, Y+24	; 0x18
    3560:	20 e0       	ldi	r18, 0x00	; 0
    3562:	3f ef       	ldi	r19, 0xFF	; 255
    3564:	4f e7       	ldi	r20, 0x7F	; 127
    3566:	57 e4       	ldi	r21, 0x47	; 71
    3568:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    356c:	18 16       	cp	r1, r24
    356e:	4c f5       	brge	.+82     	; 0x35c2 <main+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3570:	69 8d       	ldd	r22, Y+25	; 0x19
    3572:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3574:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3576:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3578:	20 e0       	ldi	r18, 0x00	; 0
    357a:	30 e0       	ldi	r19, 0x00	; 0
    357c:	40 e2       	ldi	r20, 0x20	; 32
    357e:	51 e4       	ldi	r21, 0x41	; 65
    3580:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3584:	dc 01       	movw	r26, r24
    3586:	cb 01       	movw	r24, r22
    3588:	bc 01       	movw	r22, r24
    358a:	cd 01       	movw	r24, r26
    358c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3590:	dc 01       	movw	r26, r24
    3592:	cb 01       	movw	r24, r22
    3594:	9c 8b       	std	Y+20, r25	; 0x14
    3596:	8b 8b       	std	Y+19, r24	; 0x13
    3598:	0f c0       	rjmp	.+30     	; 0x35b8 <main+0x222>
    359a:	88 ec       	ldi	r24, 0xC8	; 200
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	9a 8b       	std	Y+18, r25	; 0x12
    35a0:	89 8b       	std	Y+17, r24	; 0x11
    35a2:	89 89       	ldd	r24, Y+17	; 0x11
    35a4:	9a 89       	ldd	r25, Y+18	; 0x12
    35a6:	01 97       	sbiw	r24, 0x01	; 1
    35a8:	f1 f7       	brne	.-4      	; 0x35a6 <main+0x210>
    35aa:	9a 8b       	std	Y+18, r25	; 0x12
    35ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ae:	8b 89       	ldd	r24, Y+19	; 0x13
    35b0:	9c 89       	ldd	r25, Y+20	; 0x14
    35b2:	01 97       	sbiw	r24, 0x01	; 1
    35b4:	9c 8b       	std	Y+20, r25	; 0x14
    35b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35b8:	8b 89       	ldd	r24, Y+19	; 0x13
    35ba:	9c 89       	ldd	r25, Y+20	; 0x14
    35bc:	00 97       	sbiw	r24, 0x00	; 0
    35be:	69 f7       	brne	.-38     	; 0x359a <main+0x204>
    35c0:	14 c0       	rjmp	.+40     	; 0x35ea <main+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35c2:	6d 89       	ldd	r22, Y+21	; 0x15
    35c4:	7e 89       	ldd	r23, Y+22	; 0x16
    35c6:	8f 89       	ldd	r24, Y+23	; 0x17
    35c8:	98 8d       	ldd	r25, Y+24	; 0x18
    35ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ce:	dc 01       	movw	r26, r24
    35d0:	cb 01       	movw	r24, r22
    35d2:	9c 8b       	std	Y+20, r25	; 0x14
    35d4:	8b 8b       	std	Y+19, r24	; 0x13
    35d6:	8b 89       	ldd	r24, Y+19	; 0x13
    35d8:	9c 89       	ldd	r25, Y+20	; 0x14
    35da:	98 8b       	std	Y+16, r25	; 0x10
    35dc:	8f 87       	std	Y+15, r24	; 0x0f
    35de:	8f 85       	ldd	r24, Y+15	; 0x0f
    35e0:	98 89       	ldd	r25, Y+16	; 0x10
    35e2:	01 97       	sbiw	r24, 0x01	; 1
    35e4:	f1 f7       	brne	.-4      	; 0x35e2 <main+0x24c>
    35e6:	98 8b       	std	Y+16, r25	; 0x10
    35e8:	8f 87       	std	Y+15, r24	; 0x0f
    							_delay_ms(2);
    							LCD_voidSetLocation(LCD_U8_LINE1,0);
    35ea:	81 e0       	ldi	r24, 0x01	; 1
    35ec:	60 e0       	ldi	r22, 0x00	; 0
    35ee:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <LCD_voidSetLocation>
    							LCD_voidSendString("Wrong Password");
    35f2:	88 eb       	ldi	r24, 0xB8	; 184
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	0e 94 21 15 	call	0x2a42	; 0x2a42 <LCD_voidSendString>
    35fa:	80 e0       	ldi	r24, 0x00	; 0
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	aa e7       	ldi	r26, 0x7A	; 122
    3600:	b4 e4       	ldi	r27, 0x44	; 68
    3602:	8b 87       	std	Y+11, r24	; 0x0b
    3604:	9c 87       	std	Y+12, r25	; 0x0c
    3606:	ad 87       	std	Y+13, r26	; 0x0d
    3608:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    360a:	6b 85       	ldd	r22, Y+11	; 0x0b
    360c:	7c 85       	ldd	r23, Y+12	; 0x0c
    360e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3610:	9e 85       	ldd	r25, Y+14	; 0x0e
    3612:	20 e0       	ldi	r18, 0x00	; 0
    3614:	30 e0       	ldi	r19, 0x00	; 0
    3616:	4a ef       	ldi	r20, 0xFA	; 250
    3618:	54 e4       	ldi	r21, 0x44	; 68
    361a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    361e:	dc 01       	movw	r26, r24
    3620:	cb 01       	movw	r24, r22
    3622:	8f 83       	std	Y+7, r24	; 0x07
    3624:	98 87       	std	Y+8, r25	; 0x08
    3626:	a9 87       	std	Y+9, r26	; 0x09
    3628:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    362a:	6f 81       	ldd	r22, Y+7	; 0x07
    362c:	78 85       	ldd	r23, Y+8	; 0x08
    362e:	89 85       	ldd	r24, Y+9	; 0x09
    3630:	9a 85       	ldd	r25, Y+10	; 0x0a
    3632:	20 e0       	ldi	r18, 0x00	; 0
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	40 e8       	ldi	r20, 0x80	; 128
    3638:	5f e3       	ldi	r21, 0x3F	; 63
    363a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    363e:	88 23       	and	r24, r24
    3640:	2c f4       	brge	.+10     	; 0x364c <main+0x2b6>
		__ticks = 1;
    3642:	81 e0       	ldi	r24, 0x01	; 1
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	9e 83       	std	Y+6, r25	; 0x06
    3648:	8d 83       	std	Y+5, r24	; 0x05
    364a:	3f c0       	rjmp	.+126    	; 0x36ca <main+0x334>
	else if (__tmp > 65535)
    364c:	6f 81       	ldd	r22, Y+7	; 0x07
    364e:	78 85       	ldd	r23, Y+8	; 0x08
    3650:	89 85       	ldd	r24, Y+9	; 0x09
    3652:	9a 85       	ldd	r25, Y+10	; 0x0a
    3654:	20 e0       	ldi	r18, 0x00	; 0
    3656:	3f ef       	ldi	r19, 0xFF	; 255
    3658:	4f e7       	ldi	r20, 0x7F	; 127
    365a:	57 e4       	ldi	r21, 0x47	; 71
    365c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3660:	18 16       	cp	r1, r24
    3662:	4c f5       	brge	.+82     	; 0x36b6 <main+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3664:	6b 85       	ldd	r22, Y+11	; 0x0b
    3666:	7c 85       	ldd	r23, Y+12	; 0x0c
    3668:	8d 85       	ldd	r24, Y+13	; 0x0d
    366a:	9e 85       	ldd	r25, Y+14	; 0x0e
    366c:	20 e0       	ldi	r18, 0x00	; 0
    366e:	30 e0       	ldi	r19, 0x00	; 0
    3670:	40 e2       	ldi	r20, 0x20	; 32
    3672:	51 e4       	ldi	r21, 0x41	; 65
    3674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3678:	dc 01       	movw	r26, r24
    367a:	cb 01       	movw	r24, r22
    367c:	bc 01       	movw	r22, r24
    367e:	cd 01       	movw	r24, r26
    3680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3684:	dc 01       	movw	r26, r24
    3686:	cb 01       	movw	r24, r22
    3688:	9e 83       	std	Y+6, r25	; 0x06
    368a:	8d 83       	std	Y+5, r24	; 0x05
    368c:	0f c0       	rjmp	.+30     	; 0x36ac <main+0x316>
    368e:	88 ec       	ldi	r24, 0xC8	; 200
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	9c 83       	std	Y+4, r25	; 0x04
    3694:	8b 83       	std	Y+3, r24	; 0x03
    3696:	8b 81       	ldd	r24, Y+3	; 0x03
    3698:	9c 81       	ldd	r25, Y+4	; 0x04
    369a:	01 97       	sbiw	r24, 0x01	; 1
    369c:	f1 f7       	brne	.-4      	; 0x369a <main+0x304>
    369e:	9c 83       	std	Y+4, r25	; 0x04
    36a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36a2:	8d 81       	ldd	r24, Y+5	; 0x05
    36a4:	9e 81       	ldd	r25, Y+6	; 0x06
    36a6:	01 97       	sbiw	r24, 0x01	; 1
    36a8:	9e 83       	std	Y+6, r25	; 0x06
    36aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ac:	8d 81       	ldd	r24, Y+5	; 0x05
    36ae:	9e 81       	ldd	r25, Y+6	; 0x06
    36b0:	00 97       	sbiw	r24, 0x00	; 0
    36b2:	69 f7       	brne	.-38     	; 0x368e <main+0x2f8>
    36b4:	14 c0       	rjmp	.+40     	; 0x36de <main+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36b6:	6f 81       	ldd	r22, Y+7	; 0x07
    36b8:	78 85       	ldd	r23, Y+8	; 0x08
    36ba:	89 85       	ldd	r24, Y+9	; 0x09
    36bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    36be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c2:	dc 01       	movw	r26, r24
    36c4:	cb 01       	movw	r24, r22
    36c6:	9e 83       	std	Y+6, r25	; 0x06
    36c8:	8d 83       	std	Y+5, r24	; 0x05
    36ca:	8d 81       	ldd	r24, Y+5	; 0x05
    36cc:	9e 81       	ldd	r25, Y+6	; 0x06
    36ce:	9a 83       	std	Y+2, r25	; 0x02
    36d0:	89 83       	std	Y+1, r24	; 0x01
    36d2:	89 81       	ldd	r24, Y+1	; 0x01
    36d4:	9a 81       	ldd	r25, Y+2	; 0x02
    36d6:	01 97       	sbiw	r24, 0x01	; 1
    36d8:	f1 f7       	brne	.-4      	; 0x36d6 <main+0x340>
    36da:	9a 83       	std	Y+2, r25	; 0x02
    36dc:	89 83       	std	Y+1, r24	; 0x01
    							_delay_ms(1000);
    							LCD_voidSendCommand(LCD_CLEAR);
    36de:	81 e0       	ldi	r24, 0x01	; 1
    36e0:	0e 94 e5 13 	call	0x27ca	; 0x27ca <LCD_voidSendCommand>
    							LCD_voidSetLocation(LCD_U8_LINE1,0);
    36e4:	81 e0       	ldi	r24, 0x01	; 1
    36e6:	60 e0       	ldi	r22, 0x00	; 0
    36e8:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <LCD_voidSetLocation>
    							LCD_voidSendString("Try Again!");
    36ec:	87 ec       	ldi	r24, 0xC7	; 199
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	0e 94 21 15 	call	0x2a42	; 0x2a42 <LCD_voidSendString>
    							G_u16PasswordSave = 0 ;
    36f4:	10 92 3e 02 	sts	0x023E, r1
    36f8:	10 92 3d 02 	sts	0x023D, r1
    						    G_u8LCDCursor = 0;
    36fc:	10 92 38 02 	sts	0x0238, r1
    3700:	3f c0       	rjmp	.+126    	; 0x3780 <main+0x3ea>
    						}
    					}
    					else if (G_u8HKPReturn == 'C') //Retruning to LOCKED Mode
    3702:	80 91 3a 02 	lds	r24, 0x023A
    3706:	83 34       	cpi	r24, 0x43	; 67
    3708:	19 f4       	brne	.+6      	; 0x3710 <main+0x37a>
    					{
    						APP_voidAppLocked();
    370a:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <APP_voidAppLocked>
    370e:	38 c0       	rjmp	.+112    	; 0x3780 <main+0x3ea>
    					}
    					else if (G_u8HKPReturn >= 0 && G_u8HKPReturn <= 9) //Taking Numbers for password
    3710:	80 91 3a 02 	lds	r24, 0x023A
    3714:	8a 30       	cpi	r24, 0x0A	; 10
    3716:	18 f4       	brcc	.+6      	; 0x371e <main+0x388>
//    						LCD_voidSetLocation(LCD_U8_LINE2, G_u8LCDCursor);
//    						LCD_voidSendChar(48 + G_u8HKPReturn);
//    						G_u16PasswordSave = (G_u16PasswordSave*10) + G_u8HKPReturn;
//    						G_u8LCDCursor ++;
//
    						APP_voidTakePassword();
    3718:	0e 94 49 19 	call	0x3292	; 0x3292 <APP_voidTakePassword>
    371c:	31 c0       	rjmp	.+98     	; 0x3780 <main+0x3ea>

    					}

    					else if ( G_u8HKPReturn == '+') /*Show/Hide Motor State*/
    371e:	80 91 3a 02 	lds	r24, 0x023A
    3722:	8b 32       	cpi	r24, 0x2B	; 43
    3724:	69 f5       	brne	.+90     	; 0x3780 <main+0x3ea>
    					{
							if (G_u8MotorState == MOTOR_CW)
    3726:	80 91 3c 02 	lds	r24, 0x023C
    372a:	83 30       	cpi	r24, 0x03	; 3
    372c:	41 f4       	brne	.+16     	; 0x373e <main+0x3a8>
							{
								LCD_voidSendCommand(LCD_CLEAR);
    372e:	81 e0       	ldi	r24, 0x01	; 1
    3730:	0e 94 e5 13 	call	0x27ca	; 0x27ca <LCD_voidSendCommand>
								LCD_voidSendString("ClockWise");
    3734:	82 ed       	ldi	r24, 0xD2	; 210
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	0e 94 21 15 	call	0x2a42	; 0x2a42 <LCD_voidSendString>
    373c:	0b c0       	rjmp	.+22     	; 0x3754 <main+0x3be>
							}
							else if (G_u8MotorState == MOTOR_CCW)
    373e:	80 91 3c 02 	lds	r24, 0x023C
    3742:	84 30       	cpi	r24, 0x04	; 4
    3744:	39 f4       	brne	.+14     	; 0x3754 <main+0x3be>
							{
								LCD_voidSendCommand(LCD_CLEAR);
    3746:	81 e0       	ldi	r24, 0x01	; 1
    3748:	0e 94 e5 13 	call	0x27ca	; 0x27ca <LCD_voidSendCommand>
								LCD_voidSendString("CounterClockWise");
    374c:	8c ed       	ldi	r24, 0xDC	; 220
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	0e 94 21 15 	call	0x2a42	; 0x2a42 <LCD_voidSendString>
							}
							if (G_u8MotorState == MOTOR_ERROR)
    3754:	80 91 3c 02 	lds	r24, 0x023C
    3758:	86 30       	cpi	r24, 0x06	; 6
    375a:	39 f4       	brne	.+14     	; 0x376a <main+0x3d4>
							{
								LCD_voidSendCommand(LCD_CLEAR);
    375c:	81 e0       	ldi	r24, 0x01	; 1
    375e:	0e 94 e5 13 	call	0x27ca	; 0x27ca <LCD_voidSendCommand>
								LCD_voidSendString("Error");
    3762:	8d ee       	ldi	r24, 0xED	; 237
    3764:	90 e0       	ldi	r25, 0x00	; 0
    3766:	0e 94 21 15 	call	0x2a42	; 0x2a42 <LCD_voidSendString>
							}
							if (G_u8MotorState == MOTOR_STOP)
    376a:	80 91 3c 02 	lds	r24, 0x023C
    376e:	85 30       	cpi	r24, 0x05	; 5
    3770:	39 f4       	brne	.+14     	; 0x3780 <main+0x3ea>
							{
								LCD_voidSendCommand(LCD_CLEAR);
    3772:	81 e0       	ldi	r24, 0x01	; 1
    3774:	0e 94 e5 13 	call	0x27ca	; 0x27ca <LCD_voidSendCommand>
								LCD_voidSendString("Stop");
    3778:	83 ef       	ldi	r24, 0xF3	; 243
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	0e 94 21 15 	call	0x2a42	; 0x2a42 <LCD_voidSendString>
    		{
    			G_u8Positioner = PASSWORD;
    			LCD_voidSendCommand(LCD_CLEAR);
    			_delay_ms(2);
    			LCD_voidSendString("Press = to Enter");
    			while (G_u8Positioner != LOCKED)
    3780:	80 91 39 02 	lds	r24, 0x0239
    3784:	88 23       	and	r24, r24
    3786:	09 f0       	breq	.+2      	; 0x378a <main+0x3f4>
    3788:	a0 ce       	rjmp	.-704    	; 0x34ca <main+0x134>
								LCD_voidSendString("Stop");
							}
    					}
    				}
    			}
    			G_u8HKPReturn = HKP_KEY_NOT_PRESSED ;
    378a:	8f ef       	ldi	r24, 0xFF	; 255
    378c:	80 93 3a 02 	sts	0x023A, r24
    3790:	19 ce       	rjmp	.-974    	; 0x33c4 <main+0x2e>

00003792 <__mulsi3>:
    3792:	62 9f       	mul	r22, r18
    3794:	d0 01       	movw	r26, r0
    3796:	73 9f       	mul	r23, r19
    3798:	f0 01       	movw	r30, r0
    379a:	82 9f       	mul	r24, r18
    379c:	e0 0d       	add	r30, r0
    379e:	f1 1d       	adc	r31, r1
    37a0:	64 9f       	mul	r22, r20
    37a2:	e0 0d       	add	r30, r0
    37a4:	f1 1d       	adc	r31, r1
    37a6:	92 9f       	mul	r25, r18
    37a8:	f0 0d       	add	r31, r0
    37aa:	83 9f       	mul	r24, r19
    37ac:	f0 0d       	add	r31, r0
    37ae:	74 9f       	mul	r23, r20
    37b0:	f0 0d       	add	r31, r0
    37b2:	65 9f       	mul	r22, r21
    37b4:	f0 0d       	add	r31, r0
    37b6:	99 27       	eor	r25, r25
    37b8:	72 9f       	mul	r23, r18
    37ba:	b0 0d       	add	r27, r0
    37bc:	e1 1d       	adc	r30, r1
    37be:	f9 1f       	adc	r31, r25
    37c0:	63 9f       	mul	r22, r19
    37c2:	b0 0d       	add	r27, r0
    37c4:	e1 1d       	adc	r30, r1
    37c6:	f9 1f       	adc	r31, r25
    37c8:	bd 01       	movw	r22, r26
    37ca:	cf 01       	movw	r24, r30
    37cc:	11 24       	eor	r1, r1
    37ce:	08 95       	ret

000037d0 <__divmodhi4>:
    37d0:	97 fb       	bst	r25, 7
    37d2:	09 2e       	mov	r0, r25
    37d4:	07 26       	eor	r0, r23
    37d6:	0a d0       	rcall	.+20     	; 0x37ec <__divmodhi4_neg1>
    37d8:	77 fd       	sbrc	r23, 7
    37da:	04 d0       	rcall	.+8      	; 0x37e4 <__divmodhi4_neg2>
    37dc:	2e d0       	rcall	.+92     	; 0x383a <__udivmodhi4>
    37de:	06 d0       	rcall	.+12     	; 0x37ec <__divmodhi4_neg1>
    37e0:	00 20       	and	r0, r0
    37e2:	1a f4       	brpl	.+6      	; 0x37ea <__divmodhi4_exit>

000037e4 <__divmodhi4_neg2>:
    37e4:	70 95       	com	r23
    37e6:	61 95       	neg	r22
    37e8:	7f 4f       	sbci	r23, 0xFF	; 255

000037ea <__divmodhi4_exit>:
    37ea:	08 95       	ret

000037ec <__divmodhi4_neg1>:
    37ec:	f6 f7       	brtc	.-4      	; 0x37ea <__divmodhi4_exit>
    37ee:	90 95       	com	r25
    37f0:	81 95       	neg	r24
    37f2:	9f 4f       	sbci	r25, 0xFF	; 255
    37f4:	08 95       	ret

000037f6 <__udivmodsi4>:
    37f6:	a1 e2       	ldi	r26, 0x21	; 33
    37f8:	1a 2e       	mov	r1, r26
    37fa:	aa 1b       	sub	r26, r26
    37fc:	bb 1b       	sub	r27, r27
    37fe:	fd 01       	movw	r30, r26
    3800:	0d c0       	rjmp	.+26     	; 0x381c <__udivmodsi4_ep>

00003802 <__udivmodsi4_loop>:
    3802:	aa 1f       	adc	r26, r26
    3804:	bb 1f       	adc	r27, r27
    3806:	ee 1f       	adc	r30, r30
    3808:	ff 1f       	adc	r31, r31
    380a:	a2 17       	cp	r26, r18
    380c:	b3 07       	cpc	r27, r19
    380e:	e4 07       	cpc	r30, r20
    3810:	f5 07       	cpc	r31, r21
    3812:	20 f0       	brcs	.+8      	; 0x381c <__udivmodsi4_ep>
    3814:	a2 1b       	sub	r26, r18
    3816:	b3 0b       	sbc	r27, r19
    3818:	e4 0b       	sbc	r30, r20
    381a:	f5 0b       	sbc	r31, r21

0000381c <__udivmodsi4_ep>:
    381c:	66 1f       	adc	r22, r22
    381e:	77 1f       	adc	r23, r23
    3820:	88 1f       	adc	r24, r24
    3822:	99 1f       	adc	r25, r25
    3824:	1a 94       	dec	r1
    3826:	69 f7       	brne	.-38     	; 0x3802 <__udivmodsi4_loop>
    3828:	60 95       	com	r22
    382a:	70 95       	com	r23
    382c:	80 95       	com	r24
    382e:	90 95       	com	r25
    3830:	9b 01       	movw	r18, r22
    3832:	ac 01       	movw	r20, r24
    3834:	bd 01       	movw	r22, r26
    3836:	cf 01       	movw	r24, r30
    3838:	08 95       	ret

0000383a <__udivmodhi4>:
    383a:	aa 1b       	sub	r26, r26
    383c:	bb 1b       	sub	r27, r27
    383e:	51 e1       	ldi	r21, 0x11	; 17
    3840:	07 c0       	rjmp	.+14     	; 0x3850 <__udivmodhi4_ep>

00003842 <__udivmodhi4_loop>:
    3842:	aa 1f       	adc	r26, r26
    3844:	bb 1f       	adc	r27, r27
    3846:	a6 17       	cp	r26, r22
    3848:	b7 07       	cpc	r27, r23
    384a:	10 f0       	brcs	.+4      	; 0x3850 <__udivmodhi4_ep>
    384c:	a6 1b       	sub	r26, r22
    384e:	b7 0b       	sbc	r27, r23

00003850 <__udivmodhi4_ep>:
    3850:	88 1f       	adc	r24, r24
    3852:	99 1f       	adc	r25, r25
    3854:	5a 95       	dec	r21
    3856:	a9 f7       	brne	.-22     	; 0x3842 <__udivmodhi4_loop>
    3858:	80 95       	com	r24
    385a:	90 95       	com	r25
    385c:	bc 01       	movw	r22, r24
    385e:	cd 01       	movw	r24, r26
    3860:	08 95       	ret

00003862 <__prologue_saves__>:
    3862:	2f 92       	push	r2
    3864:	3f 92       	push	r3
    3866:	4f 92       	push	r4
    3868:	5f 92       	push	r5
    386a:	6f 92       	push	r6
    386c:	7f 92       	push	r7
    386e:	8f 92       	push	r8
    3870:	9f 92       	push	r9
    3872:	af 92       	push	r10
    3874:	bf 92       	push	r11
    3876:	cf 92       	push	r12
    3878:	df 92       	push	r13
    387a:	ef 92       	push	r14
    387c:	ff 92       	push	r15
    387e:	0f 93       	push	r16
    3880:	1f 93       	push	r17
    3882:	cf 93       	push	r28
    3884:	df 93       	push	r29
    3886:	cd b7       	in	r28, 0x3d	; 61
    3888:	de b7       	in	r29, 0x3e	; 62
    388a:	ca 1b       	sub	r28, r26
    388c:	db 0b       	sbc	r29, r27
    388e:	0f b6       	in	r0, 0x3f	; 63
    3890:	f8 94       	cli
    3892:	de bf       	out	0x3e, r29	; 62
    3894:	0f be       	out	0x3f, r0	; 63
    3896:	cd bf       	out	0x3d, r28	; 61
    3898:	09 94       	ijmp

0000389a <__epilogue_restores__>:
    389a:	2a 88       	ldd	r2, Y+18	; 0x12
    389c:	39 88       	ldd	r3, Y+17	; 0x11
    389e:	48 88       	ldd	r4, Y+16	; 0x10
    38a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    38a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    38a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    38a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    38a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    38aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    38ac:	b9 84       	ldd	r11, Y+9	; 0x09
    38ae:	c8 84       	ldd	r12, Y+8	; 0x08
    38b0:	df 80       	ldd	r13, Y+7	; 0x07
    38b2:	ee 80       	ldd	r14, Y+6	; 0x06
    38b4:	fd 80       	ldd	r15, Y+5	; 0x05
    38b6:	0c 81       	ldd	r16, Y+4	; 0x04
    38b8:	1b 81       	ldd	r17, Y+3	; 0x03
    38ba:	aa 81       	ldd	r26, Y+2	; 0x02
    38bc:	b9 81       	ldd	r27, Y+1	; 0x01
    38be:	ce 0f       	add	r28, r30
    38c0:	d1 1d       	adc	r29, r1
    38c2:	0f b6       	in	r0, 0x3f	; 63
    38c4:	f8 94       	cli
    38c6:	de bf       	out	0x3e, r29	; 62
    38c8:	0f be       	out	0x3f, r0	; 63
    38ca:	cd bf       	out	0x3d, r28	; 61
    38cc:	ed 01       	movw	r28, r26
    38ce:	08 95       	ret

000038d0 <_exit>:
    38d0:	f8 94       	cli

000038d2 <__stop_program>:
    38d2:	ff cf       	rjmp	.-2      	; 0x38d2 <__stop_program>
